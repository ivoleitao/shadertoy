{
    "ver": "0.1",
    "info": {
        "id": "WscGRM",
        "date": "1568303317",
        "viewed": 4128,
        "name": "Hutger Rauer (4k Intro port)",
        "username": "spolsh",
        "description": "Web GL port of Hutger Rauer 4K Intro released at Xenium 2019 demoparty (xenium.rocks) scoring 2nd place\nhttps:\/\/www.pouet.net\/prod.php?which=82772",
        "likes": 63,
        "published": 3,
        "flags": 64,
        "usePreview": 1,
        "tags": [
            "3d",
            "raymarching",
            "sdf",
            "intro",
            "4k",
            "car",
            "xenium",
            "klos"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [
                {
                    "id": "4tX3WB",
                    "filepath": "https:\/\/soundcloud.com\/spolsh\/shxk2-hutger-raurer",
                    "previewfilepath": "https:\/\/soundcloud.com\/spolsh\/shxk2-hutger-raurer",
                    "type": "musicstream",
                    "channel": 0,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 0
                }
            ],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "\/*\n''''''''''''''''''''''''''''''''''''''''''''        Xenium 2019\n'''@@@@''''''''''@@@'''''@@@@@@@@@@@@@@@@'''\n'''@@@@'''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''  code  klos\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''        shx\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''        \n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''\n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  music shx\n''@@@@@@''''''''@@@@@''''''''''''''''@@@@@''  \n''@@@@@@'''@@@@@@@@@@''''@@@@@@@@@@@@@@@@@''\n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  gfx   klos\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  \n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''\n'''@@@@''''@@@@@@@@@''''@@@@@@@@@@@@@@@@@@''  >>> Hutger Rauer <<<\n''''''''''''''''''''''''''''''''''''''''''''  \n''''''''''''''''''''''''''''''''''''''''''''\n'''@@@@''''@@@@@@@@@'''''@@@@@@@@@@@@@@@@'''\n'''@@@@''''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''  tools .crinkler\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''        .4klang\n''@@@@@@''@@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''        .opengl\n''@@@@@@'''@@@@@@@@@@'''@@@@@@@@@@@@@@@@@@''        .k2yasm\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''  greets\n''@@@@@@''''''''@@@@@'''@@@@@'''''''''''''''    Aberration Creations,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@'''    Abyss, Adapt, Alcatraz,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Altair, Brain Control,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Dekadence, Desire, FHI,\n''@@@@@@''''''''@@@@@'''@@@@@@@@@@@@@@@@@@''    Fulcrum, Hprg, LJ, Nuance,\n'''@@@@'''''''''@@@@''''@@@@@@@@@@@@@@@@@@''    PVM, Rabenauge, Skyrunner,\n''''''''''''''''''''''''''''''''''''''''''''\tTitan & everybody we forgot!\n*\/\n\n#define USE_MINIMIZED\n\n\/\/ #define v iChannelTime[0]\n\/\/ #define v (mod(iTime, 109.0)) \/\/ Spotet compilation issues recently\n#define v iTime\n#define l iResolution\n\n#define PI 3.1415\n#define F gl_FragCoord\n#define O (min(iFrame,0))\n#define N normalize\n#define M(v)smoothstep(0.,1.,v)\n#define C(v)clamp(v,0.,1.)\n\n#ifdef USE_MINIMIZED\n\n    #define S float\n    #define W vec2\n    #define V vec3\n    #define I int[]\n    #define J S[]\n\n\n    int m=-1;\n\n    S i=1.,\n      x=0.,\n      y=0.,\n      z=1e+09;\n\n    V a=V(1,-1,0),\n      s=V(0,.9,0),\n      r=V(60,2,2.5),\n      e=V(1.2,.3,.1);\n\n    W \/\/ l=W(1920,1080),\n      p=W(1e+09);\n\n    mat2 n(S m)\n    {\n      S y=sin(m),\n        x=cos(m);\n      return mat2(x,y,-y,x);\n    }\n    S t(S x)\n    {\n      return x*exp(1.-x);\n    }\n    S h(W x)\n    {\n      return fract(sin(dot(x,W(12.9898,78.233)))*43758.5);\n    }\n    S w(W m)\n    {\n      W x=floor(m),\n        z=fract(m),\n         p=z*z*(3.-2.*z);\n\n      S y=h(x),\n        e=h(x+a.xz),\n        i=h(x+a.zx),\n        s=h(x+a.xx);\n\n      return mix(y,e,p.x)+(i-y)*p.y*(1.-p.x)+(s-e)*p.x*p.y;\n    }\n    S d(W x)\n    {\n      return.5*w(x)+.25*w(2.*x)+.125*w(4.*x);\n    }\n    S d(S x,S m,S z)\n    {\n      S y=C(.5+.5*(m-x)\/z);\n      return mix(m,x,y)-z*y*(1.-y);\n    }\n    S h(V x,V m,V y)\n    {\n      V p=step(m-y,x)-step(m+y,x);\n      return p.x*p.y*p.z;\n    }\n    S d(V x,V y)\n    {\n      V m=abs(x)-y;\n      return length(max(m,0.))+min(max(m.x,max(m.y,m.z)),0.);\n    }\n    S h(V m,V x)\n    {\n      S y=length(m\/x);\n      return y*(y-1.)\/length(m\/(x*x));\n    }\n    W n(W y,W x)\n    {\n      return y.x<x.x?y:x;\n    }\n    V t(V x,S m)\n    {\n      return x.xy*=n(m),x;\n    }\n    W P(V m)\n    {\n      V i=m;\n      i.z=abs(abs(i.z)-.3);\n      p.x=min(p.x,length(i-V(.87,.28,.05))-.045);\n      W y=W(p.x,5);\n      V e=m;\n      if(x<9.)\n        e.x=mod(e.x+4.,8.)-4.,e.z=mod(e.z+1.,2.)-1.,y=n(y,vec2(h(e,vec3(1.2,.6,.6)),4));\n      else\n        {\n          if(h(m,V(0,.5,0),V(2.4,1.,1.5))>.5)\n            {\n              V r=e;\n              r.xz=abs(r.xz);\n              r-=V(.6,.15,.4);\n              p.y=min(p.y,d(e-V(-.9,.3,0),V(.1,.02,.3))-.03);\n              S z=d(max(h(abs(e-V(-.2,.2,0)),V(1.3,.3,1.)),d(e-V(0,.2,0),V(1.3,.08,.34))-.1),mix(h(t(e,.2)-V(-.45,.3,0),V(.6,.2,.35)),d(t(e,.2)-V(-.45,.3,0),V(.6,.3,.35))-.1,.3)-.05,.04),s=max(length(r.xy)-.16,abs(r.z)-.11);\n              y=n(y,n(W(max(-length(r-.1*a.zzx)+.12,s),3),W(max(max(max(max(-s+.02,max(z-.04,d(s,z,.17))),-t(e,.1*PI).x-.85),-e.y+.05),-d(e-vec3(1,.28,0),vec3(.15,.04,.4))),4)));\n            }\n          V r=m-V(-12.*x+666.48,1,0);\n          r.xz*=n(8.*x);\n          mat2 z=n(.25*PI);\n          r.yz*=z;\n          r.xy*=z;\n          S s=d(r,V(.5));\n          p.y=min(p.y,s);\n          V l=m-V(-.9,-.45,0);\n          l.z=abs(l.z);\n          l-=V(-.02,0,.3-.01*cos(2.*l.x+28.*x));\n          p.y=min(p.y,d(l-V(-20,.75,-.05),V(20,.01,.06)));\n          y=n(y,W(p.y,4));\n        }\n      m.x+=12.*x;\n      V r=m;\n      r.z=abs(r.z);\n      r.x=mod(r.x+1.5,3.)-1.5;\n      y=n(y,W(min(d(r-V(0,-.095,.7),V(.5,.1,.06)),d(r-V(0,-.095,2.1),V(1.5,.1,.06))),6));\n      if(abs(m.z)>2.)\n        y=n(y,W(m.y-d(m.xz)*.2*M((abs(m.z)-2.2)\/.4)-d(m.xz*.1)*4.*M((abs(m.z)-2.6)\/7.4)*M((x-18.)\/10.),2));\n      return y;\n    }\n    W P(V x,V y,V z)\n    {\n      V m=1.\/y,e=m*x,\n        s=abs(m)*z,\n        p=-e-s,\n        r=-e+s;\n      return W(max(max(p.x,p.y),p.z),min(min(r.x,r.y),r.z));\n    }\n    W P(V m,V x)\n    {\n      if(i>.5)\n        r.yz=W(4,30);\n      W y=W(1e+09,-1),\n        p=P(m-s,x,r),\n        e;\n      S z=.1,\n        a=90.,\n        l=-m.y\/x.y,\n        d;\n\n      if(l>0.)\n        a=min(a,l),\n        y=W(l,0);\n\n      if(p.x<p.y&&p.y>0.&&p.x<a)\n        {\n          d=z=max(p.x,z);\n          if(i<.5)\n            y=n(y,W(p.y,1));\n          for(int o=O;o<128&&d<min(p.y,a);o++)\n            {\n              e=P(m+x*d);\n              if(e.x<.0001*d)\n                {\n                  y=W(d,e.y);\n                  break;\n                }\n              d+=e.x;\n            }\n        }\n      return y;\n    }\n    V g(V x)\n    {\n      W m=W(1,-1)*.002;\n      return N(m.xyy*P(x+m.xyy).x+m.yyx*P(x+m.yyx).x+m.yxy*P(x+m.yxy).x+m.xxx*P(x+m.xxx).x);\n    }\n    V g(V m,V x)\n    {\n      S y=1.-abs(atan(m.z,m.x)\/2.*PI);\n      return mix(mix(.1*a.zzx*max(5.*m.y+.3,0.)+(.2*M((y-.9)\/.1)*(e-.2)+2.*M((y-.99)\/.01)*e)*(10.*max(0.,m.y)),V(0),step(m.y,.03*d(-20.*m.xz)))+.5*pow(max(0.,m.y),8.)*e,.01*e,step(m.y,.07*d(-10.*m.xz)));\n    }\n    I c=I(12,-1,13,-1,0,1,2,3,4,5,6,7,8,0,10,11,9,4,3,14,5,6,4,3,7,-1);\n    J o=J(3.,5.,6.,7.,9.,11.,16.,21.85,26.,27.,27.9,32.,40.,54.,54.5,55.,55.5,66.,67.,74.,82.,83.,90.,91.,96.,106.),\n      u=J(2.,4.,1.2,-2.,20.,20.,2.5,0.,-7.,4.,12.,20.,30.,40.,-2.),\n      b=J(.1,.2,1.,1.2,.2,2.2,1.5,30.,1.5,1.2,.2,1.,1.,5.,1.2),\n      k=J(-.3,-.1,-8.,-1.5,-1.5,.7,3.,2.,1.5,-3.5,-.1,-6.,-4.,-.3,0.),\n      Z=J(20.,0.,1.7,1.,0.,0.,.7,4.,5.,0.,0.,0.,30.,43.,1.),\n      Y=J(0.,-.2,-.2,-.5,-50.,-50.,-.1,-8.,-.5,-.05,-25.,-50.,-25.,-30.,-.3),\n      X=J(-5.,0.,-.3,-.2,0.,0.,-.1,-1.,.5,-.05,0.,0.,-25.,-30.2,-.1);\n\n    void mainImage(out vec4 f, in vec2 fragCoord)\n    {   \n      f = a.zzzx;\n\n      W r=(-l.xy+2.*F.xy)\/l.y,\n        w=F.xy\/l.xy,\n        U;\n\n      if(abs(r.y)>.74) return;\n\n      \/\/ x=S(v)\/44100.+h(F.xy)*.04;  \n      x=v+h(F.xy)*.04; \n\n      if (iMouse.xy==vec2(0) && iFrame==0) \/\/ miniature\n        x=88.+h(F.xy)*.04;\n\n      i=x>55.5&&x<91.?0.:1.;  \n      V T=V(0.,.1,0),R,Q,L,K,H,G,E,D;\n      R=Q=L=K=H=G=E=D=V(0);\n      for(int B=O;B<o.length();++B)\n        {\n          if(x>=o[B])\n            {\n              y=x-o[B];\n              m=c[B];\n              if(m>=0)\n                R=V(u[m],b[m],k[m]),T.x=Z[m],Q.x=Y[m],L.x=X[m];\n            }\n        }\n      if(m==-1)\n        return;\n      R+=Q*y;\n      T+=L*y;\n      R.y+=.01*h(a.xx*100.*x);\n      r+=4.*dot(r,r)*h(F.xy+x)\/l.xy;\n      V B=N(T-R),\n        A=N(cross(B,a.zxz)),\n        q=cross(A,B),\n        j=mat3(A,q,B)*N(V(r,4)),\n        ab=g(j,R),\n        ac=V(1),\n        ad=V(2,.5,0);\n\n      p=a.xx*1e+09;\n      for(int ae=O;ae<3;++ae)\n        {\n          U=P(R,j);\n          if(ae==0)\n            z=U.x;\n          if(U.y<0.)\n            {\n              K+=g(j,R)*ac;\n              break;\n            }\n          H=R+U.x*j;\n          G=U.y<1.5?U.y<.5?a.zxz:V(0,N(s.yz-H.yz)):g(H);\n          W af=M((abs(fract(1.5*H.yz+.5)*2.-1.)-.1)\/.02),\n            ag=M((abs(fract(1.5*H.yz+.5)*2.-1.)-.05)\/.05);\n          S ah=pow(dot(G,j)+1.,.2),\n            ai=exp2(min(0.,P(H+G*.07).x\/.07-1.))*exp2(min(0.,P(H+G*.15).x\/.15-1.))*exp2(min(0.,P(H+G*.3).x\/.3-1.)),\n            aj=pow(t(10.*fract(.92*x)),8.),ak=1.-C(floor(2.*fract(.1*(H.x+12.*x)))),\n            al=1.-min(af.x,af.y),am=1.-min(ag.x,ag.y);\t\t\n          E=V(.1);\n          if(U.y==0.)\n            E*=.1*d((H.xz+12.*a.xz*x)*W(4,80)),ah*=.1;\n          D=(ai+80.*V(0,.5,1)\/pow(length(ad-H),.1)*M(dot(N(ad-H),-N(V(1,-5,0)))-.1\/1.5))*E;\n          if(U.y==1.)\n            H.yz*=n(.2*floor(5.*x)*step(60.,x)),D+=2.-2.*C(floor(10.*fract(.05*(H.x+12.*x))))+5.*ak*(aj*al*step(60.,x)+am*step(70.,x))*mix(V(1),\n            am*mix(e.zyx,a.xzz,ak),M((x-75.)\/5.));\n          if(U.y==4.)\n            D+=e*pow(max(0.,G.y),3.)*M(d(600.*H.xz)*4.-2.);\n          K+=(1.-ah)*D*ac;\n          ac*=ah;\n          j=reflect(j,G);\n          R=H+.001*j;\n        }\n      p=.5*exp(-p*10.);\n      w*=1.-w.yx;\n      f=vec4(pow((mix(mix(ab,K+e.zyx*p.x+e*p.y,exp(-.001*z*z)),e,.02*(1.-exp(-.001*z*z)))+V(t(max(0.,10.*(x-55.5))))+V(t(max(0.,10.*(x-91.)))))*pow(w.x*w.y*15.,.5),V(.4545)),1.);\n    }\n\n#else \/\/ USE_MINIMIZED\n\n    int tid = -1;\n\n    float gOpen\t= 1.,\n          gTime\t= 0.,\n          tdiff = 0.,\n          tt\t= 10e8;\n\n    vec3  r\t\t\t  \t= vec3(  1, -1, 0  ),\n          gBoundsPos  \t= vec3(  0, .9, 0  ),\n          gBoundsSize \t= vec3( 60,  2, 2.5),\n          LINE_COLOR  \t= vec3( 1.2, .3, .1);\n\n    vec2 \/\/ R\t\t\t= vec2(1920, 1080),\n         gBloom\t\t= vec2(10e8);\n\n    mat2 rot(float a)\n    {\n        float s = sin(a),\n          c = cos(a);\n        return mat2(c, s, -s, c);\n    }\n\n    float impulse(float k)\n    {\n        return k * exp(1. - k);\n    }\n\n    float hash(vec2 p)\n    {\n        return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n\n    float noise(vec2 p)\n    {\n        vec2 i = floor(p),\n             f = fract(p), \n             u = f * f * (3. - 2. * f);\n\n        float a = hash(i), \n              b = hash(i + r.xz),\n              c = hash(i + r.zx),\n              d = hash(i + r.xx);  \n\n        return mix(a, b, u.x) +\n                (c - a) * u.y * (1. - u.x) +\n                (d - b) * u.x * u.y;\n    }\n\n    float fbm(vec2 x)\n    {\n        return + .5   * noise(     x)\n               + .25  * noise(2. * x)\n               + .125 * noise(4. * x);\n    }\n\n    float smin(float a, float b, float k)\n    {\n        float h = C(.5+.5*(b - a) \/ k);\n        return mix(b, a, h) - k * h * (1. - h);\n    }\n\n    float insideBox3D(vec3 p, vec3 center, vec3 size)\n    {\n        vec3 s = step(center - size, p) - step(center + size, p);\n        return s.x * s.y * s.z;\n    }\n\n    float sdBox(vec3 p, vec3 b)\n    {\n        vec3 d = abs(p) - b;\n        return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n    }\n\n    float sdEll(vec3 p, vec3 r)\n    {\n        float k0 = length(p \/ r);\n        return k0 * (k0 - 1.) \/ length(p \/ (r * r));\n    }\n\n    vec2 opU(vec2 d1, vec2 d2)\n    {\n        return d1.x < d2.x ? d1 : d2;\n    }\n\n    vec3 rotXY(vec3 p, float a)\n    {\n        p.xy *= rot(a);\n        return p;\n    }\n\n    vec2 map(vec3 pos)\n    {\n        \/\/ car light\n        vec3 pR = pos;\n        pR.z = abs(abs(pR.z) - 0.3);\n        gBloom.x = min(gBloom.x, length(pR - vec3(.87, 0.28, 0.05)) - .045);\n        vec2 res = vec2(gBloom.x, 5);\n\n        vec3 pC = pos;\n        if (gTime < 9.) \/\/ gTStart\n        {\n            pC.x = mod(pC.x + 4.0, 8.0) - 4.0;\n            pC.z = mod(pC.z + 1.0, 2.0) - 1.0;\n            res = opU(res, vec2(sdEll(pC, vec3(1.2, .6, .6)), 4));\n        }\n        else\n        {\n            if (insideBox3D(pos, vec3(0, .5, 0), vec3(2.4, 1., 1.5)) > .5)\n            {\n                vec3 pW = pC;\n\n                pW.xz = abs(pW.xz);\n                pW -= vec3(.6, .15, .4);\n\n                gBloom.y = min(gBloom.y, sdBox(pC - vec3(-0.9, 0.3, 0), vec3(0.1, 0.02, 0.3)) - 0.03);\n\n                float sBody0 = smin(\n                                max(\n                                    sdEll(abs(pC - vec3(-0.2, 0.2, 0)), vec3(1.3, 0.3, 1.)),\n                                    sdBox(pC - vec3(0, 0.2, 0), vec3(1.3, 0.08, 0.34)) - .1\n                                ), mix(\n                                    sdEll(rotXY(pC, 0.2) - vec3(-0.45, 0.3, 0), vec3(0.6, 0.2, 0.35)),\n                                    sdBox(rotXY(pC, 0.2) - vec3(-0.45, 0.3, 0), vec3(0.6, 0.3, 0.35)) - .1,\n                                    0.3) - 0.05,\n                            0.04),\n                    sWheels0 = max(length(pW.xy) - 0.16, abs(pW.z) - 0.11);\n\n                res = opU( \n                        res,\n                        opU(\n                            vec2( max(-length(pW - .1 * r.zzx) + .12, sWheels0), 3),\n                            vec2( max(\n                                    max(\n                                        max(\n                                            max(\n                                                -sWheels0 + .02,\n                                                max(\n                                                    sBody0 - .04, \n                                                    smin(sWheels0, sBody0, .17)\n                                                )\n                                            ),\n                                        -rotXY(pC, .1 * PI).x - .85),\n                                        -pC.y + .05\n                                    ),\n                                    -sdBox(pC -vec3(1, .28, 0), vec3(.15, .04, .4))\n                                ),\n                                4\n                            )\n                        )\n                    );\n            }\n\n            \/\/ orb\n            vec3 pB = pos - vec3(-12. * gTime + 666.48, 1, 0); \/\/ gTTunel\n            pB.xz *= rot(8. * gTime);\n            mat2 r2 = rot(.25 * PI);\n            pB.yz *= r2;\n            pB.xy *= r2;\n            float box0 = sdBox(pB, vec3(.5));\n            gBloom.y = min(gBloom.y, box0);\n\n            \/\/ trail\n            vec3 pT = pos - vec3(-.9, -.45, 0);\n            pT.z = abs(pT.z);\n            pT -= vec3(-.02, 0, .3 -.01 * cos( 2.*pT.x+28.*gTime ));\n            gBloom.y = min(gBloom.y, sdBox(pT - vec3(-20, .75, -.05), vec3(20, .01, .06)));\n            res = opU(res, vec2(gBloom.y, 4));\n        }\n\n        pos.x += 12. * gTime;\n        \/\/ lanes\n        vec3 pL = pos;\n        pL.z = abs(pL.z);\n        pL.x = mod(pL.x + 1.5, 3.) - 1.5;\n        res = opU(res, vec2(\n                min(sdBox(pL - vec3(0, -.095,  .7), vec3( .5, .1, .06)),\n                    sdBox(pL - vec3(0, -.095, 2.1), vec3(1.5, .1, .06))),\n                 6));\n\n        \/\/ ground\n        if (abs(pos.z) > 2.)\n        {\n            res = opU(res, vec2(\n                        pos.y\n                        - fbm(pos.xz     ) *  .2 * M((abs(pos.z) - 2.2) \/  .4)\n                        - fbm(pos.xz * .1) * 4.  * M((abs(pos.z) - 2.6) \/ 7.4) * M((gTime - 18.)\/10.),\n                        2));\n        }\n\n        return res;\n    }\n\n    vec2 iBox(vec3 ro, vec3 rd, vec3 rad)\n    {\n        vec3 m = 1. \/ rd,\n          n = m * ro,\n          k = abs(m) * rad,\n          t1 = -n - k,\n          t2 = -n + k;\n        return vec2(max(max(t1.x, t1.y), t1.z),\n                 min(min(t2.x, t2.y), t2.z));\n    }\n\n    vec2 castRay(vec3 ro, vec3 rd)\n    {\n        if (gOpen > .5)\n            gBoundsSize.yz = vec2(4, 30);\n\n        vec2 res = vec2(10e8, -1),\n             tb = iBox(ro - gBoundsPos, rd, gBoundsSize),\n             h;\n\n        float tmin =  .1,\n              tmax = 90.,\n              tp1 = -ro.y \/ rd.y,\n              t;\n\n        \/\/ raytrace floor plane\n        if (tp1 > 0.)\n        {\n            tmax = min(tmax, tp1);\n            res = vec2(tp1, 0);\n        }    \n\n        \/\/ raymarch primitives   \n        if (tb.x < tb.y && tb.y > 0. && tb.x < tmax)\n        {\n            t = tmin = max(tb.x, tmin);\n            if (gOpen < .5)\n                res = opU(res, vec2(tb.y, 1));\n\n            for (int i = O; i < 128 && t < min(tb.y, tmax); i++)\n            {\n                h = map(ro + rd * t);\n                if (h.x < (.0001 * t))\n                {\n                    res = vec2(t, h.y);\n                    break;\n                }\n                t += h.x;\n            }\n        }\n\n        return res;\n    }\n\n    vec3 calcNormal(vec3 pos)\n    { \/\/ http:\/\/iquilezles.org\/www\/articles\/normalsSDF\/normalsSDF.htm\n       vec2 e = vec2(1, -1) * .002;\n       return N(e.xyy * map(pos + e.xyy).x +\n                e.yyx * map(pos + e.yyx).x +\n                e.yxy * map(pos + e.yxy).x +\n                e.xxx * map(pos + e.xxx).x);\n    }\n\n    vec3 sky(vec3 rd, vec3 ro)\n    {    \n        float angle = 1. - abs(atan(rd.z, rd.x) \/ 2. * PI);\n        return mix(\n                mix(\n                        .1 * r.zzx * max(5. * rd.y + .3, 0.)\t\t\t\t\t\t\t\t\/\/ bg\n                            + (    .2 * M((angle - .9 )\/.1 ) * (LINE_COLOR - .2)\t\t\t\/\/ line glow\n                                + 2.  * M((angle - .99)\/.01) *  LINE_COLOR      )\t\t\t\/\/ line\n                                * (10. * max(0., rd.y)),\t\t\t\t\t\t\t\t\t\/\/ line scale and bottom up gradient\n                        vec3(0),\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ distant mountains shape color\n                        step(rd.y, .03 * fbm(-20. * rd.xz))\t\t\t\t\t\t\t\t    \/\/ distant mountains shape\n                    ) \n                    + .5 * pow(max(0., rd.y), 8.) * LINE_COLOR,\t\t\t\t\t\t\t\t\/\/ dome light\n                .01 * LINE_COLOR,\n                step(rd.y, .07*fbm(-10.*rd.xz))\n            );\n    }\n\n    \/\/             \t\t       0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10,   11,   12,   13,    14,   15,   16,   17,   18,   19,   20,   21,   22,\t  23,   24,    25\n    int[] \ttids = int[](     12,   -1,   13,   -1,    0,    1,    2,    3,    4,    5,     6,    7,    8,    0,    10,   11,    9,    4,    3,   14,    5,    6,    4,    3,    7,   -1);\n    float[] time = float[](  3.0,  5.0,  6.0,  7.0,  9.0, 11.0, 16.0, 21.85, 26.0, 27.0,  27.9, 32.0, 40.0, 54.0,  54.5, 55.0, 55.5, 66.0, 67.0, 74.0, 82.0, 83.0, 90.0, 91.0, 96.0, 106.), \/\/ 100.0\n            rox  = float[](  2.0,  4.0,  1.2, -2.0, 20.0, 20.0,  2.5,  0.0, -7.0,  4.0,  12.0, 20.0, 30.0, 40.0, -2.0),\n            roy  = float[](  0.1,  0.2,  1.0,  1.2,  0.2,  2.2,  1.5, 30.0,  1.5,  1.2,   0.2,  1.0,  1.0,  5.0,  1.2),\n            roz  = float[]( -0.3, -0.1, -8.0, -1.5, -1.5,  0.7,  3.0,  2.0,  1.5, -3.5,  -0.1, -6.0, -4.0, -0.3,  0.0),\n            tax  = float[]( 20.0,  0.0,  1.7,  1.0,  0.0,  0.0,  0.7,  4.0,  5.0,  0.0,   0.0,  0.0, 30.0, 43.0,  1.0),\n            roxm = float[](  0.0, -0.2, -0.2, -0.5,-50.0,-50.0, -0.1, -8.0, -0.5, -0.05,-25.0,-50.0,-25.0,-30.0, -0.3),\n            taxm = float[]( -5.0,  0.0, -0.3, -0.2,  0.0,  0.0, -0.1, -1.0,  0.5, -0.05,  0.0,  0.0,-25.0,-30.2, -0.1);\n    \/\/                         0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10,   11,   12,   13,    14,   15,   16,   17,   18,   19,   20,   21,   22,\t  23,   24,    25\n\n    \/\/ void main()\n    void mainImage(out vec4 f, in vec2 fragCoord)\n    {\n        vec2 p = (-l.xy + 2. * F.xy) \/ l.y;\n        vec2 q = F.xy \/ l.xy;\n        vec2 res;\n\n        if (abs(p.y) > 0.74) return;\n\n        gTime = v + (hash(F.xy)*.04);\n        gOpen = gTime > 55.5 && gTime < 91. ? 0.0 : 1.0; \/\/ gTTunel, gTEnd\n\n        vec3 ta = vec3(0.,.1,0),\n          ro, rom, tam,  col,  pos,  nor,  alb,  rad;\n        ro = rom = tam = col = pos = nor = alb = rad = vec3(0);\n\n        for (int ti = O; ti < time.length(); ++ti)\n        {\n            if (gTime >= time[ti])\n            {\n                tdiff = gTime - time[ti];\n                tid = tids[ti];\n                if (tid >= 0)\n                {\n                    ro = vec3(rox[tid], roy[tid], roz[tid]);\n                    ta.x = tax[tid];\n                    rom.x = roxm[tid];\n                    tam.x = taxm[tid];\n                }\n            }\n        }\n        if (tid == -1) return;\n        ro += rom * tdiff;\n        ta += tam * tdiff;\n        ro.y += 0.01 * hash(r.xx * 100. * gTime);\n        p += 4.*dot(p,p)*(hash(F.xy+gTime))\/l.xy;\n\n        vec3 cw = N(ta - ro);\n        vec3 cu = N(cross(cw, r.zxz));\n        vec3 cv = cross(cu, cw);\n        vec3 rd = mat3(cu, cv, cw) * N(vec3(p, 4));\n        vec3 bg = sky(rd, ro);\n        vec3 tint = vec3(1);\n        vec3 pSpot = vec3(2, .5, 0);\n\n        gBloom = r.xx*10e8;\n        for (int bi = O; bi < 3; ++bi)\n        {\n            res = castRay(ro, rd);\n\n            if (bi == 0)\n            {\n                tt = res.x;\n            }\n\n            if (res.y < .0)\n            {\n                col += sky(rd, ro) * tint;\n                break;\n            }\n\n            pos = ro + res.x * rd;\n            nor = (res.y < 1.5)\n                ? (res.y < 0.5)\n                    ? r.zxz\n                    : vec3(0, N(gBoundsPos.yz - pos.yz))\n                : calcNormal(pos);\n\n            vec2 str0 = M( ( abs(fract(1.5*pos.yz+0.5)*2.-1.) -.1 ) \/.02 );\n            vec2 str1 = M( ( abs(fract(1.5*pos.yz+0.5)*2.-1.) -.05) \/.05 );\n\n            float fre = pow(dot(nor, rd) + 1., .2),\n              ao = 1. \n                * exp2(min(0., map(pos + nor * .07).x \/ .07 - 1.))\n                * exp2(min(0., map(pos + nor * .15).x \/ .15 - 1.))\n                * exp2(min(0., map(pos + nor * .3 ).x \/ .3  - 1.)),\n              imp = pow( impulse(10.*fract(.92*gTime)), 8.),\n              frames1 = 1. - C( floor(2. * fract(.1 *(pos.x + 12.*gTime)) ) ),\t\t\/\/ frames\n              stripes0 = 1. - min(str0.x, str0.y),\t\t\t\t\t\t\t\t\t\/\/ blinking stripes\n              stripes1 = 1. - min(str1.x, str1.y);\t\t\t\t\t\t\t\t\t\/\/ blinking stripes              \n\n            alb = vec3(.1);\n            if (res.y == 0.)\n            {\n                alb *= .1 * fbm((pos.xz + 12. * r.xz * gTime) * vec2(4, 80));\n                fre *= .1;\n            }\n\n            rad = (ao\n                 + 80.\n                    * vec3(0, .5, 1)\n                    * 1. \/ pow( length(pSpot - pos), 0.1)\n                    * M( dot( N(pSpot - pos), -N(vec3(1, -5, 0)) ) -.1 \/ 1.5)\n                  ) * alb;\n\n            if (res.y == 1.0)\n            {\n                pos.yz *= rot(0.2*floor(5.0*gTime) * step(60.0, gTime));\n\n                rad +=  2. -2.*C( floor(10.* fract(.05*(pos.x + 12.*gTime)) ) )\n                        + 5. * frames1 * (  imp * stripes0 * step(60., gTime)\n                                +                 stripes1 * step(70., gTime))\n                        * mix(vec3(1), stripes1 * mix(LINE_COLOR.bgr, r.xzz, frames1), M( (gTime-75.) \/ 5.) );\n            }\n\n            if (res.y == 4.)        \n                rad += LINE_COLOR * pow(max(0.,nor.y), 3.) * M( fbm(600.*pos.xz)*4.-2. );\n\n            col += (1. - fre) * rad * tint;\n            tint *= fre;\n\n            rd = reflect(rd, nor);\n            ro = pos + .001 * rd;\n        }\n\n        gBloom = .5 * exp(-gBloom * 10.);\n        q *= 1. - q.yx;\n\n        f = vec4(pow(\t\t\t\t\t\t\t\t\t\t\t\t\/\/ gamma start\n            (\t\n                mix(\t\t\t\t\t\t\t\t\t\t\t\t\/\/ air red fog\n                    mix(\t\t\t\t\t\t\t\t\t\t\t\/\/ horizon blend blue fog\n                        bg,\n                        col\n                        + LINE_COLOR.bgr * gBloom.x\t\t\t\t\t\/\/ bloom red\n                        + LINE_COLOR     * gBloom.y,\t\t\t\t\/\/ bloom blue\n                        exp(-.001 * tt * tt)\n                    ),\n                    LINE_COLOR,\n                    .02 * (1. - exp(-.001 * tt * tt))\n                )\t\t\t\t\t\t\t\t\t\t\n                + vec3(impulse(max(0., 10. * (gTime - 55.5) )))\t\t\/\/ collision flash\n                + vec3(impulse(max(0., 10. * (gTime - 91. ) )))\t\t\/\/ tunnel leave flash\n            )\n             * pow(q.x * q.y * 15., .5),\t\t\t\t\t\t\t\/\/ vignette\n            vec3(.4545)), 1.);\t\t\t\t\t\t\t\t\t\t\/\/ gamma end\n    }\n\n#endif \/\/ USE_MINIMIZED",
            "name": "Image",
            "description": "",
            "type": "image"
        }
    ]
}