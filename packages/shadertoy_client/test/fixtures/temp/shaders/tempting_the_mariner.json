{
    "ver": "0.1",
    "info": {
        "id": "ll2BzR",
        "date": "1514378588",
        "viewed": 4486,
        "name": "Tempting the Mariner",
        "username": "dr2",
        "description": "Prequel to the Coleridge poem",
        "likes": 56,
        "published": 3,
        "flags": 0,
        "usePreview": 1,
        "tags": [
            "reflection",
            "waves",
            "sunset",
            "bird",
            "ship"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "\/\/ \"Tempting the Mariner\" by dr2 - 2017\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrEVCapsDf (vec3 p, vec4 u, float r);\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrSphDf (vec3 p, float r);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\n\nmat3 birdMat[2], bdMat;\nvec4 vum[4], vur[5];\nvec3 vim[4], vir[5];\nvec3 birdPos[2], bdPos, fltBox, shipConf, bDeck, qHit, sunDir, cloudDisp;\nfloat tCur, dstFar, szFac, shipRot, birdVel, birdLen, legAng, htWat;\nint idObj, idObjGrp;\nbool isRefl;\nconst int idHull = 1, idRud = 2, idStruc = 3, idMast = 4, idSparT = 5, idSparL = 6, idSailT = 7,\n   idSailA = 8, idSailF = 9, idFlag = 10, idRig = 11,\n   idWing = 21, idBdy = 22, idEye = 23, idBk = 24, idLeg = 25;\nconst float pi = 3.14159;\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  q = 0.5 * p + vec2 (0., tCur);\n  h = 0.2 * sin (q.y) + 0.15 * sin (dot (q, vec2 (0.1, 1.2))) +\n     0.1 * sin (dot (q, vec2 (-0.2, 1.4)));\n  h *= 0.3 * (1. - smoothstep (0.8 * dstFar, dstFar, length (p)));\n  q = p;\n  wFreq = 0.5;\n  wAmp = 0.05;\n  tw = 0.5 * tCur * vec2 (1., -1.);\n  for (int j = 0; j < 4; j ++) {\n    q *= qRot;\n    t4 = q.xyxy * wFreq + tw.xxyy;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return h;\n}\n\nvec3 WaveNf (vec2 p, float d)\n{\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p) - vec2 (WaveHt (p + e.xy), WaveHt (p + e.yx)), e.x).xzy);\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, p;\n  float ds, fd, att, attSum, d, sd;\n  p = ro + rd * (200. - ro.y) \/ rd.y;\n  ds = 0.1 * sqrt (length (ro - p));\n  fd = 0.001 \/ (smoothstep (0., 10., ds) + 0.1);\n  p.xz *= fd;\n  p.xz -= cloudDisp.xz;\n  p *= 3.;\n  att = Fbm2 (p.xz);\n  attSum = att;\n  fd *= 3.;\n  d = fd;\n  ds *= fd;\n  for (int j = 0; j < 4; j ++) {\n    attSum += Fbm2 (p.xz + d * sunDir.xz);\n    d += ds;\n  }\n  sd = clamp (dot (sunDir, rd), 0., 1.);\n  skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n  col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) * max (rd.y - 0.1, 0.))) +\n     0.3 * (vec3 (1., 0.4, 0.2) * pow (sd, 256.) + vec3 (1., 0.8, 0.7) * pow (sd, 1024.));\n  attSum = 1. - smoothstep (1., 9., attSum);\n  col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.2),\n     att * (0.001 + 0.999 * smoothstep (0.001, 0.004, rd.y))), attSum) +\n     vec3 (1., 0.4, 0.) * pow (attSum * att, 4.) * (pow (sd, 8.) + 0.5);\n  return col;\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ShipHullDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, fy, fz, gz;\n  q = p;\n  d = abs (p.z) - 4.5;\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  q.yz -= vec2 (-3.4, -0.4);\n  d = max (d, PrBoxDf (q, vec3 (0.3, 0.1, 0.5)));\n  DMINQ (idStruc);\n  q = p;\n  q.x = abs (q.x);\n  q.yz -= vec2 (-3.8, 0.5);\n  fz = q.z \/ 5. + 0.3;\n  fz *= fz;\n  fy = 1. - smoothstep (-1.3, -0.1, q.y);\n  gz = smoothstep (2., 5., q.z);\n  bDeck = vec3 ((1. - 0.45 * fz * fz) * (1.1 - 0.5 * fy * fy) *\n     (1. - 0.5 * smoothstep (-5., -2., q.y) * smoothstep (2., 5., q.z)),\n     0.78 - 0.8 * gz * gz - 0.2 * (1. - smoothstep (-5.2, -4., q.z)), 5. * (1. + 0. * 0.02 * q.y));\n  d = min (PrBoxDf (vec3 (q.x, q.y + bDeck.y - 0.6, q.z), bDeck),\n     max (PrBoxDf (q - vec3 (0., 0.72, -4.6), vec3 (bDeck.x, 0.12, 0.4)),\n     - PrBox2Df (vec2 (abs (q.x) - 0.4, q.y - 0.65), vec2 (0.2, 0.08))));\n  d = max (d, - PrBoxDf (vec3 (q.x, q.y - 0.58 - 0.1 * fz, q.z), vec3 (bDeck.x - 0.07, 0.3, bDeck.z - 0.1)));\n  q = p;\n  d = max (d, - max (PrBox2Df (vec2 (q.y + 3.35, mod (q.z + 0.25, 0.5) - 0.25), vec2 (0.08, 0.1)),\n     abs (q.z + 0.5) - 3.75));\n  DMINQ (idHull);\n  q = p;\n  d = PrBoxDf (q + vec3 (0., 4.4, 4.05), vec3 (0.03, 0.35, 0.5));\n  DMINQ (idRud);\n  return dMin;\n}\n\nfloat ShipMastDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d, fy, fz, s, rSpar, yLim, zLim;\n  rSpar = 0.05;\n  fy = 1. - 0.07 * p.y;\n  fz = 1. - 0.14 * step (1., abs (p.z));\n  zLim = abs (p.z) - 4.5;\n  q = p;\n  d = zLim;\n  q.z = mod (q.z + 1.4, 2.8) - 1.2;\n  d = max (d, PrCapsDf ((q - vec3 (0., 3.7 * (fz - 1.), 0.)).xzy, 0.1 * fy, 3.7 * fz));\n  DMINQ (idMast);\n  q = p;\n  yLim = abs (q.y - 0.2 * fz) - 3. * fz;\n  qq = q;\n  qq.y = mod (qq.y - 3.3 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.1 * fz;\n  d = max (max (min (d, PrCylDf (vec3 (qq - vec3 (0., 0.05 * fy * fz, 0.1 * fz - 0.23)).xzy,\n     0.15 * fy, 0.11 * fy * fz)), yLim), zLim);\n  DMINQ (idMast);\n  d = max (max (PrCapsDf (qq.yzx, 0.05, 1.23 * fy * fz), yLim), zLim);\n  DMINQ (idSparT);\n  q = p;\n  d = min (d, min (PrEVCapsDf (q - vim[0], vum[0], rSpar), PrEVCapsDf (q - vim[1], vum[1], rSpar)));\n  d = min (d, min (PrEVCapsDf (q - vim[2], vum[2], rSpar), PrEVCapsDf (q - vim[3], vum[3], rSpar)));\n  DMINQ (idSparL);\n  return dMin;\n}\n\nfloat ShipSailDf (vec3 p, float dMin)\n{\n  vec3 q, qq, w;\n  float d, fy, fz;\n  fy = 1. - 0.07 * p.y;\n  fz = 1. - 0.14 * step (1., abs (p.z));\n  q = p;\n  qq = q;\n  qq.y = mod (qq.y - 3.1 * (fz - 1.), 2. * fz) - fz;\n  qq.z = mod (qq.z + 1.4, 2.8) - 1.4 + 0.2 * (fz - abs (qq.y)) * (fz - abs (qq.y)) - 0.1 * fz;\n  d = max (max (max (PrBoxDf (qq, vec3 ((1.2 - 0.07 * q.y) * fz, fz, 0.01)),\n     min (qq.y, 1.5 * fy * fz - length (vec2 (qq.x, qq.y + 0.9 * fy * fz)))),\n     abs (q.y - 3. * (fz - 1.)) - 2.95 * fz), - PrBox2Df (qq.yz, vec2 (0.01 * fz)));\n  d = max (d, abs (p.z) - 4.5);\n  DMINQ (idSailT);\n  q = p;\n  q.z -= -3.8;  q.y -= -1.75 - 0.2 * q.z;\n  d = PrBoxDf (q, vec3 (0.01, 0.9 - 0.2 * q.z, 0.6));\n  DMINQ (idSailA);\n  q = p;\n  q.yz -= vec2 (-1., 4.5);\n  w = vec3 (1., q.yz);\n  d = max (max (max (abs (q.x) - 0.01, - dot (w, vec3 (2.3, 1., -0.35))),\n     - dot (w, vec3 (0.68, -0.74, -1.))), - dot (w, vec3 (0.41, 0.4, 1.)));\n  DMINQ (idSailF);\n  q = p;\n  q.yz -= vec2 (3.4, 0.18);\n  d = PrBoxDf (q, vec3 (0.01, 0.2, 0.3));\n  DMINQ (idFlag);\n  return dMin;\n}\n\nfloat ShipRigDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float rRig, d, fz, gz, s;\n  rRig = 0.02;\n  fz = 1. - 0.14 * step (1., abs (p.z));\n  q = p;\n  d = abs (p.z) - 4.5;\n  gz = (q.z - 0.5) \/ 5. + 0.3;\n  gz *= gz;\n  gz = 1.05 * (1. - 0.45 * gz * gz);\n  q.x = abs (q.x);\n  q.z = mod (q.z + 1.4, 2.8) - 1.4;\n  d = max (d, min (PrEECapsDf (q, vec3 (1.05 * gz, -3.25, -0.5), vec3 (1.4 * fz, -2.95, -0.05), 0.7 * rRig),\n     PrEECapsDf (vec3 (q.xy, abs (q.z + 0.2) - 0.01 * (0.3 - 2. * q.y)), vec3 (gz, -3.2, 0.),\n     vec3 (0.05, -0.9 + 2. * (fz - 1.), 0.), rRig)));\n  q = p;\n  d = min (d, PrEVCapsDf (q - vir[0], vur[0], 0.8 * rRig));\n  d = min (min (d, min (PrEVCapsDf (q - vir[1], vur[1], rRig),\n     PrEVCapsDf (q - vir[2], vur[2], rRig))), PrEVCapsDf (q - vir[3], vur[3], rRig));\n  q.x = abs (q.x);\n  d = min (d, PrEVCapsDf (q - vir[4], vur[4], rRig));\n  s = step (1.8, q.y) - step (q.y, -0.2);\n  d = min (min (d, min (PrEECapsDf (q, vec3 (0.95, 0.4, 2.7) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 1.1, -0.15) + vec3 (0., 2., 0.) * s, rRig),\n     PrEECapsDf (q, vec3 (1.05, 1., -0.1) + vec3 (-0.1, 2., 0.) * s,\n     vec3 (0.05, 0.5, -2.95) + vec3 (0., 1.7, 0.) * s, rRig))),\n     PrEECapsDf (q, vec3 (0.95, 0.4, -2.9) + vec3 (-0.1, 1.7, 0.) * s,\n     vec3 (0.05, 0.9, -0.25) + vec3 (0., 2., 0.) * s, rRig));\n  DMINQ (idRig);\n  return dMin;\n}\n\nfloat BdBodyDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float bkLen, d, a, wr, tr, u;\n  bkLen = 0.15 * birdLen;\n  q = p;\n  wr = q.z \/ birdLen;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * birdLen, birdLen);\n  DMINQ (idObjGrp + idBdy);\n  q = p;\n  q.x = abs (q.x);\n  wr = (wr + 1.) * (wr + 1.);\n  q -= birdLen * vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCylDf (q, 0.009 * birdLen, 0.2 * birdLen);\n  DMINQ (idObjGrp + idBdy);\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.08, 0.05, 0.9);\n  d = PrSphDf (q, 0.04 * birdLen);\n  DMINQ (idObjGrp + idEye);\n  q = p;  q -= birdLen * vec3 (0., -0.015, 1.15);\n  wr = clamp (0.5 - 0.3 * q.z \/ bkLen, 0., 1.);\n  d = PrFlatCylDf (q, 0.25 * wr * bkLen, 0.25 * wr * bkLen, bkLen);\n  DMINQ (idObjGrp + idBk);\n  return dMin;\n}\n\nfloat BdWingDf (vec3 p, float dMin)\n{\n  vec3 q, qh;\n  float wngFreq, wSegLen, wChord, wSpar, fTap, tFac, d, dd, a, wr, wf;\n  wngFreq = 6.;\n  wSegLen = 0.15 * birdLen;\n  wChord = 0.3 * birdLen;\n  wSpar = 0.03 * birdLen;\n  fTap = 8.;\n  tFac = (1. - 1. \/ fTap);\n  q = p - vec3 (0., 0., 0.3 * birdLen);\n  q.x = abs (q.x) - 0.1 * birdLen;\n  wf = 1.;\n  a = -0.1 + 0.2 * sin (wngFreq * tCur);\n  d = dMin;\n  qh = q;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSegLen;\n    wr = wf * (1. - 0.5 * q.x \/ (fTap * wSegLen));\n    dd = PrFlatCylDf (q.zyx, wr * wChord, wr * wSpar, wSegLen);\n    if (k < 4) {\n      q.x -= wSegLen;\n      dd = min (dd, PrCapsDf (q, wr * wSpar, wr * wChord));\n    } else {\n      q.x += wSegLen;\n      dd = max (dd, PrCylDf (q.xzy, wr * wChord, wSpar));\n      dd = min (dd, max (PrTorusDf (q.xzy, 0.98 * wr * wSpar, wr * wChord), - q.x));\n    }\n    if (dd < d) { d = dd;  qh = q; }\n    a *= 1.03;\n    wf *= tFac;\n  }\n  q = qh;\n  DMINQ (idObjGrp + idWing);\n  return dMin;\n}\n\nfloat BdFootDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float lgLen, ftLen, d;\n  lgLen = 0.1 * birdLen;\n  ftLen = 0.5 * lgLen;\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.1, -0.12, 0.6);\n  q.yz = Rot2D (q.yz, legAng);\n  q.xz = Rot2D (q.xz, -0.05 * pi);\n  q.z += lgLen;\n  d = PrCylDf (q, 0.15 * lgLen, lgLen);\n  DMINQ (idObjGrp + idLeg);\n  q.z += lgLen;\n  q.xy = Rot2D (q.xy, 0.5 * pi);\n  q.xy = Rot2D (q.xy, floor (3. * atan (q.y, - q.x) \/ (2. * pi) + 0.5) * (2. * pi \/ 3.));\n  q.xz = Rot2D (q.xz, - pi + 0.4 * legAng);\n  q.z -= ftLen;\n  d = PrCapsDf (q, 0.2 * ftLen, ftLen);\n  DMINQ (idObjGrp + idLeg);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin;\n  dMin = dstFar;\n  q = p;\n  q.xz = Rot2D (q.xz, shipRot);\n  q.y -= shipConf.x + 6.6 * szFac;\n  q \/= szFac;\n  dMin = dstFar \/ szFac;\n  dMin = ShipHullDf (q, dMin);\n  dMin = ShipMastDf (q, dMin);\n  dMin = ShipSailDf (q, dMin);\n  if (! isRefl) dMin = ShipRigDf (q, dMin);\n  dMin *= 0.7 * szFac;\n  dMin = max (dMin, - p.y + htWat);\n  idObjGrp = 1 * 256;\n  q = birdMat[0] * (p - birdPos[0]);\n  dMin \/= 0.9;\n  dMin = BdBodyDf (q, dMin);\n  dMin = BdWingDf (q, dMin);\n  dMin = BdFootDf (q, dMin);\n  idObjGrp = 2 * 256;\n  q = birdMat[1] * (p - birdPos[1]);\n  dMin = BdBodyDf (q, dMin);\n  dMin = BdWingDf (q, dMin);\n  dMin = BdFootDf (q, dMin);\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 ShipCol ()\n{\n  vec4 col4;\n  vec2 cg;\n  if (idObj == idHull) {\n    if (abs (qHit.x) < bDeck.x - 0.08 && qHit.y > -3.6 && qHit.z > - bDeck.z + 0.62) {\n      col4 = vec4 (0.5, 0.3, 0., 0.1) * (0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.x, 1.)));\n    } else if (qHit.y > -4.) {\n      col4 = vec4 (0.7, 0.5, 0.1, 0.1);\n      if (abs (qHit.z - 4.) < 0.25 && abs (qHit.y + 3.55) < 0.05) col4 *= 1.2;\n      else if (qHit.z < -4. && abs (qHit.x) < 0.84 && abs (qHit.y + 3.62) < 0.125) {\n        cg = step (0.1, abs (fract (vec2 (6. * qHit.x, 8. * (qHit.y + 3.62)) + 0.5) - 0.5));\n        if (cg.x * cg.y == 1.) col4 = vec4 (0.8, 0.8, 0.2, -1.);\n        else col4 *= 0.8;\n      } else {\n        col4 *= 0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (8. * qHit.y, 1.));\n      } \n    } else if (qHit.y > -4.05) {\n      col4 = vec4 (0.8, 0.8, 0.8, 0.1);\n    } else {\n      col4 = vec4 (0.3, 0.2, 0.1, 0.);\n    }\n  } else if (idObj == idRud) {\n    col4 = vec4 (0.5, 0.3, 0., 0.);\n  } else if (idObj == idStruc) {\n    col4 = vec4 (0.4, 0.3, 0.1, 0.1);\n    if (max (abs (qHit.x), abs (qHit.z + 0.22)) < 0.2) {\n      cg = step (0.1, abs (fract (vec2 (10. * vec2 (qHit.x, qHit.z + 0.22)) + 0.5) - 0.5));\n      if (cg.x * cg.y == 1.) col4 = vec4 (0.8, 0.8, 0.2, -1.);\n    }\n  } else if (idObj == idSailT) {\n    qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (4. * qHit.x, 1.)));\n    if (abs (qHit.z) < 0.2 && abs (abs (length (qHit.xy - vec2 (0., 0.3)) - 0.35) - 0.15) < 0.07)\n       col4 *= vec4 (1., 0.2, 0.2, 1.);\n  } else if (idObj == idSailA) {\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02, mod (5. * qHit.z, 1.)));\n  } else if (idObj == idSailF) {\n    col4 = vec4 (1., 1., 1., 0.) * (0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.02,\n       mod (2.95 * qHit.y + 4. * qHit.z - 0.5, 1.)));\n  } else if (idObj == idFlag) {\n    col4 = vec4 (1., 1., 0.5, 0.1);\n    if (abs (abs (length (qHit.yz) - 0.1) - 0.04) < 0.02) col4 *= vec4 (1., 0.2, 0.2, 1.);\n  } else if (idObj == idMast) {\n    col4 = vec4 (0.7, 0.4, 0., 0.1);\n    if (length (qHit.xz) < 0.16 * (1. - 0.07 * qHit.y))\n       col4 *= 0.6 + 0.4 * SmoothBump (0.03, 0.97, 0.01, mod (2. * qHit.y \/ (1. + 0.14 * step (1., abs (qHit.z))), 1.));\n    if (qHit.y > 3.65) col4 = vec4 (1., 0., 0., -1.);\n  } else if (idObj == idSparT) {\n    qHit.x *= (1. + 0.07 * qHit.y) * (1. + 0.14 * step (1., abs (qHit.z)));\n    col4 = vec4 (0.7, 0.4, 0., 0.1) *  (0.6 + 0.4 * SmoothBump (0.08, 0.92, 0.01, mod (4. * qHit.x, 1.)));\n  } else if (idObj == idSparL) {\n    col4 = vec4 (0.7, 0.4, 0., 0.1);\n    if (qHit.z > 6.65) col4 = vec4 (1., 1., 0.3, -1.);\n  } else if (idObj == idRig) {\n    col4 = vec4 (0.2, 0.15, 0.1, 0.);\n  }\n  return col4;\n}\n\nvec4 BirdCol (vec3 n)\n{\n  vec4 col4;\n  vec3 nn;\n  float gw, w;\n  int ig, id;\n  ig = idObj \/ 256;\n  id = idObj - 256 * ig;\n  if (id == idWing) {\n    gw = 0.15 * birdLen;\n    w = mod (qHit.x, gw);\n    w = SmoothBump (0.15 * gw, 0.65 * gw, 0.1 * gw, w);\n    col4 = vec4 (mix (vec3 (0.05), vec3 (1.), w), 0.1);\n  } else if (id == idEye) {\n    col4 = vec4 (0., 0.6, 0., 1.);\n  } else if (id == idBdy) {\n    if (ig == 1) nn = birdMat[0] * n;\n    else nn = birdMat[1] * n;\n    col4 = vec4 (mix (mix (vec3 (1.), vec3 (0.1), smoothstep (0.5, 1., nn.y)), vec3 (1.),\n       1. - smoothstep (-1., -0.7, nn.y)), 0.1);\n  } else if (id == idBk) {\n    col4 = vec4 (1., 1., 0., 0.1);\n  } else if (id == idLeg) {\n    col4 = vec4 ((0.5 + 0.4 * sin (100. * qHit.z)) * vec3 (0.6, 0.4, 0.), 0.1);\n  }\n  return col4;\n}\n\nvoid EvalShipConf ()\n{\n  vec3 vd;\n  shipConf = vec3 (-4. * szFac, 0., 0.);\n  shipRot = 0.25 * pi * cos (0.02 * pi * tCur);\n  vim[0] = vec3 (0., -3.5, 4.3);   vd = vec3 (0., -2.6, 6.7) - vim[0];   vum[0] = vec4 (normalize (vd), length (vd));\n  vim[1] = vec3 (0., -4., 4.1);    vd = vec3 (0., -2.9, 6.) - vim[1];    vum[1] = vec4 (normalize (vd), length (vd));\n  vim[2] = vec3 (0., -1.2, -3.);   vd = vec3 (0., -0.5, -4.5) - vim[2];  vum[2] = vec4 (normalize (vd), length (vd));\n  vim[3] = vec3 (0., -2.7, -3.);   vd = vec3 (0., -2.7, -4.5) - vim[3];  vum[3] = vec4 (normalize (vd), length (vd));\n  vir[0] = vec3 (0., -3., -4.45);  vd = vec3 (0., -2.7, -4.5) - vir[0];  vur[0] = vec4 (normalize (vd), length (vd));\n  vir[1] = vec3 (0., 2.45, 2.65);  vd = vec3 (0., -2.7, 6.5) - vir[1];   vur[1] = vec4 (normalize (vd), length (vd));\n  vir[2] = vec3 (0., 2.5, 2.65);   vd = vec3 (0., -3.2, 4.9) - vir[2];   vur[2] = vec4 (normalize (vd), length (vd));\n  vir[3] = vec3 (0., 2.6, -3.);    vd = vec3 (0., -0.5, -4.5) - vir[3];  vur[3] = vec4 (normalize (vd), length (vd));\n  vir[4] = vec3 (0.65, -3.5, 3.5); vd = vec3 (0.05, -2.7, 6.4) - vir[4]; vur[4] = vec4 (normalize (vd), length (vd));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf;\n  float dstObj, reflFac, dstWat;\n  htWat = -1.5;\n  cloudDisp = -0.05 * tCur * vec3 (1., 0., 1.);\n  szFac = 1.;\n  EvalShipConf ();\n  isRefl = false;\n  reflFac = 1.;\n  dstObj = ObjRay (ro, rd);\n  if (rd.y < 0. && dstObj >= dstFar) {\n    isRefl = true;\n    dstWat = - (ro.y - htWat) \/ rd.y;\n    ro += dstWat * rd;\n    rd = reflect (rd, WaveNf (ro.xz, dstWat));\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n    reflFac *= 0.8;\n  }\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    col4 = (idObj <= idRig) ? ShipCol () : BirdCol (vn);\n    col4.gb *= 0.7;\n    col = reflFac * (col4.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n       col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.));\n  } else {\n    col = SkyCol (ro, rd);\n    if (isRefl) col = reflFac * 0.7 * pow (col, vec3 (0.8));\n  }\n  return col;\n}\n\nvec3 BirdTrack (float t)\n{\n  vec3 bp, tt, fbR;\n  float ti[9], rdTurn, tC, tCyc, tSeq, a, h, hd, tf, rSeg;\n  rdTurn = 0.45 * min (fltBox.x, fltBox.z);\n  tC = 0.5 * pi * rdTurn \/ birdVel;\n  tt = vec3 (fltBox.x - rdTurn, length (fltBox.xy), fltBox.z - rdTurn) *\n     2. \/ birdVel;\n  tCyc = 2. * (2. * tt.z + tt.x  + 4. * tC + tt.y);\n  tSeq = mod (t, tCyc);\n  ti[0] = 0.;  ti[1] = ti[0] + tt.z;  ti[2] = ti[1] + tC;\n  ti[3] = ti[2] + tt.x;  ti[4] = ti[3] + tC;  ti[5] = ti[4] + tt.z;\n  ti[6] = ti[5] + tC;  ti[7] = ti[6] + tt.y;  ti[8] = ti[7] + tC;\n  h = - fltBox.y;\n  hd = 1.;\n  if (tSeq > 0.5 * tCyc) { tSeq -= 0.5 * tCyc;  h = - h;  hd = - hd; }\n  rSeg = -1.;\n  fbR = vec3 (1.);\n  fbR.xz -= vec2 (rdTurn) \/ fltBox.xz;\n  bp.xz = fltBox.xz;\n  bp.y = h;\n  if (tSeq < ti[4]) {\n    if (tSeq < ti[1]) {\n      tf = (tSeq - ti[0]) \/ (ti[1] - ti[0]);\n      bp.xz *= vec2 (1., fbR.z * (2. * tf - 1.));\n    } else if (tSeq < ti[2]) {\n      tf = (tSeq - ti[1]) \/ (ti[2] - ti[1]);  rSeg = 0.;\n      bp.xz *= fbR.xz;\n    } else if (tSeq < ti[3]) {\n      tf = (tSeq - ti[2]) \/ (ti[3] - ti[2]);\n      bp.xz *= vec2 (fbR.x * (1. - 2. * tf), 1.);\n    } else {\n      tf = (tSeq - ti[3]) \/ (ti[4] - ti[3]);  rSeg = 1.;\n      bp.xz *= fbR.xz * vec2 (-1., 1.);\n    }\n  } else {\n    if (tSeq < ti[5]) {\n      tf = (tSeq - ti[4]) \/ (ti[5] - ti[4]);\n      bp.xz *= vec2 (- 1., fbR.z * (1. - 2. * tf));\n    } else if (tSeq < ti[6]) {\n      tf = (tSeq - ti[5]) \/ (ti[6] - ti[5]);  rSeg = 2.;\n      bp.xz *= - fbR.xz;\n    } else if (tSeq < ti[7]) {\n      tf = (tSeq - ti[6]) \/ (ti[7] - ti[6]);\n      bp.xz *= vec2 (fbR.x * (2. * tf - 1.), - 1.);\n      bp.y = h + 2. * fltBox.y * hd * tf;\n    } else {\n      tf = (tSeq - ti[7]) \/ (ti[8] - ti[7]);  rSeg = 3.;\n      bp.xz *= fbR.xz * vec2 (1., -1.);\n      bp.y = - h;\n    }\n  }\n  if (rSeg >= 0.) {\n    a = 0.5 * pi * (rSeg + tf);\n    bp += rdTurn * vec3 (cos (a), 0., sin (a));\n  }\n  bp.y -= - fltBox.y - htWat;\n  bp.xz = vec2 (- bp.z, bp.x);\n  return bp;\n}\n\nvoid BirdPM (float t)\n{\n  vec3 bpF, bpB, vel, acc, va, ort, cr, sr;\n  float dt, vy, el;\n  dt = 1.;\n  bdPos = BirdTrack (t);\n  bpF = BirdTrack (t + dt);\n  bpB = BirdTrack (t - dt);\n  vel = (bpF - bpB) \/ (2. * dt);\n  vy = vel.y;\n  vel.y = 0.;\n  acc = (bpF - 2. * bdPos + bpB) \/ (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) \/ length (vel);\n  vel.y = vy;\n  el = - 0.7 * asin (vel.y \/ length (vel));\n  ort = vec3 (el, atan (vel.z, vel.x) - 0.5 * pi, 0.2 * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  bdMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n          mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n  legAng = pi * clamp (0.4 + 1.5 * el, 0.12, 0.8);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  vec3 ro, rd;\n  vec2 canvas, uv;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iTime;\n  birdLen = 0.5;\n  birdVel = 5.;\n  fltBox = vec3 (12., 4., 12.);\n  BirdPM (tCur);\n  birdMat[0] = bdMat;\n  birdPos[0] = bdPos;\n  BirdPM (tCur + 10.);\n  birdMat[1] = bdMat;\n  birdPos[1] = bdPos;\n  ro = vec3 (0., 3., -30.);\n  rd = normalize (vec3 (uv, 2.5));\n  sunDir = normalize (vec3 (0., 0.05, 1.));\n  dstFar = 100.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrEVCapsDf (vec3 p, vec4 u, float r)\n{\n  return length (p - clamp (dot (p, u.xyz), 0., u.w) * u.xyz) - r;\n}\n\nfloat PrEECapsDf (vec3 p, vec3 v1, vec3 v2, float r)\n{\n  return PrEVCapsDf (p - v1, vec4 (normalize (v2 - v1), length (v2 - v1)), r);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi * clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. \/ 1.9375);\n}\n",
            "name": "Image",
            "description": "",
            "type": "image"
        }
    ]
}