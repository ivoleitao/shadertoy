{
    "ver": "0.1",
    "info": {
        "id": "MdBfRK",
        "date": "1501498448",
        "viewed": 4043,
        "name": "[SH17C] Let's Make A Ray Marcher",
        "username": "TekF",
        "description": "A guide to writing a ray marcher. Aimed at people who have done a little programming, and want to learn how to draw 3D scenes in Shadertoy. You interact with the tutorial by writing code in ShaderToy's editor.",
        "likes": 95,
        "published": 3,
        "flags": 32,
        "usePreview": 0,
        "tags": [
            "raymarching",
            "tutorial",
            "text"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [
                {
                    "id": "4dXGR8",
                    "filepath": "\/media\/previz\/buffer00.png",
                    "previewfilepath": "\/media\/previz\/buffer00.png",
                    "type": "buffer",
                    "channel": 3,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                }
            ],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "void _mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\/\/-------- Don't edit the next line! It will break the tutorial. --------\nvoid mainImage(out vec4 o,vec2 u){vec4 s=texelFetch(iChannel3,ivec2(0),0);_mainImage(o,u*s.zw-s.xy);vec4 t=texelFetch(iChannel3,ivec2(u),0);o=mix(o,t,t.a);}\n",
            "name": "Image",
            "description": "",
            "type": "image"
        },
        {
            "inputs": [
                {
                    "id": "4dXGzr",
                    "filepath": "\/media\/a\/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png",
                    "previewfilepath": "\/media\/ap\/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png",
                    "type": "texture",
                    "channel": 1,
                    "sampler": {
                        "filter": "mipmap",
                        "wrap": "repeat",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                },
                {
                    "id": "4dXGR8",
                    "filepath": "\/media\/previz\/buffer00.png",
                    "previewfilepath": "\/media\/previz\/buffer00.png",
                    "type": "buffer",
                    "channel": 0,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                }
            ],
            "outputs": [
                {
                    "id": "4dXGR8",
                    "channel": 0
                }
            ],
            "code": "\/*\n\nYour final shader should look like this:\n\n\/\/1) Signed Distance Field\n\/\/========================\nfloat Sphere( vec3 centre, float radius, vec3 pos )\n{\n    return length(centre-pos)-radius;\n}\n\nfloat Scene( vec3 pos )\n{\n    float f = Sphere(vec3(-1,-1,0),1.,pos);\n    f = min(f,Sphere(vec3(1,-1,0),1.,pos));\n    f = min(f,Sphere(vec3(0,1,0),1.,pos));\n    return f;\n}\n\n\/\/2) Ray Marching\n\/\/===============\nvoid Rotate( inout vec3 vector, vec2 angle )\n{\n\tvector.yz = cos(angle.y)*vector.yz\n\t\t\t\t+sin(angle.y)*vec2(-1,1)*vector.zy;\n\tvector.xz = cos(angle.x)*vector.xz\n\t\t\t\t+sin(angle.x)*vec2(-1,1)*vector.zx;\n}\n\nvoid _mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ray = normalize( vec3(\n\t\t\t\t(fragCoord-iResolution.xy*.5)\/iResolution.x, \/\/ pixel pos on screen\n\t\t\t\t1 ) ); \/\/ place screen 1 unit in front of eye\n    vec3 pos = vec3(0,0,-8); \/\/ move eye 8 units back from scene\n\tvec2 angle = vec2(iTime,.3);\n\t\/\/if ( iMouse.z >= .0 ) angle = (iMouse.xy\/iResolution.xy-.5)*3.14;\n\tRotate(pos,angle);\n\tRotate(ray,angle);\n\n    fragColor = vec4(1);\n    for ( int i=0; i < 100; i++ )\n    {\n        float h = Scene(pos);\n        if ( h < .01 )\n        {\n            fragColor = vec4(0);\n            break;\n        }\n        pos += ray*h;\n    }\n\n\/\/3) Lighting\n\/\/===========\n    if ( Scene(pos) < .01 )\n    {\n        vec3 normal;\n        normal.x = Scene(pos+vec3(.01,0,0)) - Scene(pos-vec3(.01,0,0));\n        normal.y = Scene(pos+vec3(0,.01,0)) - Scene(pos-vec3(0,.01,0));\n        normal.z = Scene(pos+vec3(0,0,.01)) - Scene(pos-vec3(0,0,.01));\n        normal = normalize(normal);\n\n        vec3 lightSource = vec3(4,4,-4);\n\t\tfloat light = max(.0,dot(normal,normalize(lightSource-pos)));\n\n        vec3 ambient = vec3(.05,.1,.15);\n        vec3 lightCol = vec3(1.,.9,.8);\n        fragColor.rgb = light*lightCol + ambient;\n    }\n    \n    fragColor.rgb = pow( fragColor.rgb, vec3(1.0\/2.2) );\n}\n\n*\/\n\n\n\/*\n\nSome extensions to try:\n\n\/\/ A more interesting SDF:\nfloat Superellipsoid( vec3 centre, float radius, float power, vec3 pos )\n{\n    pos = abs(pos-centre)\/radius; \/\/ scale and sign-flip pos into a [0,1] range\n    pos = pow(pos,vec3(power)); \/\/ apply power before summing components\n    float d = dot(pos,vec3(1)); \/\/ add the components together\n\td = pow(d,1.\/power); \/\/ apply inverse power so SDF is well behaved\n    float fix = min(1.,.5+.5*(power-1.)); \/\/ corrective factor for lower powers, ensure gradient of SDF doesn't exceed 1.\n    return fix*(d-1.)*radius; \/\/ undo the scaling, to hit the desired radius\n}\n\nfloat Scene( vec3 pos )\n{\n    float f = Sphere(vec3(0,1,-1),1.,pos);\n    \n    \/\/ ripply sphere (*.8 to keep SDF gradient <= 1.0)\n    f = min(f,Sphere(vec3(1,-1,-1),1.,pos)*.8 + sin(pos.y*20.+iTime*3.)*.03);\n\n    f = min(f,Superellipsoid(vec3(0,0,1),.7,1.\/(.5+.48*sin(iTime*1.3)),pos));\n    \n    \/\/ cut a circular chunk out of the scene\n    f = max(f,-Sphere(vec3(0,0,-.5),1.,pos));\n    \n    \/\/ this sphere is combined after the cut-out sphere, so it doesn't get cut\n    f = min(f,Sphere(vec3(-1,-1,-1),.8,pos));\n\n\t\/\/ floor\n    f = min(f,Sphere(vec3(0,-20,0),18.,pos));\n    \n    return f;\n}\n\n\n\/\/ shadows:\nfloat ShadowMarch( vec3 pos, vec3 light )\n{\n    vec3 ray = normalize(light-pos);\n    float e = length(light-pos);\n    float t = .02; \/\/ step away from the surface\n    for ( int i=0; i < 200; i++ )\n    {\n        float h = Scene(pos+ray*t);\n        if ( h < .001 )\n        {\n            return 0.; \/\/ hit something\n        }\n        if ( t >= e )\n        {\n            break;\n        }\n        t += h;\n    }\n    return 1.; \/\/ didn't hit anything\n}\n\n\/\/ and add this to the light calculation:\n        light *= ShadowMarch( pos, lightSource );\n\n\nFor further extensions, see this shader: https:\/\/www.shadertoy.com\/view\/4dSfzt\nIt includes reflection mapping and different materials per shape.\n\n\n*\/\n\n\nuint text[] = uint[]( 0x2774654cU, 0x614d2073U, 0x4120656bU, 0x79615220U, 0x72614d20U, 0x72656863U, 0x20202021U, \n0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x2020203dU, \n\n0x73696854U, 0x74757420U, 0x6169726fU, 0x6977206cU, 0x73206c6cU, 0x20776f68U, 0x20756f79U, 0x20776f68U, 0x67206f74U, 0x7266206fU, 0x53206d6fU, 0x65646168U, 0x796f7472U, 0x20207327U, \n0x61666564U, 0x20746c75U, 0x77656e22U, 0x68732022U, 0x72656461U, 0x6f74202cU, 0x73206120U, 0x65646168U, 0x68742072U, 0x63207461U, 0x72206e61U, 0x65646e65U, 0x20612072U, 0x20204433U, \n0x6e656373U, 0x69772065U, 0x6c206874U, 0x74686769U, 0x2e676e69U, \n\n0x6976614eU, 0x65746167U, 0x65687420U, 0x74757420U, 0x6169726fU, 0x7962206cU, 0x696c6320U, 0x6e696b63U, 0x68742067U, 0x20112065U, 0x20646e61U, 0x75622013U, 0x6e6f7474U, 0x20202e73U, \n0x61707845U, 0x7420646eU, 0x76206568U, 0x20776569U, 0x7920666fU, 0x2072756fU, 0x64616873U, 0x62207265U, 0x72702079U, 0x69737365U, 0xab20676eU, 0x2020202eU, \n\n0x74696445U, 0x65687420U, 0x646f6320U, 0x6e692065U, 0x61685320U, 0x74726564U, 0x7327796fU, 0x756f7320U, 0x20656372U, 0x656e6170U, 0x6854202eU, 0x6d492065U, 0x20656761U, 0x20626174U, 0x746e6f63U, 0x736e6961U, 0x756f7920U, 0x68732072U, 0x72656461U, 0x6e61202cU, 0x20202064U, \n0x20656874U, 0x20667542U, 0x61742041U, 0x6f632062U, 0x6961746eU, 0x6320736eU, 0x2065646fU, 0x64206f74U, 0x6c707369U, 0x74207961U, 0x20736968U, 0x6f747574U, 0x6c616972U, 0x6e61202cU, 0x20612064U, 0x74736574U, 0x65206465U, 0x706d6178U, 0x6f20656cU, 0x68742066U, 0x20202065U, \n0x616e6966U, 0x6873206cU, 0x72656461U, 0x206e6920U, 0x6f632061U, 0x6e656d6dU, 0x74612074U, 0x65687420U, 0x61747320U, 0x202c7472U, 0x63696877U, 0x6f792068U, 0x61632075U, 0x6572206eU, 0x20726566U, 0x69206f74U, 0x6f792066U, 0x65672075U, 0x74732074U, 0x2e6b6375U, \n\n0x65646f43U, 0x67657320U, 0x746e656dU, 0x69682073U, 0x696c6867U, 0x65746867U, 0x6e692064U, 0x65726720U, 0x61206e65U, 0x6e206572U, 0x6c207765U, 0x73656e69U, 0x20666f20U, 0x65646f63U, 0x726f6620U, 0x756f7920U, 0x206f7420U, 0x2e646461U, \n0x6c6c6559U, 0x6c20776fU, 0x73656e69U, 0x65726120U, 0x6e696c20U, 0x74207365U, 0x20746168U, 0x65766168U, 0x61686320U, 0x6465676eU, 0x2020202eU, \n\n0x72206f54U, 0x79206e75U, 0x2072756fU, 0x65646f63U, 0x7270202cU, 0x20737365U, 0x2b746c41U, 0x746e453cU, 0x2c3e7265U, 0x20726f20U, 0x63696c63U, 0x2005206bU, 0x74207461U, 0x62206568U, 0x6f74746fU, 0x666f206dU, 0x65687420U, 0x756f7320U, 0x20656372U, 0x656e6170U, 0x2020202eU, \n0x53202931U, 0x656e6769U, 0x69442064U, 0x6e617473U, 0x46206563U, 0x646c6569U, \n0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, \n0x20202020U, \n0x73726946U, 0x6c202c74U, 0x73277465U, 0x65726320U, 0x20657461U, 0x75662061U, 0x6974636eU, 0x74206e6fU, 0x6574206fU, 0x75206c6cU, 0x6f682073U, 0x6c632077U, 0x2065736fU, 0x20206577U, \n0x20657261U, 0x74206f74U, 0x73206568U, 0x61667275U, 0x6f206563U, 0x20612066U, 0x65687073U, 0x61206572U, 0x6e612074U, 0x6f702079U, 0x20746e69U, 0x33206e69U, 0x70732044U, 0x2e656361U, \n\n0x63206557U, 0x6a206e61U, 0x20747375U, 0x7361656dU, 0x20657275U, 0x20656874U, 0x74736964U, 0x65636e61U, 0x6f726620U, 0x6874206dU, 0x70732065U, 0x65726568U, 0x20207327U, \n0x746e6563U, 0x74206572U, 0x6874206fU, 0x6f702065U, 0x20746e69U, 0x77206577U, 0x20746e61U, 0x74206f74U, 0x2c747365U, 0x646e6120U, 0x62757320U, 0x63617274U, 0x68742074U, 0x20202065U, \n0x69646172U, 0x202e7375U, 0x20646441U, 0x73696874U, 0x646f6320U, 0x74612065U, 0x65687420U, 0x706f7420U, 0x20666f20U, 0x72756f79U, 0x756f7320U, 0x20656372U, 0x656c6966U, 0x2020203aU, \n0x616f6c66U, 0x70532074U, 0x65726568U, 0x65762028U, 0x63203363U, 0x72746e65U, 0x66202c65U, 0x74616f6cU, 0x64617220U, 0x2c737569U, 0x63657620U, 0x6f702033U, 0x20746e69U, 0x20202029U, \n0x2020207bU, \n0x75746572U, 0x6c206e72U, 0x74676e65U, 0x65632868U, 0x6572746eU, 0x696f702dU, 0x2d29746eU, 0x69646172U, 0x203b7375U, \n0x2020207dU, \n\n0x20646e41U, 0x6c276577U, 0x6574206cU, 0x69207473U, 0x79622074U, 0x70657220U, 0x6963616cU, 0x7420676eU, 0x63206568U, 0x2065646fU, 0x74616874U, 0x6f686320U, 0x7365736fU, 0x65687420U, 0x61726620U, 0x6c6f4367U, 0x6920726fU, 0x6d5f206eU, 0x496e6961U, 0x6567616dU, 0x2020203aU, \n0x67617266U, 0x6f6c6f43U, 0x203d2072U, 0x34636576U, 0x70532028U, 0x65726568U, 0x63657628U, 0x29302833U, 0x2e30202cU, 0x76202c35U, 0x28336365U, 0x2c767520U, 0x29203020U, 0x3b292029U, \n\n0x72276557U, 0x73752065U, 0x20676e69U, 0x20656874U, 0x74207675U, 0x6970206fU, 0x61206b63U, 0x696f7020U, 0x7420746eU, 0x6574206fU, 0x6f207473U, 0x6874206eU, 0x6c702065U, 0x20656e61U, 0x7a207461U, 0x202c303dU, 0x20646e61U, 0x70732061U, 0x65726568U, 0x20666f20U, \n0x69646172U, 0x30207375U, 0x6120352eU, 0x6f702074U, 0x69746973U, 0x76206e6fU, 0x28336365U, 0x2d202930U, 0x69687720U, 0x69206863U, 0x20612073U, 0x726f6873U, 0x6e616874U, 0x6f662064U, 0x65762072U, 0x30283363U, 0x302c302cU, 0x20202029U, \n0x65687053U, 0x29286572U, 0x74756f20U, 0x73747570U, 0x22206120U, 0x6e676973U, 0x64206465U, 0x61747369U, 0x2065636eU, 0x6c656966U, 0x28202264U, 0x29464453U, 0x6977202cU, 0x20206874U, \n0x6167656eU, 0x65766974U, 0x6c617620U, 0x20736575U, 0x20726f66U, 0x6e696f70U, 0x69207374U, 0x6469736eU, 0x68742065U, 0x70732065U, 0x65726568U, 0x6e61202cU, 0x20202064U, \n0x69736f70U, 0x65766974U, 0x726f6620U, 0x74756f20U, 0x65646973U, 0x696f7020U, 0x2e73746eU, \n\n0x2774654cU, 0x61702073U, 0x20746e69U, 0x69736e69U, 0x70206564U, 0x746e696fU, 0x6c622073U, 0x2c6b6361U, 0x646e6120U, 0x74756f20U, 0x65646973U, 0x656e6f20U, 0x68772073U, 0x3a657469U, \n0x616f6c66U, 0x64732074U, 0x203d2066U, 0x65687053U, 0x76286572U, 0x28336365U, 0x202c2930U, 0x2c352e30U, 0x63657620U, 0x75202833U, 0x30202c76U, 0x3b292920U, \n0x67617266U, 0x6f6c6f43U, 0x203d2072U, 0x34636576U, 0x74732028U, 0x20287065U, 0x202c302eU, 0x20666473U, 0x3b292029U, \n\n0x2774654cU, 0x65632073U, 0x6572746eU, 0x65687420U, 0x69726f20U, 0x206e6967U, 0x74207461U, 0x63206568U, 0x72746e65U, 0x666f2065U, 0x65687420U, 0x72637320U, 0x2e6e6565U, 0x61684320U, 0x2065676eU, 0x20656874U, 0x63207675U, 0x75636c61U, 0x6974616cU, 0x74206e6fU, 0x20203a6fU, \n0x32636576U, 0x20767520U, 0x2e38203dU, 0x7266282aU, 0x6f436761U, 0x2d64726fU, 0x73655269U, 0x74756c6fU, 0x2e6e6f69U, 0x2e2a7978U, 0x692f2935U, 0x6f736552U, 0x6974756cU, 0x782e6e6fU, 0x2020203bU, \n\n0x20776f4eU, 0x6c276577U, 0x7263206cU, 0x65746165U, 0x73206120U, 0x656e6563U, 0x74697720U, 0x20332068U, 0x65687073U, 0x3a736572U, \n0x616f6c66U, 0x63532074U, 0x28656e65U, 0x63657620U, 0x6f702033U, 0x20292073U, \n0x2020207bU, \n0x616f6c66U, 0x20662074U, 0x7053203dU, 0x65726568U, 0x63657628U, 0x312d2833U, 0x2c312d2cU, 0x312c2930U, 0x6f702c2eU, 0x203b2973U, \n0x203d2066U, 0x286e696dU, 0x70532c66U, 0x65726568U, 0x63657628U, 0x2c312833U, 0x302c312dU, 0x2e312c29U, 0x736f702cU, 0x203b2929U, \n0x203d2066U, 0x286e696dU, 0x70532c66U, 0x65726568U, 0x63657628U, 0x2c302833U, 0x29302c31U, 0x2c2e312cU, 0x29736f70U, 0x20203b29U, \n0x75746572U, 0x66206e72U, 0x2020203bU, \n0x2020207dU, \n\n0x20646e41U, 0x6c276577U, 0x6163206cU, 0x53206c6cU, 0x656e6563U, 0x736e6920U, 0x64616574U, 0x20666f20U, 0x65687053U, 0x69206572U, 0x6d5f206eU, 0x496e6961U, 0x6567616dU, 0x2020203aU, \n0x616f6c66U, 0x64732074U, 0x203d2066U, 0x6e656353U, 0x65762865U, 0x20283363U, 0x202c7675U, 0x29292030U, 0x2020203bU, \n\n0x20776f4eU, 0x20756f79U, 0x756f6873U, 0x7320646cU, 0x33206565U, 0x72696320U, 0x73656c63U, 0x2020202eU, \n0x52202932U, 0x4d207961U, 0x68637261U, 0x20676e69U, 0x6f6e202dU, 0x68742077U, 0x73676e69U, 0x74656720U, 0x72657320U, 0x73756f69U, 0x20202021U, \n0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x3d3d3d3dU, 0x2020203dU, \n\n\n\n\n\n\n\n\n\n0x67616d49U, 0x20656e69U, 0x74616874U, 0x65687420U, 0x72637320U, 0x206e6565U, 0x61207369U, 0x6e697720U, 0x20776f64U, 0x6f746e69U, 0x33206120U, 0x6f772044U, 0x2e646c72U, 0x20655720U, 0x746e6177U, 0x206f7420U, 0x6b726f77U, 0x74756f20U, 0x69687720U, 0x20206863U, \n0x65786970U, 0x7220736cU, 0x65727065U, 0x746e6573U, 0x69687720U, 0x6f206863U, 0x63656a62U, 0x53202e74U, 0x6577206fU, 0x206c6c27U, 0x65726966U, 0x72206120U, 0x66207961U, 0x206d6f72U, 0x72756f79U, 0x65796520U, 0x72687420U, 0x6867756fU, 0x63616520U, 0x69702068U, 0x2c6c6578U, \n0x20646e61U, 0x6b726f77U, 0x74756f20U, 0x20666920U, 0x74616874U, 0x79617220U, 0x6d756220U, 0x69207370U, 0x206f746eU, 0x74796e61U, 0x676e6968U, 0x2020203aU, \n0x64696f76U, 0x616d5f20U, 0x6d496e69U, 0x28656761U, 0x74756f20U, 0x63657620U, 0x72662034U, 0x6f436761U, 0x2c726f6cU, 0x206e6920U, 0x32636576U, 0x61726620U, 0x6f6f4367U, 0x29206472U, \n0x2020207bU, \n0x33636576U, 0x79617220U, 0x6e203d20U, 0x616d726fU, 0x657a696cU, 0x65762028U, 0x20283363U, \n0x61726628U, 0x6f6f4367U, 0x692d6472U, 0x6f736552U, 0x6974756cU, 0x782e6e6fU, 0x352e2a79U, 0x52692f29U, 0x6c6f7365U, 0x6f697475U, 0x2c782e6eU, 0x202f2f20U, 0x65786970U, 0x6f70206cU, 0x6e6f2073U, 0x72637320U, 0x206e6565U, \n0x29202e31U, 0x203b2920U, 0x70202f2fU, 0x6563616cU, 0x65687420U, 0x72637320U, 0x206e6565U, 0x6e752031U, 0x69207469U, 0x7266206eU, 0x20746e6fU, 0x6520666fU, 0x20206579U, \n0x33636576U, 0x736f7020U, 0x76203d20U, 0x28336365U, 0x2c302c30U, 0x3b29382dU, 0x202f2f20U, 0x65766f6dU, 0x65796520U, 0x75203820U, 0x7374696eU, 0x63616220U, 0x7266206bU, 0x73206d6fU, 0x656e6563U, \n0x67617266U, 0x6f6c6f43U, 0x203d2072U, 0x34636576U, 0x65747328U, 0x302e2870U, 0x6353202cU, 0x28656e65U, 0x2a796172U, 0x702b2e38U, 0x2029736fU, 0x203b2929U, \n0x2020207dU, \n\n0x20776f4eU, 0x27756f79U, 0x73206572U, 0x6e696565U, 0x20612067U, 0x63696c73U, 0x68742065U, 0x67756f72U, 0x68742068U, 0x63732065U, 0x20656e65U, 0x61207461U, 0x78696620U, 0x64206465U, 0x61747369U, 0x2065636eU, 0x6e6f6c61U, 0x68742067U, 0x61722065U, 0x20202e79U, \n0x20776f4eU, 0x74616874U, 0x27657720U, 0x77206572U, 0x696b726fU, 0x6920676eU, 0x4433206eU, 0x656c202cU, 0x20732774U, 0x20646461U, 0x656d6f73U, 0x6d616320U, 0x20617265U, \n0x61746f72U, 0x6e6f6974U, 0x6f74202cU, 0x6c656820U, 0x73752070U, 0x646e7520U, 0x74737265U, 0x20646e61U, 0x74616877U, 0x27657720U, 0x6c206572U, 0x696b6f6fU, 0x6120676eU, 0x20203a74U, \n0x64696f76U, 0x746f5220U, 0x28657461U, 0x6f6e6920U, 0x76207475U, 0x20336365U, 0x74636576U, 0x202c726fU, 0x32636576U, 0x676e6120U, 0x2920656cU, \n0x2020207bU, \n0x74636576U, 0x792e726fU, 0x203d207aU, 0x28736f63U, 0x6c676e61U, 0x29792e65U, 0x6365762aU, 0x2e726f74U, 0x20207a79U, \n0x6e69732bU, 0x676e6128U, 0x792e656cU, 0x65762a29U, 0x2d283263U, 0x29312c31U, 0x6365762aU, 0x2e726f74U, 0x203b797aU, \n0x74636576U, 0x782e726fU, 0x203d207aU, 0x28736f63U, 0x6c676e61U, 0x29782e65U, 0x6365762aU, 0x2e726f74U, 0x20207a78U, \n0x6e69732bU, 0x676e6128U, 0x782e656cU, 0x65762a29U, 0x2d283263U, 0x29312c31U, 0x6365762aU, 0x2e726f74U, 0x203b787aU, \n0x2020207dU, \n\n0x6c276557U, 0x7061206cU, 0x20796c70U, 0x73696874U, 0x746f7220U, 0x6f697461U, 0x6f74206eU, 0x746f6220U, 0x6f702068U, 0x6e612073U, 0x61722064U, 0x6f732079U, 0x65687420U, 0x65697620U, 0x6f722077U, 0x65746174U, 0x72612073U, 0x646e756fU, 0x65687420U, 0x69726f20U, 0x2e6e6967U, \n0x20646441U, 0x73696874U, 0x74666120U, 0x77207265U, 0x65642065U, 0x72616c63U, 0x61722065U, 0x6e612079U, 0x6f702064U, 0x74202c73U, 0x6f72206fU, 0x65746174U, 0x65687420U, 0x6562206dU, 0x65726f66U, 0x20657720U, 0x6c6c6163U, 0x65635320U, 0x2928656eU, 0x2020203aU, \n0x32636576U, 0x676e6120U, 0x3d20656cU, 0x63657620U, 0x54692832U, 0x2c656d69U, 0x3b29332eU, \n0x61746f52U, 0x70286574U, 0x612c736fU, 0x656c676eU, 0x20203b29U, \n0x61746f52U, 0x72286574U, 0x612c7961U, 0x656c676eU, 0x20203b29U, \n\n0x20656854U, 0x63726963U, 0x2073656cU, 0x20657261U, 0x20776f6eU, 0x74746567U, 0x20676e69U, 0x67676962U, 0x61207265U, 0x7320646eU, 0x6c6c616dU, 0x2d207265U, 0x61687420U, 0x20732774U, 0x61636562U, 0x20657375U, 0x72276577U, 0x6f722065U, 0x69746174U, 0x7420676eU, 0x20206568U, \n0x63696c73U, 0x68742065U, 0x67756f72U, 0x68742068U, 0x63732065U, 0x2c656e65U, 0x73757020U, 0x676e6968U, 0x20746920U, 0x61206e69U, 0x6f20646eU, 0x6f207475U, 0x6f732066U, 0x6f20656dU, 0x68742066U, 0x70732065U, 0x65726568U, 0x20202e73U, \n\n0x79206649U, 0x7720756fU, 0x20746e61U, 0x63206f74U, 0x72746e6fU, 0x74206c6fU, 0x72206568U, 0x7461746fU, 0x206e6f69U, 0x68746977U, 0x65687420U, 0x756f6d20U, 0x202c6573U, 0x20756f79U, 0x206e6163U, 0x20646461U, 0x73696874U, 0x6e696c20U, 0x20203a65U, \n0x28206669U, 0x6f4d6920U, 0x2e657375U, 0x3d3e207aU, 0x20302e20U, 0x6e612029U, 0x20656c67U, 0x6928203dU, 0x73756f4dU, 0x79782e65U, 0x6552692fU, 0x756c6f73U, 0x6e6f6974U, 0x2d79782eU, 0x2a29352eU, 0x34312e33U, 0x2020203bU, \n\n\n\n\n\n\n\n\n\n0x20656854U, 0x20464453U, 0x6c6c6574U, 0x73752073U, 0x776f6820U, 0x72616620U, 0x20657720U, 0x20657261U, 0x6d6f7266U, 0x65687420U, 0x6f6c6320U, 0x74736573U, 0x72757320U, 0x65636166U, 0x20746120U, 0x20796e61U, 0x6e696f70U, 0x6e692074U, 0x61707320U, 0x202e6563U, 0x20206f53U, \n0x63206577U, 0x73206e61U, 0x6c656661U, 0x6f6d2079U, 0x74206576U, 0x20746168U, 0x20726166U, 0x74206e69U, 0x64206568U, 0x63657269U, 0x6e6f6974U, 0x20666f20U, 0x20656874U, 0x20796172U, 0x68746977U, 0x2074756fU, 0x74746968U, 0x20676e69U, 0x74796e61U, 0x676e6968U, 0x2020202eU, \n0x77206649U, 0x65722065U, 0x74616570U, 0x69687420U, 0x72702073U, 0x7365636fU, 0x6e652073U, 0x6867756fU, 0x6d697420U, 0x202c7365U, 0x20656874U, 0x20796172U, 0x6c6c6977U, 0x646e6520U, 0x20707520U, 0x6f6d6c61U, 0x65207473U, 0x74636178U, 0x7420796cU, 0x6863756fU, 0x20676e69U, \n0x20656874U, 0x66727573U, 0x20656361U, 0x7420666fU, 0x6f206568U, 0x63656a62U, 0x202c7374U, 0x6c206f73U, 0x73277465U, 0x64646120U, 0x6c206120U, 0x20706f6fU, 0x74207461U, 0x65206568U, 0x6f20646eU, 0x6d5f2066U, 0x496e6961U, 0x6567616dU, 0x2020203aU, \n0x67617266U, 0x6f6c6f43U, 0x203d2072U, 0x34636576U, 0x3b293128U, \n0x20726f66U, 0x6e692028U, 0x3d692074U, 0x69203b30U, 0x31203c20U, 0x203b3030U, 0x202b2b69U, 0x20202029U, \n0x2020207bU, \n0x616f6c66U, 0x20682074U, 0x6353203dU, 0x28656e65U, 0x29736f70U, 0x2f2f203bU, 0x61657220U, 0x68742064U, 0x44532065U, 0x202d2046U, 0x20656874U, 0x74736964U, 0x65636e61U, 0x206f7420U, 0x20656874U, 0x736f6c63U, 0x20747365U, 0x66727573U, 0x20656361U, \n0x28206669U, 0x3c206820U, 0x31302e20U, 0x2f202920U, 0x6669202fU, 0x27657720U, 0x6e206572U, 0x6c726165U, 0x6f742079U, 0x69686375U, 0x6120676eU, 0x72757320U, 0x65636166U, 0x6170202cU, 0x20746e69U, 0x20656874U, 0x65786970U, 0x6c62206cU, 0x206b6361U, \n0x2020207bU, \n0x67617266U, 0x6f6c6f43U, 0x203d2072U, 0x34636576U, 0x3b293028U, \n0x61657262U, 0x20203b6bU, \n0x2020207dU, \n0x20736f70U, 0x72203d2bU, 0x682a7961U, 0x2f2f203bU, 0x65747320U, 0x6c612070U, 0x20676e6fU, 0x20656874U, 0x20796172U, 0x74207962U, 0x64206568U, 0x61747369U, 0x2065636eU, 0x74206f74U, 0x63206568U, 0x65736f6cU, 0x73207473U, 0x61667275U, 0x20206563U, \n0x2020207dU, \n0x694c2033U, 0x69746867U, 0x2020676eU, \n0x3d3d3d3dU, 0x3d3d3d3dU, 0x20203d3dU, \n0x20776f4eU, 0x76276577U, 0x69682065U, 0x68742074U, 0x75732065U, 0x63616672U, 0x666f2065U, 0x206e6120U, 0x656a626fU, 0x202c7463U, 0x2774656cU, 0x6f772073U, 0x6f206b72U, 0x20207475U, \n0x74616877U, 0x676e6120U, 0x7420656cU, 0x20746168U, 0x66727573U, 0x20656361U, 0x61207369U, 0x54202e74U, 0x67206568U, 0x69646172U, 0x20746e65U, 0x7420666fU, 0x53206568U, 0x20204644U, \n0x70207369U, 0x65707265U, 0x6369646eU, 0x72616c75U, 0x206f7420U, 0x20656874U, 0x66727573U, 0x2c656361U, 0x646e6120U, 0x20657720U, 0x206e6163U, 0x646e6966U, 0x65687420U, \n0x64617267U, 0x746e6569U, 0x20796220U, 0x706d6173U, 0x676e696cU, 0x65687420U, 0x46445320U, 0x6f6c6120U, 0x6520676eU, 0x20686361U, 0x73697861U, 0x2020202eU, \n\n0x20646441U, 0x73696874U, 0x646f6320U, 0x66612065U, 0x20726574U, 0x20656874U, 0x2d796172U, 0x6372616dU, 0x6f6c2068U, 0x203a706fU, \n0x28206669U, 0x65635320U, 0x7028656eU, 0x2029736fU, 0x302e203cU, 0x20292031U, 0x64202f2fU, 0x74206469U, 0x72206568U, 0x68207961U, 0x61207469U, 0x6874796eU, 0x3f676e69U, \n0x2020207bU, \n0x33636576U, 0x726f6e20U, 0x3b6c616dU, \n0x6d726f6eU, 0x782e6c61U, 0x53203d20U, 0x656e6563U, 0x736f7028U, 0x6365762bU, 0x302e2833U, 0x2c302c31U, 0x20292930U, 0x6353202dU, 0x28656e65U, 0x2d736f70U, 0x33636576U, 0x31302e28U, 0x302c302cU, 0x203b2929U, \n0x6d726f6eU, 0x792e6c61U, 0x53203d20U, 0x656e6563U, 0x736f7028U, 0x6365762bU, 0x2c302833U, 0x2c31302eU, 0x20292930U, 0x6353202dU, 0x28656e65U, 0x2d736f70U, 0x33636576U, 0x2e2c3028U, 0x302c3130U, 0x203b2929U, \n0x6d726f6eU, 0x7a2e6c61U, 0x53203d20U, 0x656e6563U, 0x736f7028U, 0x6365762bU, 0x2c302833U, 0x302e2c30U, 0x20292931U, 0x6353202dU, 0x28656e65U, 0x2d736f70U, 0x33636576U, 0x302c3028U, 0x31302e2cU, 0x203b2929U, \n0x6d726f6eU, 0x3d206c61U, 0x726f6e20U, 0x696c616dU, 0x6e28657aU, 0x616d726fU, 0x203b296cU, \n0x67617266U, 0x6f6c6f43U, 0x67722e72U, 0x203d2062U, 0x2e2b352eU, 0x6f6e2a35U, 0x6c616d72U, 0x2f2f203bU, 0x73657420U, 0x68742074U, 0x61762065U, 0x2065756cU, \n0x2020207dU, \n\n0x2774654cU, 0x70612073U, 0x20796c70U, 0x696c2061U, 0x69746867U, 0x6320676eU, 0x75636c61U, 0x6974616cU, 0x74206e6fU, 0x6874206fU, 0x203a7461U, \n0x33636576U, 0x67696c20U, 0x6f537468U, 0x65637275U, 0x76203d20U, 0x28336365U, 0x2c342c34U, 0x3b29342dU, 0x202f2f20U, 0x69736f70U, 0x6e6f6974U, 0x20666f20U, 0x20656874U, 0x6867696cU, 0x20202074U, \n0x616f6c66U, 0x696c2074U, 0x20746867U, 0x616d203dU, 0x302e2878U, 0x746f642cU, 0x726f6e28U, 0x2c6c616dU, 0x6d726f6eU, 0x7a696c61U, 0x696c2865U, 0x53746867U, 0x6372756fU, 0x6f702d65U, 0x29292973U, 0x2020203bU, \n0x67617266U, 0x6f6c6f43U, 0x67722e72U, 0x203d2062U, 0x33636576U, 0x67696c28U, 0x3b297468U, \n0x6c276557U, 0x6974206cU, 0x6120746eU, 0x6569626dU, 0x6c20746eU, 0x74686769U, 0x696c7320U, 0x6c746867U, 0x6c622079U, 0x202c6575U, 0x20646e61U, 0x65726964U, 0x6c207463U, 0x74686769U, \n0x67696c73U, 0x796c7468U, 0x61726f20U, 0x2c65676eU, 0x206f7420U, 0x65766967U, 0x6d206120U, 0x2065726fU, 0x7574616eU, 0x206c6172U, 0x6c656566U, 0x2020202eU, \n0x33636576U, 0x626d6120U, 0x746e6569U, 0x76203d20U, 0x28336365U, 0x2c35302eU, 0x2e2c312eU, 0x3b293531U, \n0x33636576U, 0x67696c20U, 0x6f437468U, 0x203d206cU, 0x33636576U, 0x2c2e3128U, 0x2e2c392eU, 0x203b2938U, \n0x67617266U, 0x6f6c6f43U, 0x67722e72U, 0x203d2062U, 0x6867696cU, 0x696c2a74U, 0x43746867U, 0x2b206c6fU, 0x626d6120U, 0x746e6569U, 0x2020203bU, \n\n0x20776f4eU, 0x74616874U, 0x27657720U, 0x63206572U, 0x75706d6fU, 0x676e6974U, 0x67696c20U, 0x76207468U, 0x65756c61U, 0x77202c73U, 0x68732065U, 0x646c756fU, \n0x756a6461U, 0x6f207473U, 0x63207275U, 0x756f6c6fU, 0x66207372U, 0x7920726fU, 0x2072756fU, 0x65726373U, 0x73276e65U, 0x6d616720U, 0x202e616dU, \n\n0x6f632041U, 0x72756f6cU, 0x6c617620U, 0x6f206575U, 0x20312066U, 0x6e207369U, 0x7420746fU, 0x65636977U, 0x65687420U, 0x69726220U, 0x6e746867U, 0x20737365U, 0x3020666fU, 0x202c352eU, 0x61636562U, 0x20657375U, 0x65726373U, 0x20736e65U, 0x20657261U, \n0x696c6163U, 0x74617262U, 0x74206465U, 0x7375206fU, 0x6f6d2065U, 0x63206572U, 0x756f6c6fU, 0x61762072U, 0x7365756cU, 0x206e6920U, 0x20656874U, 0x6b726164U, 0x6c6f6320U, 0x7372756fU, 0x6877202cU, 0x20657265U, 0x72756f79U, 0x65796520U, 0x72612073U, 0x6f6d2065U, 0x20206572U, \n0x736e6573U, 0x76697469U, 0x57202e65U, 0x65722765U, 0x6d6f6320U, 0x69747570U, 0x6120676eU, 0x61757463U, 0x696c206cU, 0x20746867U, 0x756c6176U, 0x202c7365U, 0x77206f73U, 0x656e2065U, 0x74206465U, 0x6f63206fU, 0x7265766eU, 0x68742074U, 0x2065736fU, 0x6f746e69U, \n0x65726373U, 0x63206e65U, 0x756f6c6fU, 0x202e7372U, 0x74736f4dU, 0x6e6f6d20U, 0x726f7469U, 0x61682073U, 0x61206576U, 0x6d616720U, 0x6120616dU, 0x6e756f72U, 0x2e322064U, 0x73202c32U, 0x6577206fU, 0x206c6c27U, 0x6c707061U, 0x68742079U, 0x6e692065U, 0x73726576U, 0x20202065U, \n0x7420666fU, 0x2e746168U, \n\n0x20646441U, 0x73696874U, 0x646f6320U, 0x74612065U, 0x65687420U, 0x646e6520U, 0x20666f20U, 0x69616d5fU, 0x616d496eU, 0x203a6567U, \n0x67617266U, 0x6f6c6f43U, 0x67722e72U, 0x203d2062U, 0x28776f70U, 0x61726620U, 0x6c6f4367U, 0x722e726fU, 0x202c6267U, 0x33636576U, 0x302e3128U, 0x322e322fU, 0x3b292029U, \n\n0x656d6f53U, 0x656d6974U, 0x6f792073U, 0x6c6c2775U, 0x6e696620U, 0x63732064U, 0x73656e65U, 0x6f6f6c20U, 0x6562206bU, 0x72657474U, 0x74697720U, 0x69642068U, 0x72656666U, 0x20746e65U, 0x6d6d6167U, 0x61762061U, 0x7365756cU, 0x7562202cU, 0x6f662074U, 0x20202072U, \n0x6c616572U, 0x69747369U, 0x6d692063U, 0x73656761U, 0x756f7920U, 0x6f687320U, 0x20646c75U, 0x61776c61U, 0x6d207379U, 0x68637461U, 0x756f7920U, 0x6f6d2072U, 0x6f74696eU, 0x20732772U, 0x6d6d6167U, 0x6e612061U, 0x64612064U, 0x7473756aU, 0x6c6f6320U, 0x7372756fU, 0x2020202eU, \n0x636e6f43U, 0x6973756cU, 0x20206e6fU, \n0x3d3d3d3dU, 0x3d3d3d3dU, 0x20203d3dU, \n\n0x72726f53U, 0x74202c79U, 0x27746168U, 0x68742073U, 0x6e652065U, 0x28202e64U, 0x20726f46U, 0x21776f6eU, 0x20202029U, \n\n0x79206649U, 0x6c20756fU, 0x206b6f6fU, 0x74206e69U, 0x42206568U, 0x41206675U, 0x756f7320U, 0x2c656372U, 0x68204920U, 0x20657661U, 0x656d6f73U, 0x61786520U, 0x656c706dU, 0x666f2073U, \n0x656d6f73U, 0x726f6d20U, 0x78652065U, 0x736e6574U, 0x736e6f69U, 0x6c202d20U, 0x20656b69U, 0x63617274U, 0x20676e69U, 0x64616873U, 0x7220776fU, 0x2c737961U, 0x646e6120U, \n0x656d6f73U, 0x46445320U, 0x69727420U, 0x2e736b63U, \n\n0x6f682049U, 0x79206570U, 0x6620756fU, 0x646e756fU, 0x69687420U, 0x75742073U, 0x69726f74U, 0x75206c61U, 0x75666573U, 0x49202e6cU, 0x6f792066U, 0x61772075U, 0x7420746eU, 0x6173206fU, 0x79206576U, 0x2072756fU, 0x64616873U, 0x6a207265U, 0x20747375U, 0x79706f63U, \n0x72657665U, 0x69687479U, 0x7920676eU, 0x7627756fU, 0x72772065U, 0x65747469U, 0x6e69206eU, 0x61206f74U, 0x77656e20U, 0x61687320U, 0x2c726564U, 0x646e6120U, 0x6e657220U, 0x20656d61U, 0x69616d5fU, 0x616d496eU, 0x74206567U, 0x616d206fU, 0x6d496e69U, 0x2e656761U, \n\n0x48202020U, 0x79707061U, 0x61685320U, 0x69726564U, 0x2021676eU, \n0x542d2020U, 0x20466b65U, \n\n0x00000000U );\nuint lines[] = uint[]( \n0x0f0U, 0x7f0U, 0xef0U, 0xef0U, 0x1cf0U, 0x2af0U, 0x2ff0U, 0x2ff0U, 0x3df0U, 0x49f0U, 0x49f0U, 0x5ef0U, 0x73f0U, 0x87f0U, 0x8720U, 0x9930U, 0xa4f0U, 0xa4f0U, \n0xb9f0U, 0xbff0U, 0xc5f0U, 0xc6f0U, 0xd4f0U, 0xe2f0U, 0xe2f0U, 0xeff0U, 0xfdf0U, 0x10b20U, 0x11920U, 0x11a21U, 0x12320U, 0x124f0U, 0x124f0U, 0x13931U, 0x147f0U, 0x147f0U, 0x15bf0U, \n0x16df0U, 0x17bf0U, 0x188f0U, 0x18ff0U, 0x18ff0U, 0x19d31U, 0x1a931U, 0x1b2f0U, 0x1b2f0U, 0x1c731U, 0x1d6f0U, 0x1d6f0U, 0x1e020U, 0x1e620U, 0x1e721U, 0x1f121U, 0x1fb21U, 0x20521U, 0x20820U, 0x209f0U, 0x209f0U, 0x21731U, 0x220f0U, 0x220f0U, \n0x228f0U, 0x233f0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x23ef0U, 0x252f0U, 0x267f0U, 0x27330U, 0x28130U, 0x28231U, 0x28934U, 0x29a34U, 0x2a731U, 0x2b631U, 0x2c230U, 0x2c3f0U, 0x2c3f0U, \n0x2d7f0U, 0x2e4f0U, 0x2f220U, 0x2fd20U, 0x2fe21U, 0x30724U, 0x31021U, 0x31924U, 0x32220U, 0x323f0U, 0x323f0U, 0x338f0U, 0x34c21U, 0x35321U, 0x35821U, 0x35df1U, 0x35df0U, 0x372f0U, 0x384f1U, 0x384f0U, 0x39721U, 0x3a8f0U, \n0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3a8f0U, 0x3bdf0U, 0x3d2f0U, 0x3e7f0U, 0x3fa31U, 0x3ff21U, 0x40721U, 0x40822U, 0x41b22U, 0x42e22U, 0x42f23U, 0x43423U, 0x43622U, 0x43722U, 0x44a21U, \n0x44bf0U, 0x44ef0U, 0x451f0U, 0x45ff0U, 0x46df0U, 0x47af0U, 0x486f0U, 0x486f0U, 0x49021U, 0x49d21U, 0x49e22U, 0x4a122U, 0x4b122U, 0x4c122U, 0x4d122U, 0x4d822U, 0x4e421U, 0x4e5f0U, 0x4e5f0U, 0x4f022U, 0x4ff22U, 0x50f32U, \n0x516f0U, 0x524f0U, 0x53022U, 0x53822U, 0x54032U, 0x54bf0U, 0x54bf0U, 0x557f0U, 0x562f0U, 0x562f0U, 0x575f0U, 0x58af0U, 0x59ef0U, 0x5b3f0U, 0x5b5f0U, 0x5b5f0U, 0x5bf21U, 0x5ccf0U, 0x5ccf0U, 0x5e0f0U, \n0x5f5f0U, 0x5f8f0U, 0x5fbf0U, 0x5fbf0U, 0x604f0U, 0x604f0U, 0x612f0U, 0x61ff0U, 0x623f0U, 0x623f0U, 0x637f0U, 0x64bf0U, 0x64b67U, 0x6504aU, 0x652f0U, 0x65200U );\nuint pages[] = uint[]( 0x0U, 0x12U, 0x25U, 0x3dU, 0x55U, 0x6bU, 0x82U, 0x98U, 0xacU, 0xbbU );\n\nconst float screenHeightInLines = 24.; \/\/ text looks best if this is an integer fraction of height\nconst float textSoftness = .3;\nconst float tabWidth = 4.;\nconst float charWidth = .5; \/\/ as a factor of height\n\nvec4 WallOfText( float startLine, uint endLine, vec2 uv )\n{\n    uv.y -= iResolution.y; \/\/ we'll index negative y's from the top of the screen\n    \n    \/\/ convert to line-height scale\n    float pixelToLineScale = screenHeightInLines\/iResolution.y;\n    uv *= pixelToLineScale;\n    \n    \/\/ maybe add pages here, pointing into the lines\n    \n    \/\/ find out which line we're on\n    int line = int(-uv.y+startLine);\n    if ( line >= int(endLine) )\n    {\n       \treturn vec4(0);\n    }\n    \n    int lineIndex = int(lines[line]>>8U);\n    int lineIndent = int(lines[line]&0xFU); \/\/Oh ex, eff you!\n    int lineColour = int((lines[line]>>4U)&0xFU);\n    vec3 textColour = vec3(lineColour&1,(lineColour>>1)&1,(lineColour>>2)&1);\n    \n    \/\/ and which character within the line\n    int charIndex = int(floor(uv.x\/charWidth-float(lineIndent)*tabWidth));\n    charIndex += lineIndex*4;\n    \n    if ( charIndex >= lineIndex*4 && charIndex < int(lines[line+1]>>8U)*4 )\n    {\n        uint char = text[charIndex\/4];\n        char = (char>>(8*(charIndex&3)))&0xffU;\n        vec2 charuv = vec2( char&0xFU, 0xFU-(char>>4) );\n        \n        uv.x = fract(uv.x\/charWidth)*charWidth;\n        uv.y = fract(uv.y-startLine);\n        \n        vec4 t = textureLod(iChannel1,(uv+charuv)\/16.+vec2(1.\/64.,0), 0.);\n        \n\t    float s = textSoftness * pixelToLineScale;\n        \n        return vec4( textColour, smoothstep(.5+s,.5-s,t.w) );\n    }\n    \n    return vec4(0);\n}\n\n\n\/\/ Prints character in the range uv = (0,0) to (.5,1)\n\/\/ Doesn't handle the range outside of that\nfloat PrintCharacterInternal( in uint char, in vec2 uv )\n{\n    vec2 charp = vec2( char&0xFU, 0xFU-(char>>4U) );\n\n\/*    if ( min(uv.x,uv.y) < .0 || max(uv.x-.5,uv.y-1.) > .0 )\n        return 0.;*\/\n    uv.x += .25;\n\n    float s = 10.\/iResolution.x;\n    return smoothstep(.5+s,.5-s,textureLod(iChannel1, (uv+charp)\/16., .0).w);\n}\n\n\nint numButtons = 0;\nfloat clickTimes[4];\n\n\/\/ p = corner position - sign indicates which corner!\n\/\/ string rendering worked, but the shader performance nosedived if I also had a lot of text in the tutorial.\nfloat Button( inout vec4 o, uint char,\/*uint string[16], int strlen,*\/ vec2 p, vec2 uv, bool click )\n{\n    int strlen = 1;\n\tfloat buttonFontScale = iResolution.y \/ screenHeightInLines;\n    vec2 margin = vec2(.3,.0);\n    vec2 buttonDim = (vec2(.5*float(strlen),1)+margin)*buttonFontScale*.5;\n    \n    vec2 buttonMid = abs(p)-sign(p)*buttonDim;\n    \n    float clickTime = texelFetch(iChannel0,ivec2(3+numButtons\/4,0),0)[numButtons%4];\n    if ( clickTime > 15. )\n    {\n        vec2 duv = abs(iMouse.xy-buttonMid)-buttonDim;\n        if ( click && max(duv.x,duv.y) < .0 )\n            clickTime = 0.;\n    }\n    clickTimes[numButtons] = clickTime; \/\/ for data output\n    numButtons++;\n\n    vec2 euv = abs(uv-buttonMid)-buttonDim;\n    if ( max(euv.x,euv.y) <= .0 )\n    {\n        float pushed = clickTime < 5. ? -1. : 1.;\n        float l = .8 + .2*pushed*sign(dot(uv-buttonMid,vec2(-1,1)\/buttonDim))*step(-2.,max(euv.x,euv.y));\n        o.rgb = vec3(l);\n        \n        vec2 stringUV = (uv-buttonMid+buttonDim-margin*buttonFontScale*.5)\/buttonFontScale;\n        if ( stringUV.x > .0 && stringUV.x < .5*float(strlen) && stringUV.y > .0 && stringUV.y < 1. )\n        {\n            o.rgb = mix( o.rgb, vec3(0),\n                        PrintCharacterInternal( char\/*string[int(stringUV.x\/.5)]*\/, vec2(fract(stringUV.x\/.5)*.5,stringUV.y) )\n                        );\n        }\n        \n\t\to.a = 1.;\n    }\n\n    return clickTime;\n}\n\n\n\/\/ diagrams\nvoid Circle( inout vec3 o, vec2 c, float r, vec3 i, vec2 uv )\n{\n    o = mix( i, o, smoothstep( r-1.4, r, length(uv-c) ) );\n}\n\nvoid Line( inout vec3 o, vec2 a, vec2 b, float h, vec3 i, vec2 uv )\n{\n    if ( length(a-b) <= .0001 ) return;\n    \n    float t = dot(uv-a,b-a)\/dot(b-a,b-a);\n    t = clamp( t, .0, 1. );\n    vec2 p = mix( a, b, t ); \/\/ this should be the closest point on the line\n    o = mix( i, o, smoothstep( h-.7, h+.7, length(uv-p) ) );\n}\n\nvoid SphereMarchDiagram( inout vec3 o, vec2 uv )\n{\n    float size = iResolution.y*.55; \/\/ don't scale uv, it will break the anti aliasing\n    \n    if ( abs(uv.x) > .8*size || abs(uv.y) > .27*size )\n        return;\n    \n\tvec2 a = size*vec2(-.3,.1);\n    vec2 b = size*vec2(.5,.0 );\n    float l = length(b-a);\n    \n    float tt = fract(iTime\/10.)*10.;\n    float t[10];\n    for( int i=0; i < t.length(); i++ )\n    {\n        t[i] = smoothstep(.0,1.,tt-float(i));\n    }\n    \n    vec2 p0 = a;\n    vec2 p1 = mix(a,b,.5);\n    vec2 p2 = mix(a,b,.74);\n    vec2 p3 = mix(a,b,.92);\n    vec2 p4 = mix(a,b,.98);\n    \n    Circle( o, p4, l*.025*t[8], vec3(1,.5,.5), uv );\n    Circle( o, p4, l*.015*t[8], vec3(1,0,0), uv );\n    Circle( o, p3, l*.065*t[6], vec3(1,.5,.5), uv );\n    Circle( o, p3, l*.055*t[6], vec3(1,0,0), uv );\n    Circle( o, p2, l*.185*t[4], vec3(1,.5,.5), uv );\n    Circle( o, p2, l*.175*t[4], vec3(1,0,0), uv );\n    Circle( o, p1, l*.245*t[2], vec3(1,.5,.5), uv );\n    Circle( o, p1, l*.235*t[2], vec3(1,0,0), uv );\n    Circle( o, p0, l*.505*t[0], vec3(1,.5,.5), uv );\n    Circle( o, p0, l*.495*t[0], vec3(1,0,0), uv );\n    \n    vec2 arrowhead = normalize(b-a)*.3*size+a;\n    Line( o, a, arrowhead, size*.01, vec3(0), uv );\n    Line( o, arrowhead+vec2(-.04,.06)*size, arrowhead, size*.01, vec3(0), uv );\n    Line( o, arrowhead+vec2(-.06,-.05)*size, arrowhead, size*.01, vec3(0), uv );\n         \n    Line( o, p0, mix(p0,p1,t[1]), size*.005, vec3(1), uv );\n    Line( o, p1, mix(p1,p2,t[3]), size*.005, vec3(1), uv );\n    Line( o, p2, mix(p2,p3,t[5]), size*.005, vec3(1), uv );\n    Line( o, p3, mix(p3,p4,t[7]), size*.005, vec3(1), uv );\n    Line( o, p4, mix(p4,b,t[7]), size*.005, vec3(1), uv );\n    Circle( o, p0, size*.017, vec3(1), uv );\n    Circle( o, p1, size*.017*t[1], vec3(1), uv );\n    Circle( o, p2, size*.017*t[3], vec3(1), uv );\n    Circle( o, p3, size*.017*t[5], vec3(1), uv );\n    Circle( o, p4, size*.017*t[7], vec3(1), uv );\n    Circle( o, b, size*.017*t[9], vec3(1), uv );\n\n    Line( o, size*vec2(.7,.1), size*vec2(.43,-.08), size*.02, vec3(0), uv );\n    Line( o, size*vec2(.29,-.18), size*vec2(.43,-.08), size*.02, vec3(0), uv );\n    Line( o, size*vec2(.29,-.18), size*vec2(.04,-.165), size*.02, vec3(0), uv );\n    Line( o, size*vec2(-.1,-.3), size*vec2(.04,-.165), size*.02, vec3(0), uv );\n}\n\n\n\/\/ the same function from the tutorial!\nvoid Rotate( inout vec3 vector, vec2 angle )\n{\n\tvector.yz = cos(angle.y)*vector.yz\n\t\t\t\t+sin(angle.y)*vec2(-1,1)*vector.zy;\n\tvector.xz = cos(angle.x)*vector.xz\n\t\t\t\t+sin(angle.x)*vec2(-1,1)*vector.zx;\n}\n\n\nvec2 Hash( uint index )\n{\n    \/\/ integer hash copied from Hugo Elias\n\tindex = (index << 13U) ^ index;\n    index = index * (index * index * 15731U + 789221U) + 1376312589U;\n    uvec2 k = index * uvec2(index,index*16807U);\n    return 1.0 - vec2( k & uvec2(0x7fffffffU))\/float(0x7fffffff);\n}\n\n\nvoid RayLaunchDiagram( inout vec3 o, vec2 uv )\n{\n    float size = iResolution.y*.2; \/\/ don't scale uv, it will break the anti aliasing\n    \n    if ( abs(uv.x) > 2.*size || abs(uv.y) > .9*size ) return;\n    \n    vec3 eye = vec3(0,0,-2);\n    vec3 frame = vec3(1,.6,0);\n    \n    \/\/ isometric projection to 2D\n    vec3 i = vec3(1,0,0)*size;\n    vec3 j = vec3(0,1,0)*size;\n    vec2 a = vec2(.125,1.\/12.)*6.28*smoothstep(vec2(-.5),vec2(.5,.2),vec2(sin(iTime\/2.)));\n    Rotate( i, a );\n    Rotate( j, a );\n    \n    vec2 pe = vec2(dot(i,eye),dot(j,eye));\n    vec2 pf0 = vec2(dot(i,frame),dot(j,frame));\n    vec2 pf1 = vec2(dot(i,frame*vec3(-1,1,0)),dot(j,frame*vec3(-1,1,0)));\n    vec2 pf2 = vec2(dot(i,frame*vec3(1,-1,0)),dot(j,frame*vec3(1,-1,0)));\n    vec2 pf3 = vec2(dot(i,frame*vec3(-1,-1,0)),dot(j,frame*vec3(-1,-1,0)));\n    \n    \/\/ screen edges\n    Line( o, pf0, pf1, size*.02, vec3(.8), uv );\n    Line( o, pf3, pf1, size*.02, vec3(.8), uv );\n    Line( o, pf3, pf2, size*.02, vec3(.8), uv );\n    Line( o, pf0, pf2, size*.02, vec3(.8), uv );\n    \n    \/\/ rays firing through screen\n    vec3 ray = vec3(Hash(uint(iTime\/1.)),2.*fract(iTime\/1.));\n    vec2 p = mix(mix(pf3,pf2,ray.x),mix(pf1,pf0,ray.x),ray.y);\n    Circle( o, p, size*.02, vec3(1), uv );\n    Line( o, mix(pe,p,ray.z), mix(pe,p,ray.z+.1), size*.01, vec3(1), uv );\n    \n    \/\/ frustum\n    Line( o, pe, pf0, size*.01, vec3(.8), uv );\n    Line( o, pe, pf1, size*.01, vec3(.8), uv );\n    Line( o, pe, pf2, size*.01, vec3(.8), uv );\n    Line( o, pe, pf3, size*.01, vec3(.8), uv );\n    \n    \n    \/\/ [would be nice to show rays hitting something and colour appearing on screen\n}\n\n\nvoid mainImage( out vec4 o, vec2 uv )\n{\n    vec4 lastMouse = texelFetch(iChannel0,ivec2(1,0),0);\n    float page = texelFetch(iChannel0,ivec2(2,0),0).x;\n    \n    if ( iFrame == 0 )\n    {\n        page = .0;\n    }\n    \n    float isSmall = smoothstep(0.,30.,lastMouse.z);\n    if ( lastMouse.w < .0 ) isSmall = 1.-isSmall;\n    vec4 frame = mix( vec4(0,0,1,1), vec4(iResolution.x*2.,iResolution.y*2.,3,3), isSmall );\n    \n    \n    \/\/ buttons\n    bool click = ( lastMouse.x > .0\n         \t\t&& lastMouse.y > .0 && iMouse.w <= .0 );\n\n    vec2 sizeButtonPos = (vec2(0,0)+frame.xy)\/frame.zw+vec2(1,1);\n    \n    vec4 frameButtons = vec4(0);\n    float resizeClickTime = Button( frameButtons,\n                                   isSmall < .5 ? 0xBBU : 0xABU,\n                                   \/\/uint[16]( isSmall < .5 ? 0xBBU : 0xABU,0U,0U,0U, 0U,0U,0U,0U, 0U,0U,0U,0U, 0U,0U,0U,0U), 1,\n                                   sizeButtonPos*vec2(-1,-1), uv, click );\n    bool resizeClick = (resizeClickTime == 0.);\n    \n    vec4 pageButtons = vec4(0);\n    float pageUpClickTime = Button( pageButtons,\n                                     0x11U, \/\/uint[16]( 0x50U, 0x72U, 0x65U, 0x76U,  0U,0U,0U,0U, 0U,0U,0U,0U, 0U,0U,0U,0U ), 4, \/\/Next\n                                     vec2(iResolution.x-1.,-iResolution.y*.045-2.), uv, click );\n    float pageDownClickTime = Button( pageButtons,\n                                   0x13U, \/\/uint[16]( 0x4eU, 0x65U, 0x78U, 0x74U,  0U,0U,0U,0U, 0U,0U,0U,0U, 0U,0U,0U,0U ), 4, \/\/Next\n                                   vec2(iResolution.x-1.,-1), uv, click );\n    \n    page += pageUpClickTime == 0. ? -1. : pageDownClickTime == 0. ? 1. : 0.;\n    page = clamp(page,0.,float(pages.length()-2));\n\n    o = vec4(vec3(.5),1);\n    \n    \/\/ text goes here!\n\/\/\tfloat startLine = (float(lines.length())-24.)*(.5-.5*cos(float(iFrame)*6.283\/1000.));\n    float startLine = float(pages[int(page)]);\/\/25.*floor(6.999*fract(iTime\/(7.*2.)));\n    uint endLine = pages[int(page)+1];\/\/25.*floor(6.999*fract(iTime\/(7.*2.)));\n\tvec4 t = WallOfText( startLine, endLine, uv );\n    \n    o.rgb = mix( o.rgb, t.rgb, t.a );\n    o.rgb = mix( o.rgb, pageButtons.rgb, pageButtons.a );\n    o.a = max(max( o.a, t.a ), pageButtons.a );\n    \n    if ( int(page) == 3 )\n    {\n    \tRayLaunchDiagram( o.rgb, uv-vec2(.3,.75)*iResolution.xy );\n    }\n    \n    if ( int(page) == 5 )\n    {\n    \tSphereMarchDiagram( o.rgb, uv-vec2(.3,.83)*iResolution.xy );\n    }\n    \n    \/\/ frame\n    vec2 uvf = uv*frame.zw-frame.xy;\n    uvf = (abs(uvf-iResolution.xy*.5)-iResolution.xy*.5)\/frame.zw;\n    float f = max(uvf.x,uvf.y);\n    o = f < 0. ? vec4(0) : \/\/ transparent so we can see the user's shader\n    \tf < 2. ? vec4(0,0,0,1) : \/\/ border\n        o;\n    \n    o.rgb = mix( o.rgb, frameButtons.rgb, frameButtons.a );\n    o.a = max( o.a, frameButtons.a );\n    \n    \/\/ data output\n    ivec2 iuv = ivec2(uv);\n    if ( iuv.y == 0 && iuv.x < 2 + numButtons )\n    {\n        o = texelFetch(iChannel0,ivec2(uv),0);\n        \n        if ( iuv.x == 0 )\n        {\n            o = frame;\n        }\n        else if ( iuv.x == 1 )\n        {\n            \/\/ last frame's mouse position, frames since last click\n            o.xy = iMouse.zw;\n            if ( resizeClick )\n            {\n                o.z = .0;\n            \to.w = -sign(lastMouse.w);\n            }\n            else\n            {\n\t            o.z++;\n            \to.w = sign(lastMouse.w);\n            }\n            if ( o.w == 0. ) o.w = 1.;\n        }\n        else if ( iuv.x == 2 )\n        {\n            \/\/ page number\n            o.x = page;\n        }\n        else\n        {\n            \/\/ button data\n            for ( int i=0; i < numButtons; i+=4 )\n            {\n            \to = vec4(clickTimes[i],clickTimes[i+1],clickTimes[i+2],clickTimes[i+3])+1.;\n            }\n        }\n    }\n}",
            "name": "Buffer A",
            "description": "",
            "type": "buffer"
        }
    ]
}