{
    "text": [
      "amazing!",
      "Remixed: https:\/\/www.shadertoy.com\/view\/tstfW7",
      "@JoshScholar\nThe caustic-like lighting is just some indexing into the 3D surface texture with a reflective vector. It's fake, and doesn't always work, but it's worth trying. In general, you can index into anything, like 3D noise, tri-planar textures, etc. I do it in a lot of examples where real reflections are too costly, or if I don't want the overhead of a real reflective pass.\n\n@PelicanPolice\nBetween January and April, I'd been to way too many of the so-called world Covid-19 hotspots, but never got so much as the sniffles. I wasn't so lucky with the swine flu a few years ago though -- That one absolutely floored me. Anyway, I won't miss 2020. :)",
      "corona virus!!!",
      "How did you come up with believable caustics?",
      "My God, that's beautiful!",
      "@tdhooper\nI forgot to mention that hardware interpolation appears to cause artifacts at the seam lines when you're trying to wrap things, which tends to be necessary for so many scenarios... It's possible that I didn't put enough effort into finding a hardware solution, but so far, I haven't managed to get rid of the seam line artifacts.",
      "@tdhooper\nIt's nice being able to precalculate things, but I still struggle trying to balance resolution, rendering quality and rendering speed. As you'd know, four channels on one cubemap face gives you 160 cubed resolution, but at the cost of rendering speed. Four faces and four channels would allow you to pack in a 256 pixel sided cube, which would be great, but I'd imagine smooth rendering speed would drop even further. The problem tends to be the 8 neighboring texel lookups required for smooth interpolation... Having said that, there might be a way to group storage in such a way as to cut that down.\n\nThe next example I'm putting up has only 100 pixels per side resolution, but packs four neighboring values into the four channels, which allows for smooth rendering with just two texel lookups. It's fast and reasonably smooth, but at the expense of resolution... Damned if you do, damned if you don't, as they say. :)\n\nThe exclusive Z-interpolation you describe sounds interesting. I only briefly skimmed over your example when it first went up, so haven't looked into the finer details. However, I might give it more attention later to see if it'll enable me to make improvements. On a side note, I hear Shadertoy will be implementing 3D textures at some stage, so hopefully, that'll make life much easier all round.",
      "I thought you were using all 6 faces by how smooth it looks, I guess your interpolation is super effective,  is it different to using the hardware linear interpolation? In my version I used that for the x\/y lookup, and then did a manual interpolation for the z position.",
      "<3",
      "yes... cool... it compiles pretty fast now!\nso was it a compile problem after all? or was that due to initialization?",
      ":octopusballoon:",
      "The simple change to initializing the map loop counter reduces the compile time from 16s to 1.3s. So even tho' this loop just does texture lookups it manages to upscrew the (linux) Nvidia glsl compiler when unrolled. Hope they can figure it out. :octopusballoon",
      "compile time is now about 7\" for me. it's better ! (especially when browsing recent shaders ;-) )\n\nabout GPU mysteries: it' more about all what is upstream ( cf my blogpost about compatibility issues).\n- on Windows, by default, GLSL is transpiled into another language (HLSL), relying different drivers, via D3D\n- chrome and firefox don't use the same version of D3D\/directX, thus different compilers\n- OpenGL side, recent nvidia drivers have been totally redone from scratch, and thus behave very differently (optimizations can be worse or better, etc).\n- on WebGL, an Angle layer is always called first and modifies your code. Very differently on OpenGL and Windows\/D3D, but also different browsers trigger different Angle patches ( + patches depending on detected GPU ).\n- even for 1 given compiler, you can compile using different target version level, knowing or not how to do smart things. But multiple things interact to decide this target version layer.\n\nConclusion: that's a mess ;-)\n\n- ",
      "BTW, Shane, I realized you can know if a texture is loaded or not already, by doing [code]if( textureSize(iChannel0,0).x<2 )[\/code]",
      "Yeah, textures load asynchronously at any time, independently of iFrame. I was thinking to add a set of uniforms to let the shaders know when a texture is ready for use. Added to my list",
      "@iq\nI had a problem with textures not loading until well after the \"iFrame\" counter had started,([url=https:\/\/www.shadertoy.com\/view\/4ldcWS]here[\/url] is an example), then wondered whether that would manifest itself elsewhere. However, if you believe that's not the case (when textuer loading isn't involved), then I'll simplify the initialization condition to \"if(iFrame == 0)\" from this point on. As for 3D textures -- That'd be awesome. :)\n\n@dr2\nThe long compile time has me baffled. It's pretty quick on my machine, and I can't see any place -- other than the Voronoi function -- that looks particularly complicated. The \"map\" function is pretty stock standard. I've bracketed some integer manipulation and used the \"min(0, iFrame)\" hack within the Voronoi, raymarching and shadow loops... I'll keep looking at it. Anyway, I know you're more comfortable packing 3D values into textures than I am, so none of this will be particularly new for you. However, hopefully the extra resolution might give you something else to play around with.",
      "Clever :)\n\nMoving the voronoi function from Common to Cube A does not reduce the listed compile time (16s), Since the function is now compiled only once instead of twice it implies the problem is elsewhere ??",
      "Ah. Well, iFrame just starts at zero and gets incremented we render a frame, there's nothing else to it, so it's as reliable as a computer can get. I cannot see how it'd fail (skip a number or something). If it didn't work as expected I'd be very surprised and I'd love to know what it was that it did so I can fix it.\n\nFor baking SDFs, I think I'll wait till mainVolume() gets implemented so we can render to 3D textures for later lookup. Can't wait :)\n\n",
      "Thanks, everyone. Even after emptying the cache, this compiles pretty quickly for me, so I didn't put a lot of effort into the compilation side of things. I'm not sure why it's different on some machines, but I'm guessing it has something to do with unrolling the loops in the Voronoi function? The precalculation involves a simple enough algorithm, but it's definitely on the expensive side. Having said that, it's not getting called within a raymarching loop... GPU architecture has always been a mystery to me. I've hacked in a version of the \"min(0, iFrame)\" line into the Voronoi loops, to see if that makes a difference, so if anyone could let me know whether that helps, it'd be appreciated.\n\nAnyway, the point of this was to make an attempt to use precalcution to produce something that couldn't be produced without it -- I see static imagery like this on the net, but I'm pretty sure it's not being raymarched in realtime. I also wanted to show that different faces of the cubemap could be used for different functions. There are definitely some issues that need to be ironed out, improvements to make, etc, but I think the cubemap is a step forward toward producing some really interesting scenes. I have more interesting scenarios than this is mind.\n\n@iq\nInserting \"discard\" works, and there are no flipping issues when I do that. I've avoided using the \"iFrame\\discard\" block because I'm not familiar with the backend workings, so can never be sure whether I can rely on the \"iFrame\" variable. Therefore, I've been using a flagged buffer hack to ensure that initialization doesn't get skipped. In regard to the packed isosurface value approach itself, I'd be interested to see what people like yourself could come up with.",
      "NB: 20\" for compilation",
      "Very nice!\n\nOn the vflip issue for cubemaps, could you check [url]https:\/\/www.shadertoy.com\/view\/4ttyzn[\/url] and comment the discard in line 107 of the pass \"Cube A\" and see if that produces the flipping that you are seeing? Or was your problem something different?",
      "very nice, but a bit long to compile ;-)",
      "just blown away! specular and reflections are mesmerizing! ",
      "Looks awesome. :love:l ",
      "wow, its beautiful! ...but needs aaages to compile on my sys (linux,2060,chromium) ...browser almost gave up."
    ],
    "date": [
      "1605645386",
      "1605332501",
      "1605274270",
      "1605029864",
      "1605007511",
      "1605007445",
      "1576669404",
      "1576668669",
      "1576617757",
      "1576241599",
      "1576238593",
      "1576223882",
      "1576223846",
      "1576221823",
      "1576217669",
      "1576214661",
      "1576210135",
      "1576202173",
      "1576199240",
      "1576197160",
      "1576181217",
      "1576177090",
      "1576175676",
      "1576162049",
      "1576159385",
      "1576153199"
    ],
    "username": [
      "derive_by",
      "UrbanClubProfessional",
      "Shane",
      "PelicanPolice",
      "JoshScholar",
      "JoshScholar",
      "Shane",
      "Shane",
      "tdhooper",
      "iapafoto",
      "flockaroo",
      "dr2",
      "dr2",
      "FabriceNeyret2",
      "iq",
      "iq",
      "Shane",
      "dr2",
      "iq",
      "Shane",
      "FabriceNeyret2",
      "iq",
      "FabriceNeyret2",
      "pjkarlik",
      "shau",
      "flockaroo"
    ],
    "userpicture": [
      "\/img\/profile.jpg",
      "\/media\/users\/UrbanClubProfessional\/profile.png",
      "\/img\/profile.jpg",
      "\/media\/users\/PelicanPolice\/profile.png",
      "\/img\/profile.jpg",
      "\/img\/profile.jpg",
      "\/img\/profile.jpg",
      "\/img\/profile.jpg",
      "\/media\/users\/tdhooper\/profile.png",
      "\/media\/users\/iapafoto\/profile.png",
      "\/media\/users\/flockaroo\/profile.jpeg",
      "\/img\/profile.jpg",
      "\/img\/profile.jpg",
      "\/media\/users\/FabriceNeyret2\/profile.jpeg",
      "\/media\/users\/iq\/profile.png",
      "\/media\/users\/iq\/profile.png",
      "\/img\/profile.jpg",
      "\/img\/profile.jpg",
      "\/media\/users\/iq\/profile.png",
      "\/img\/profile.jpg",
      "\/media\/users\/FabriceNeyret2\/profile.jpeg",
      "\/media\/users\/iq\/profile.png",
      "\/media\/users\/FabriceNeyret2\/profile.jpeg",
      "\/media\/users\/pjkarlik\/profile.jpeg",
      "\/media\/users\/shau\/profile.png",
      "\/media\/users\/flockaroo\/profile.jpeg"
    ],
    "id": [
      "tdl3zn",
      "3dXGzn",
      "MlVBWd",
      "MlGfDt",
      "llGBDt",
      "MtGBDt",
      "Xd3yD7",
      "4sccW7",
      "Xd3yDM",
      "XscyDN",
      "XdcyDN",
      "XdccWN",
      "4s3cWN",
      "Xd3cWN",
      "4scyWN",
      "4dcyWN",
      "4dccD4",
      "4s3yD4",
      "Xs3yD4",
      "Xd3yD4",
      "XsccW4",
      "4s3cW4",
      "Xd3cW4",
      "XdcyW4",
      "4d3yW4",
      "MsdcDH"
    ],
    "hidden": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  }