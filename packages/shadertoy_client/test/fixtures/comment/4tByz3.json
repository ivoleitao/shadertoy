{
  "text": [
    "This shader challenges the best pc grapic cards, good.",
    "i don't think macOS catalina includes glsl 3, which means i have to risk updating to macOS big sur which is known for bricking my computers model",
    "If you get GLSL ES 3.00 only errors at around line 437 in buffer A, then the device you\u2019re using is not quite up to the job!  (made by Apple? \ud83d\ude00)",
    "'min' : no matching overloaded function found\n'=' : cannot convert from 'const mediump float' to 'highp int'\nDo I need to update my graphics drivers or something?",
    "So now it's 10 fps, down from the 20 fps of 4 months ago and the original 30 fps. No code changes happened at all; WebGL can be amazing sometimes :(",
    ".....",
    "drivers, also: when they re-wrote compilers from scratch around Vulkan base, they change many arbitrations and thresholds, with sometime this consequence. Plus many new bugs, also :-\/ .\nOr do you mean a more recent change ?",
    "It used to be 30 fps in my old laptop, now it's 20 fps in my new one, which has a more powerful GPU. Each version of Angle (Chrome\/Edge\/Firefox) makes shaders slower, it seems :)",
    "30fps on my RTX3090.Oh My God",
    "missspelling for tag \"procedueal\"",
    "I think there is a way that you could progressively raymarch it, but I'm not that good at these things yet.",
    "20-23fps on 1070ti for me, but slows everything else to a crawl while doing so. Still, very amazing!",
    "Wow, amazing! :-) But makes my 1080ti stutter!!... ",
    "This shader and the one with the snail are the most amazing shaders here. I love them!",
    "But Amazing",
    "12fps on GTX1066",
    "@etale_cohomology, yes, computers are too slow for programs that calculate whole scene geometry 4 million times every frame.",
    "(computers are still WAY too slow for the rigors of unconstrained computer graphics!)",
    "Runs at 16fps with an NVIDIA Titan V (linux driver 390.30)",
    "oh my......",
    "I'll never feel bad about my heavy shaders again... but then they are not remotely as complex and slick as this one... so maybe I'll still fee bad ;)\n\nJust had to think back at the first GLSL example I saw on some GPU from 3Dlabs (http:\/\/prideout.net\/archive\/shots\/glsldemo.png) and thought \"Geez, OpenGL came a long way from the old SGI-times!\"... and here we are today, able to write whole rendering-systems in a shader on the web.",
    "zproxy, nice 360 video. (Readers -- remember to click pause on the above ShaderToy before playing the YouTube video)",
    "360 at [video]https:\/\/www.youtube.com\/watch?v=ZJZMjMjfQFk[\/video]",
    "\"mapCrapInTheAir\" hahah",
    "Iq, brilliant picts there. You\u00b4re a great source of inspiration to me. Thanks for all work. :)",
    "Brilliant! Looks very real :-)",
    "I'm beyond speechless ",
    "@FabriceNeyret2 Thx. I see what you mean.",
    "wow\uff0camazing\uff01\n12.5 FPS on GTX1060",
    "wow, super report; thanks !",
    "@Fabrice, this is a summary of the process (click on the image to see the original):\r\n  [img]http:\/\/iquilezles.org\/trastero\/process.png[\/img]\r\n\r\nAs it says in the image, I'll talk more about it soon in my Patreon page ([url]https:\/\/www.patreon.com\/inigoquilez[\/url]) and my website ([url]http:\/\/www.iquilezles.org\/[\/url]). You can also see another typical breakdown in the video this page: [url]http:\/\/iquilezles.org\/www\/articles\/raymarchingdf\/raymarchingdf.htm[\/url]",
    "Of course it runs faster if you reduce the voronoi search size. But, also of course, I chose those loop limits for a good reason -\r\n reducing them breaks the image (for the grass elements span beyond 2 grid cells). So that's not an option for me.\r\n\r\nThe only way to reduce the loops, as I said, is to generate the grass\/moss elements in a way that allows you to know the direction of growth (and hence cell overlap) beforehand without evaluating the full distance field. Then you can explore only the relevant part of the grid. Since that's not easily done at runtime, an option is to precompute it in the first frame of the animation and store it in a buffer where each texel encodes the xmin,xmax,ymin,ymax of the smallest search box for each grid cell that gives correct results.\r\n\r\nA classic trick in real applications that render vegetation is to reduce the amount of elements with distance, dof and mblur, and make them thicker to compensate for the lost pixel coverage. That works great for images with a big dynamic range of distances. In this case all the content is concentrated in small distance and with a long lens, so not much can be done. You can still try it by doing [code]    int km = ( pos.z>1.0 ) ? 1 : 2;\r\n    for( int k=0; k<km; k++ )[\/code] in line 300 and float d2 = se2.x - (0.02 + 0.03*se2.y)*((km==2)?1.0:2.0); in line 336. Still, all you get is a win of 1.03x. Probably, because of the way WebGL is unrolling these loops.\r\n\r\nAnyway. Yes, I did look into all the alternatives I could think of (and believe me, rendering massive amounts of vegetation efficiently is something I know about).\r\n\r\nI might try dr2's hexagonal pattern next time, a 2-ring search should involve 19 cells instead of 25, so there's that, although the density will decrease, so that might require a 3-ring search, defeating the point. We'll see.",
    "I think iq already explained that he wants the grass to cover more area continuously, although I'm sure there's ways around that with smaller loops.",
    "If you want it to run 3x faster, reduce the Voronoi loop counts:\n\nIn mapGrass -\n        \/\/for( int j=-2; j<=2; j++ )\n        \/\/for( int i=-2; i<=2; i++ )\n        for( int j=-1; j<=1; j++ )\n        for( int i=-1; i<=1; i++ )\n       \nIn mapMoss:\n    \/\/for( int k=0; k<2; k++ )\n    for( int k=0; k<1; k++ )\n\nI have done this in https:\/\/www.shadertoy.com\/view\/llXfRM (unlisted) - I also omitted the DoF to see if the extra buffer slows things (only a slight effect).\n\nIf you use the hexagon-based Voronoi, as in https:\/\/www.shadertoy.com\/view\/MlsBzN (Succulent Forest), you will get this speedup (perhaps even slightly more), without the visual artifacts that the extra square Voronoi cells are needed to prevent.\n\nAs they say, just my 2c. Of course YMMV :octopusballoon:\n",
    "@iq: BTW, any idea how much time  you spent on the making ?  and possibly, on the raw making vs the fine tweaking ?",
    "Amazing!!!",
    "@Fabrice, if I disable the materials I still get pretty much the same FPS (well, it improves by a 1.03x)",
    "@rs: for a convex component, testing dot(rayDir,obj-raySamplePos) before considering its distance. But this test is about the same cost as the distance evaluation (for base objects), so it is doubling the cost in all the cases while saving maxi 50% in some cases.",
    "@iq Wow.",
    "@FabriceNeyret2 \"backface culling (ignoring backsided distances)\" how would you do that in a distance field?",
    "WOW! So beautiful!",
    "29fps on my 1070 alienware....  man it's so amazing!",
    "@iq:\n- \" \/dot(b,b) pre-computed since the lengths are fixed,\": Isn't the optimizer is supposed to find this by itself ?\n- shading cost: uh, in material(), adding a return at first position doubled the fps, but not if added right after \" matNor = nor;\". ok, then :-)\n- backface optimisation: yep, the (unlikely) peak best to gain is 50%, but the additional cost is probably way more.",
    "Yeah, the cost of shading is 0. So not only it's useless to optimize shading, but trying to conditionally simplify based on DOF would probably make it more expensive.\r\n\r\nThe cost of shadows is almost 0 too (since shadows are found so early on). Not worth trying to reduce number of steps or casting the ray from light to surface instead of surface to light (classic trick to speed things up sometimes). Shadows are not the issue. All the cost is in the intersection\/raymarch of the primary ray.\r\n\r\nGeometrically, the cost is not the mushroom nor the ladybug. Still, both use bounding spheres right now, but that helps nothing.\r\n\r\nAll the cost is in the grass and moss intersection. The 5x5 and 3x3 search kernels are necessary to prevent missing intersections, since moss and specially grass are bent and cross one or two cells. Since the bending is in arbitrary directions, the \"offset search by 1 and reduce range\" trick cannot be applied.\r\n\r\nI think the optimization effort should go into either micro-optimizations inside the moss and grass inner loops (for example, the sdLineOri calls on moss could have \/dot(b,b) pre-computed since the lengths are fixed, or replacing the sin\/cos rotations with a reflect in lines 327), or go all the way and do higher level optimizations such as raymarching with over-stepping + correction?",
    "shadow loop down to 50 save nothing\nintersec loop down to 100 save 6% (no visible change)\ndecentered finite difference for N save 13% (no visible change)\nSmall gain.",
    "oops sorry, mapGrass is Grass geometry, not texture.\nstill, material() cost 48% ( which is strange: no loop or Perlin noise inside. Is adding a return at the beginning really testing the right way ? )",
    "well, the cost of mapGrass is 55% of the total, and all the rest (marching + other maps) is 45% ;-)",
    "such amazing quality",
    "Also, the grass probably  does not need noise in its color when out of focus. Maybe the backProjected CoC (generalisation of MIPmap LOD) could be  considered at shading for minimum scale of noise evaluation. ( Anyway, it might be that this part of the cost is almost nothing compare to marching cost).",
    "Here is the heat map showing the cost of each 8x8 pixel blocks in fullscreen  (computed here[url]https:\/\/www.shadertoy.com\/view\/ltfBzN[\/url] ).\nColor scale:\nBlue: < 25%*average.  Green\/yellow : average cost. Violet : > 200%*average.\n[img]https:\/\/img4.hostingpics.net\/pics\/919673rainbow.png[\/img]\n- Why is the left side more costly than the right side ?\n- Silhouettes are costly. Could we do some \"backface culling\" ? (ignoring backsided distances) \n[img]https:\/\/img4.hostingpics.net\/pics\/308010heatmap8.png[\/img]",
    "its very nice, as usual, but very slow alos on my gpu, 3.5fps snif",
    "oh wow, it's like animated photograph!",
    "indeed it's precisely\nvec3 col = textureLod( iChannel0, q, log2(coc) ) \nwith coc as defined line 31\n",
    "a very cheap version of the Depth of Field using MIPmap (cheap in cost and quality ;-) ):\n\n    float depth =  texture( iChannel0, q).w;\n    vec3 col = textureLod( iChannel0, q, clamp(depth-2.,0.,3.)).rgb;\n\n(and set MIPmap for bufA)",
    "Beautiful scene, iq! Is it possible to implement separable blur for a few more FPS?",
    "So Pretty!! Amazing as always.",
    "Hey iq, I've just noticed your intercept loop could be 100 and your calcShadow loop < 50 or less. Not to mention the 25 loops of the mapGrass stuff where a large percent of it gets discarded anyway.",
    "@lamogui If you want it webGL 1 compatible just replace all 2x2 by 2 and all 3x3 by 3. I don't know why iq has done that, probably part of an experiment.",
    "Doesn't compile on firefox with Nvidia 780 Ti\n\nLine 153 mat2x2 : no matching overloaded function found\nLine 686 mat3x3 : syntax error \n\n\n",
    "Looks awesome iq! It's running at 30 fps on my Titan X (windows-chrome).",
    "Perfect!",
    "Looks like the moss and grass are the killers (they even totally killed my machine...) :)\nIn the k-loop at line 300, set the upper limit to \"1\" for 50% speedup without much visual impact.",
    "Wow! This level of quality is simply amazing... Almost photographic.",
    "I'm curious: do you use some BBbox or sphereBox before testing intersection with the ladybird and mushroom ? or all the cost is spent on the grass anyway ? \n( I dream of a way to have a heat map giving the cost of each pixel, or anything close ).",
    "funny, I recognized the style before seeing the name ;-) . \n\ngorgeous, but 3-4\" of compilation and 1.5 fps, though.",
    "Such realism. Does it fly? :octopusballoon:",
    "Looks great. I would have stopped once I had a nice looking ladybug. That's a lot of different stuff. :)",
    "Gorgeously exquisite rendering. Considering how long it'd normally take to render a scene like this, I'd say it's running pretty quickly. By the way, I like how you randomized the grass direction with the \"reflect\" vector.",
    "Perfect coloring btw!",
    "You already know what I think. Sad it only gives me 2fps.\nI think the for loops inside the for loops hurt the performance for me.",
    "Impressive as always ! Those mushrooms look so good !! ",
    "Wow dude, that is insanely good!",
    "In the UK we confusingly call them [url=http:\/\/www.ladybird-survey.org\/what_is.aspx]Ladybirds[\/url]\nLovely rendering IQ, nice work. And I like the 'worldTo' transforms - very neat.",
    "did the bug just move its hands?",
    "Fantastic job iq!",
    "phew!!! supernatural! a photograph couldn't look as real ;-)"
  ],
  "date": [
    "1651777699",
    "1627493823",
    "1626804251",
    "1626727519",
    "1622500709",
    "1612603255",
    "1612020190",
    "1612018765",
    "1611426818",
    "1587286944",
    "1555027756",
    "1550777583",
    "1531591166",
    "1530761255",
    "1529400029",
    "1529400007",
    "1520947032",
    "1520724609",
    "1520724503",
    "1516722795",
    "1512445884",
    "1512260428",
    "1511999207",
    "1511977074",
    "1511773218",
    "1511534424",
    "1511467514",
    "1511445049",
    "1511439004",
    "1511393742",
    "1511393332",
    "1511388995",
    "1511348024",
    "1511346029",
    "1511339300",
    "1511330575",
    "1511325075",
    "1511275223",
    "1511270757",
    "1511270724",
    "1511259006",
    "1511257343",
    "1511247787",
    "1511237536",
    "1511219585",
    "1511218724",
    "1511218361",
    "1511218297",
    "1511211950",
    "1511211617",
    "1511211234",
    "1511210861",
    "1511203512",
    "1511202685",
    "1511201954",
    "1511201846",
    "1511188526",
    "1511187297",
    "1511180688",
    "1511179042",
    "1511178722",
    "1511173110",
    "1511168179",
    "1511167474",
    "1511167249",
    "1511165707",
    "1511163533",
    "1511159895",
    "1511159342",
    "1511159321",
    "1511154599",
    "1511150192",
    "1511143118",
    "1511141058",
    "1511137909",
    "1511133462"
  ],
  "username": [
    "ollj",
    "hiPeeps124816",
    "Dave_Hoskins",
    "hiPeeps124816",
    "iq",
    "alwaysmine",
    "FabriceNeyret2",
    "iq",
    "Velctor",
    "FabriceNeyret2",
    "ShadowFlare",
    "technobaboo",
    "marsipan",
    "eclectic",
    "yuletian",
    "yuletian",
    "metalim",
    "etale_cohomology",
    "etale_cohomology",
    "jcyuan",
    "MacSlow",
    "BlurBusters",
    "zproxy",
    "tetsuo",
    "ingagard",
    "jt",
    "slerpy",
    "rs",
    "834144373",
    "FabriceNeyret2",
    "iq",
    "iq",
    "Dave_Hoskins",
    "dr2",
    "FabriceNeyret2",
    "smkgames",
    "iq",
    "FabriceNeyret2",
    "rs",
    "rs",
    "PauloFalcao",
    "pellicus",
    "FabriceNeyret2",
    "iq",
    "FabriceNeyret2",
    "FabriceNeyret2",
    "FabriceNeyret2",
    "dila",
    "FabriceNeyret2",
    "FabriceNeyret2",
    "aiekick",
    "kuvkar",
    "FabriceNeyret2",
    "FabriceNeyret2",
    "stb",
    "GregRostami",
    "Dave_Hoskins",
    "Dave_Hoskins",
    "lamogui",
    "Nesvi7",
    "knarkowicz",
    "dr2",
    "rigel",
    "FabriceNeyret2",
    "FabriceNeyret2",
    "dr2",
    "otaviogood",
    "Shane",
    "ingagard",
    "ingagard",
    "balkhan",
    "BigWIngs",
    "Dave_Hoskins",
    "zproxy",
    "DELTRON",
    "flockaroo"
  ],
  "userpicture": [
    "\/media\/users\/ollj\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/iq\/profile.png",
    "\/media\/users\/alwaysmine\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/iq\/profile.png",
    "\/img\/profile.jpg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/media\/users\/yuletian\/profile.png",
    "\/media\/users\/yuletian\/profile.png",
    "\/media\/users\/metalim\/profile.jpeg",
    "\/media\/users\/etale_cohomology\/profile.png",
    "\/media\/users\/etale_cohomology\/profile.png",
    "\/media\/users\/jcyuan\/profile.jpeg",
    "\/media\/users\/MacSlow\/profile.jpeg",
    "\/media\/users\/BlurBusters\/profile.png",
    "\/media\/users\/zproxy\/profile.png",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/media\/users\/slerpy\/profile.png",
    "\/media\/users\/rs\/profile.jpeg",
    "\/media\/users\/834144373\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/iq\/profile.png",
    "\/media\/users\/iq\/profile.png",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/smkgames\/profile.png",
    "\/media\/users\/iq\/profile.png",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/rs\/profile.jpeg",
    "\/media\/users\/rs\/profile.jpeg",
    "\/media\/users\/PauloFalcao\/profile.jpeg",
    "\/media\/users\/pellicus\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/iq\/profile.png",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/dila\/profile.png",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/aiekick\/profile.jpeg",
    "\/media\/users\/kuvkar\/profile.png",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/stb\/profile.jpeg",
    "\/media\/users\/GregRostami\/profile.jpeg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/media\/users\/lamogui\/profile.png",
    "\/media\/users\/Nesvi7\/profile.png",
    "\/media\/users\/knarkowicz\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/rigel\/profile.png",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/otaviogood\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/media\/users\/balkhan\/profile.jpeg",
    "\/media\/users\/BigWIngs\/profile.jpeg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/media\/users\/zproxy\/profile.png",
    "\/img\/profile.jpg",
    "\/media\/users\/flockaroo\/profile.jpeg"
  ],
  "id": [
    "WdV3zz",
    "3ll3Wr",
    "ttf3RM",
    "WtfGR7",
    "WsSXWm",
    "Ws2GWm",
    "3sjGW1",
    "3s23Dh",
    "Ws23Rm",
    "MstBz2",
    "Ml2czR",
    "4tfyW4",
    "4sByDK",
    "XsjyRt",
    "Xd2czy",
    "4sjczy",
    "MdlcDr",
    "XdsyDn",
    "4slyDn",
    "4lKSRt",
    "XlGSzh",
    "4tKXzR",
    "MttXWl",
    "4ldSDs",
    "4t3SDl",
    "MtcXDX",
    "4tcSDf",
    "Xl3SWf",
    "Xl3XDX",
    "Xt3XWX",
    "XlcSWX",
    "Xl3SWX",
    "MldSW2",
    "MltSW2",
    "lldSDj",
    "lttSDj",
    "lldXWj",
    "XttSW2",
    "XldXDj",
    "4tdXDj",
    "4ltSDj",
    "4ttSDj",
    "XldSWj",
    "4ltSWj",
    "4ttSWj",
    "XttSWj",
    "MlcXD2",
    "llcXD2",
    "ll3XD2",
    "Mt3XD2",
    "llcSD2",
    "Ml3SD2",
    "llcXW2",
    "ll3XW2",
    "Mt3XW2",
    "lt3XW2",
    "llcSDj",
    "ll3SDj",
    "ltcXWj",
    "Ml3XWj",
    "ll3XWj",
    "Mt3XWj",
    "Ml3SWj",
    "lt3SWj",
    "4lcXD2",
    "4l3XD2",
    "Xt3XD2",
    "XlcSD2",
    "4tcSD2",
    "XtcSD2",
    "4lcXW2",
    "4t3XW2",
    "4lcSW2",
    "XlcSW2",
    "XtcSW2",
    "Xl3SW2"
  ],
  "hidden": [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ]
}
