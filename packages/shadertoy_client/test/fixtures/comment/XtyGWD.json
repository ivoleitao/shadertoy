{
    "text": [
      "Incredible ! Needs a default camera movement for me to make a youtube render",
      "no caustics, duh. its computationally complex, and usually only poorly approximated\/faked\nhttps:\/\/www.shadertoy.com\/results?query=caustics",
      "I am in awe, how did you get this to be so pretty? and is it doing caustics by chance?",
      "Aha, or does it?\n\n...\n\nNo, it doesn't. Thanks - removed.",
      "'fIndex' appears to do nothing...",
      "Oops - depth of field was a bit broken. Should be a bit better now.",
      "So good!",
      "Thanks Fabrice. The main thing affecting the look of the dirt is that it affects the material fSmoothness which varies the spread and intensity of the specular highlight. It does affect the albedo and transparency too but they have less of an impact on the overall look.",
      "Really nice, in every aspects !\nI'm curious: how is done the dirt aspect ? is it really just channel2 modulating the albedo of a transparent layer ? (the result is so effective !)",
      "Thanks for the nice comments!\nThanks Hamneggs, yes I tested it in VR since I wrote the shader description. I've updated the comment now.\nIronically I starting writing this shader thinking about making a framework that would let me make something fast for VR and then got sidetracked thinking about transparency and eventually ended up with something quite slow (for VR)! Oh well.\nI've adapted a lot of my shaders to work in VR. [url=https:\/\/www.shadertoy.com\/view\/MdBXR3]Jack-o'-lantern[\/url] and [url=https:\/\/www.shadertoy.com\/view\/MsXXWH]Red Cells[\/url] work quite nicely fullscreen.\nI'd still like to make a nice and fast shadertoy scene specifically for VR sometime though.",
      "Incredible! Great feel of first cg demos.",
      "VR works and the scaling is perfect! This is one of the most convincing things I've seen in VR. The only downside is that at full resolution (err... full screen) I get a grand total of <= 2 fps with a gtx1080. \nAlso the bottom of the bowl is really dirty. You might want to get something to clean it. :)",
      "this is even running somewhat fine on an LG G5. well done!",
      "Wow this is realtime with all that prettiness; nice.",
      "Superb raytracer. Looks like the party was quite messy :) ",
      "The material \/ reflection \/ refraction \/ intersection math is all a bit funky but I'm happy with the result :)\n\nDave_Hoskins \/ flockaroo - Previously I was only casting a reflected ray from the first intersection. I've changed the shader now so that a reflected ray is cast for the first intersection and also if the surface has no transparency or in the case of total internal reflection. I think it has picked up the edge-of-bowl and underside of liquid cases which were not reflecting anything before.\n\nollj - Oops, yes PI was defined twice as I had left a copy of the distance function from one of my very old shaders ([url=https:\/\/www.shadertoy.com\/view\/Msl3Rn]Chains and Gears[\/url]) pasted in there. The RotateX() etc. functions were all part of that code too but were unused. Yes the \"stack\" is now more of a queue. I kept its name as it started out as a stack and I didn't rename it when the usage changed. [i]\"no clue why you think a stack is needed were accumulators would have done nicely\"[\/i] - well, because that would not handle ray branching from reflection [i]and[\/i] refraction at each intersection which was what I was investigating in this shader. This shader is an evolution of Buffer B code in [url=https:\/\/www.shadertoy.com\/view\/MttGz4][SH16B] Mach 1[\/url] which accumulated reflected rays exactly like you suggest.\n",
      "the fluid in the glass is a nice touch",
      "Very nice!",
      "is there any total reflection considered? the water surface in the glass from below seems completely black. maybe thats where the light is lost... ?!",
      "It looks absolutely great. Can I ask how many internal reflections there inside the edge of the bowl? It looks quite dark so I presume a lot of light is lost.",
      "I'm pretty happy with this. Thanks for posting it. I figured someone would eventually emulate a recursively raymarched scene on a stack... unless someone else on here has already done it. It compiles and runs at 10fps on my oldest computer, which is pretty good for that machine. \n\nWith multiple ray examples, I've been taking the easy way out and avoiding recursion altogether by only performing reflection when refraction isn't possible. On abstract scenes, you can almost get away with it. I've tried to do things properly at the first intersection, then launch into the loop on the refractive pass, but that doesn't look quite right either. Either way, there are always performance issues... Of course, it's all relative. I can remember a time when I would have been thrilled to trace a single sphere with just one reflective bounce on a 256 by 256 pixel grid at 2 FPS - or a sizzling 8 FPS with adaptive subsampling. :)",
      "Looks really good. Nice realism.",
      "Wow! Very pretty!!",
      "#define BLUR_TAPS 0\nline 6 in [image], disables the deph of field post processing that hides a lot of cthe common raymarching artefacts while scattering reflections and reducing moire without any bloom by just adding a few iterations of simple functions, very efficient.\n\ninstead just modify its parameters, alternatively set line 16\n float fAperture = sin(iGlobalTime)*2.;\nfor a nice drtunk effect that emphazizes the dept of field effect.",
      "I am impressed with how good the edges of everything look.",
      "good and close to the limit of my 2013 hardware, 13fps.  stacks are lists. you define #PI==kPI twice.\n\nno clue why you think a stack is needed were accumulators would have done nicely.\nthat comes down to translating a recussive function to a forLoop with accumulators were the accumulators are parameters to calculate thefinal color of a fragment, and each iteration modifies the accumulator instead of adding parameters to a stack, as in \nhttps:\/\/www.shadertoy.com\/view\/4td3Dj\n\n\/\/generally, any arrays are begging for loops, eg:\nRayInfo_Clear() and RayStack_Reset() seem to only be needed initially, so i can reduce:\nRayInfo RayStack_Get( int index ){    \n\tfor( int a=0; a<8; a++ )\n      if ( index == a) return rayStack[a];\n        }}\/\/since GL_AS unrolls all forLoops anyways, smaller source code for slightly longer compile time.\n\n\n\/\/I used ths shader to benchmark:\n\/\/short swiveled 3d rotations, smaller code, apparently causes less fluctuating fps (on nvidia):\nmat2 r2(float r){float s=sin(r);float c=cos(r);return mat2(c,s,-s,c);}\/\/2d rotation in radians\n\/\/2d rotation on vec3 with swivel: [b]efore and [a]fter;\n#define r3(p,r,b,a) {vec3 q=p.b;return vec3(q.xy*r2(r),q.z).a;}\n#define r3b(p,r,b) r3(p,r,b,b)\n\/\/if (less than 3 get swiveled) BeforeSwivel==AfterSwivel -> r2b, special case of r3;\n\/\/else () BeforeSwivel!=AfterSwivel -> r3\n#define icir in vec3 p,in float r\nvec3 RotateZ(icir)r3b(p,r,xyz)\nvec3 RotateY(icir)r3b(p,r,xzy)\nvec3 RotateX(icir)r3(p,r,yzx,zxy)",
      "Awesome :)",
      "wow, even with some wine :) and i do like the stained floor - how bout some lipstick or fingerprints on the glass ;)"
    ],
    "date": [
      "1616201980",
      "1605546093",
      "1605541022",
      "1486741454",
      "1486739987",
      "1486732569",
      "1486590847",
      "1486574553",
      "1486570998",
      "1486548778",
      "1486539341",
      "1486508737",
      "1486459628",
      "1475311550",
      "1475180589",
      "1474979060",
      "1474760212",
      "1474652497",
      "1474649984",
      "1474647816",
      "1474609141",
      "1474605998",
      "1474599983",
      "1474598099",
      "1474589159",
      "1474583179",
      "1474577114",
      "1474560463"
    ],
    "username": [
      "ttoinou",
      "ollj",
      "Pjbomb2",
      "P_Malin",
      "Dave_Hoskins",
      "P_Malin",
      "demofox",
      "P_Malin",
      "FabriceNeyret2",
      "P_Malin",
      "knarkowicz",
      "Hamneggs",
      "GottZ",
      "KylBlz",
      "shau",
      "P_Malin",
      "dila",
      "Duke",
      "flockaroo",
      "Dave_Hoskins",
      "Shane",
      "otaviogood",
      "iq",
      "ollj",
      "cubby208",
      "ollj",
      "Jacoby",
      "flockaroo"
    ],
    "userpicture": [
      "\/media\/users\/ttoinou\/profile.jpeg",
      "\/media\/users\/ollj\/profile.jpeg",
      "\/img\/profile.jpg",
      "\/media\/users\/P_Malin\/profile.jpeg",
      "\/media\/users\/Dave_Hoskins\/profile.jpeg",
      "\/media\/users\/P_Malin\/profile.jpeg",
      "\/media\/users\/demofox\/profile.jpeg",
      "\/media\/users\/P_Malin\/profile.jpeg",
      "\/media\/users\/FabriceNeyret2\/profile.jpeg",
      "\/media\/users\/P_Malin\/profile.jpeg",
      "\/media\/users\/knarkowicz\/profile.jpeg",
      "\/media\/users\/Hamneggs\/profile.jpeg",
      "\/img\/profile.jpg",
      "\/media\/users\/KylBlz\/profile.jpeg",
      "\/media\/users\/shau\/profile.png",
      "\/media\/users\/P_Malin\/profile.jpeg",
      "\/media\/users\/dila\/profile.png",
      "\/img\/profile.jpg",
      "\/media\/users\/flockaroo\/profile.jpeg",
      "\/media\/users\/Dave_Hoskins\/profile.jpeg",
      "\/img\/profile.jpg",
      "\/media\/users\/otaviogood\/profile.jpeg",
      "\/media\/users\/iq\/profile.png",
      "\/media\/users\/ollj\/profile.jpeg",
      "\/img\/profile.jpg",
      "\/media\/users\/ollj\/profile.jpeg",
      "\/img\/profile.jpg",
      "\/media\/users\/flockaroo\/profile.jpeg"
    ],
    "id": [
      "wdlXz7",
      "3ds3Rn",
      "3sl3Rn",
      "ld3SRf",
      "MscXzX",
      "ldcXzX",
      "Xd3XzX",
      "Xd3SzX",
      "XdcXRX",
      "MstXR2",
      "MddSR2",
      "lddXzj",
      "MsdSRj",
      "XdVGRh",
      "XdGGz1",
      "XsVGzz",
      "MdyGRR",
      "Xsy3zR",
      "4sG3zR",
      "4dG3zR",
      "ldt3Ds",
      "lsdGDs",
      "lstGDs",
      "Mdd3Ws",
      "lst3Ws",
      "MstGWs",
      "Mdd3Dl",
      "ldd3Wl"
    ],
    "hidden": [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  }