{
  "text": [
    "Love it. The metallic coloring is really beautiful.",
    "Very interesting",
    "Nice idea :D",
    "Like a dragon ;)",
    "Nice,  thought it was a closeup of a dragons' skin for a moment :D",
    "another great one",
    "I did this ages ago -- before the cube map feature was implemented. The method still stands, but I'd be inclined to generate a repeat texture on one of the fixed size 1024 by 1024 cube map faces, then render that, which would be so much more efficient. With a fixed size texture, switching to full screen wouldn't matter. Either way, you could make some amazing terrains, or whatever else by simply precalculating textures.",
    "\"tidiing\" if-statements can be faster, when both branches are roughly equally computatonally complex. otherwise they tend to be slower AND less precise, especially on older hardware.\n\nif statements tend to bee worse on GPU, breaking pupelines of mat16() calculations that can unify many functions into single operations and short pipelines.\nnewer GPU are more and more optimized to pipelining multiple instructions, to take only as long as its longest part. vector functions are more easily pilelined, by multiplying matrix transformations only once into identities that take almost the same memory, but much less run time.\n\nwithout if-statements you likely calculate more differentials, losing precision, but on newer GPU the longer pipelines easily are worth the performance gain for a minor loss in precision. IEEE float subtraction is less precise than IEEE float multiplication.\n\nthe most interesting thing about substituting if(c>0)a;else b;  statements with mix(a,b,step(c,0)) with step(c,0)*a+step(-c,0)*b;  and step(c,0) with (sign(c)*.5+.5) is that it ultimately leads you to the fuzzier bi-symmetrical binomial functions that define your shape. your binomial parameters end up [sign(a)*b+c values] being reduced to. you no longer have either symmetry or asymmetry, but experience the the fuzzy gradient between these two extremes; [url=\nhttps:\/\/www.shadertoy.com\/results?query=bisymmetry]bisymmetry[\/url]. \n\nAnd very often you see terms cancel each other out, or you see hints at how to generalize one function without extra computational cost, or how to specialize a function (with better performance due to less variables), while still being usable on many scales and domains.",
    "Nice idea and looks great. :octopus:",
    "Look quasi real !  :)",
    "Nice!\n\n(hey, the GL and UI part of the multipass wasn't easy either ;) )\n\nResize, custom resolution buffers and refresh rates will come with Multipass2.0. Just wait for it!",
    "Nice!",
    "A great shiny texture! Very cool.",
    "@dila\nI've been waiting for you to post more shaders. :)\n\n@jt\nA lot of your 2D examples would look really cool raymarched against a back plane. If you take away all the window dressing, this is nothing more than a basic distance equation:\n\nfloat map(vec3 p){ Plane_Distance - p.z - Get2DGreyscale(p.xy)*scale; }\n\nI've already tried out variations of yours and Fabrice's Sierpinski and Truchet examples, and I was pleased with the results.\n\n@FabriceNeyret2\nI originally had it animated, but I figured stone surfaces don't move. :) I like raymarching 2D textures against a back plane. Things like your animated sinusoidal warp example would work well, not to mention, your tiny maze code. I have a version of your hexagonal Truchet example that I'll release at some point.",
    "note that the height map could even be animated ;-)",
    "Cool!",
    "beautiful :)"
  ],
  "date": [
    "1597026469",
    "1595483860",
    "1592492686",
    "1592411909",
    "1592296040",
    "1590805454",
    "1589876364",
    "1502151397",
    "1452559412",
    "1452512123",
    "1452457588",
    "1452455869",
    "1452451227",
    "1452389920",
    "1452379314",
    "1452365050",
    "1452350437"
  ],
  "username": [
    "cloister",
    "mamalka89",
    "Maartia",
    "Dzudex",
    "maniek798",
    "jstrom2002",
    "Shane",
    "ollj",
    "fizzer",
    "iapafoto",
    "iq",
    "poljere",
    "Dave_Hoskins",
    "Shane",
    "FabriceNeyret2",
    "jt",
    "dila"
  ],
  "userpicture": [
    "\/img\/profile.jpg",
    "\/media\/users\/mamalka89\/profile.jpeg",
    "\/media\/users\/Maartia\/profile.png",
    "\/media\/users\/Dzudex\/profile.png",
    "\/media\/users\/maniek798\/profile.jpeg",
    "\/media\/users\/jstrom2002\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/fizzer\/profile.png",
    "\/media\/users\/iapafoto\/profile.png",
    "\/media\/users\/iq\/profile.png",
    "\/media\/users\/poljere\/profile.png",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/FabriceNeyret2\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/dila\/profile.png"
  ],
  "id": [
    "MlVyzh",
    "MltyW2",
    "Mttcz4",
    "4ltcz4",
    "4t3yz4",
    "ldKBzc",
    "lsGBDD",
    "4lK3R1",
    "4l2GDw",
    "4tB3Dm",
    "XlSGDw",
    "4tS3Ww",
    "ltj3DD",
    "lt23WW",
    "ltjGWW",
    "Xt23WD",
    "4ljGWD"
  ],
  "hidden": [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ]
}
