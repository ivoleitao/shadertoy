{
  "text": [
    "float Scale = 3.14159; gives some nice results\nI was thinking i would be cool if the model morphed over time...",
    "Incredible ! Would be nice to have a default camera movement though :) \nto render a video out of it",
    "Sweet!",
    "It's called the \"Mandalay fractal\" because it resembles one of the temples in Mandalay.",
    "amazing!",
    "ollj - the word \"shit\" was really unnecessary...",
    "Perfect! I wonder what will happen, when \"young\" kids start to play with this stuff. :)",
    "wow how i missed this one, very cool. ( a lot of spam here...)",
    "I think there's a tear in my eye",
    "[This comment has been hidden by the shader author]",
    "[This comment has been hidden by the shader author]",
    "[This comment has been hidden by the shader author]",
    "i got my quaternionShitTogether and my \"breakthroughs\" of a quaternion camera that moves trough fractal\/distorted space are:\n\na lot like [MdV3Wz] ,but with different camera and sligthly changed collider\nhttps:\/\/www.shadertoy.com\/view\/4tSyRz\n\nlater variant,with spartial distortion, dynamiceps-p\u00fcrecision, reflection and bad phong:\nhttps:\/\/www.shadertoy.com\/view\/MlByWh",
    "i thought about adjusting the avatar size to the distanceTosurface, too.\nits kinda how googleMapsVR changes your size (distance between your eyes) so that your feet always touhh the ground of the planet, relative to the distance betwene exes and spheroid-surface. the higher your eyes are above ground, the smaller everything appears to be relative to yourself.\n\nthe side effect is that you turn into godzilla by jumping off a skyscraper. so this has its discontinuities and nausea inducing moments.\ntherefore googleMapsVR needs a patch for movement, it blurs peripheral vision to avoid nausea from accellerations and scale changes in VR space. its a nice compromise and great UI.\nthis drawback is not worth it for a fractal explorer, or are they?",
    "you are demigod ",
    "@davidjonsson It's not a zoom. :) I'd rather people just flew it and hit what-ever was in the way. .  .",
    "Nice! Suggestion: Adjust speed to be proportional to distance in forward direction. ",
    "Really nice controls and collision detection! Can't believe the collisions work so well on such a complex fractal",
    "Awesome! Love the atmosphere.  ",
    "@ollj You're welcome to copy it and put your own 'shit together' on it!",
    "i want a 2nd lightsource, circling around the camera, to be able to see anything in the darker cave areas.",
    "i prefer high fps over antialiasing of fractals that by thgeir recursions defy antialiasing.",
    "please get your (quaternion) camera rotation shit together:\nquaternion code on this page (and linked pages there) should do:\nhttp:\/\/www.euclideanspace.com\/maths\/algebra\/realNormedAlgebra\/quaternions\/transforms\/index.htm\nbut your shadertoy likely does not benefit from quaternion code and should just multiply matrices (of AxisAngle rotations).\n\nI like to think of ANY rotation as if it is an AxisAngle rotation because it is easy to model in euclidean space. I am not a savant who knows a matrices rotation by looking at it!\nany rotation in 3d comes down to AxisAngle, you translate points around an axis by an angle (in radians)\nAn axisAngle rotation is a vec4\nit translates to a mat3 rotation matrix (and back).\nAs usual, multiplying 2 rotation matrices returns a rotation matrix that is identical to applying the 2 matrices in the same order.\nthis is non-commutative, order matters just as it does when you divide.\n---\na camera() function can be defined by 3 point parameters:  position, target, up-direction.\nmost simple (shadertoy) camera functions use these parameters (and fragment.xy), \nbecause they are intuitive and simple functions to return RayDirection (and RayPosition).\n\nThat RayDirection is then multiplied|rotated by the rotation matrix that you get from the methods below:\n---\ninterruption:\nThere are other \"camera()\" functions that take (position and an AxisAngle rotation (and fragment.xy)) as parameters to orient the camera to rotate a camera by an angle around an axis.\nbut these are less intuitive, less modifiable, more elegant, and require more knowledge about rotations in 3d.\nsuch functions directly take your rotation as axisAngle. their internal rotation basically adds one more rotation to the cameras orientation, set by fragment.xy\nyou may notice that you can build such a camera() function by understanding \"matrix rotation solution\"\n---\nto get a rotation (composed of a sum of rotations) to rotate a point by it....:\n\nmatrix rotation solution (better|easier for summing <4 rotations)\n- 1st: convert AxisAngle rotation to mat3 rotation matrix\n- 2nd: matrix multiplications to merge rotations\n- 3rd: multiply vector with merged rotation matrix to translate a point to its rotated point\n\nquaternion rotation solution (better for summing >3 rotations)\n- 1st: \"Converting the AxisAngle rotation into a quaternion\"\n- 2nd: quaternion multiplications (the quaternion equivalent to matrix multiplication)\n   ... quaternion multiplication is only half as complex as matrix multiplication\n- 3rd: apply quaternion to translate a point to its rotated position: \n   ... converting the quaternion to a rotation matrix should be fastest on GPUs. \n   ... but there are 2 different approaches without matrices.\n   ... It basically adds a bit of complexity that the \"matrix rotation solution\" does not have.\n---- \nwhy quaternions:\nmax3*mat3 multiplication is 9* dot().\nquaternion*quaternion is almost only half as many multiplications and additions and functionally identical, just represented differently.\nbeware tat quaternions, by storing the same rotations with less values, more quickly accumulate rounding errors.\n\nfor newer GPUS not using quaternions can easily calculate just as fast as not using them.\nbut using quaternions in long kinematic chains is definitely less computationally complex, likely saving energy, likely keeping a gui cooler.\n\nyour shadertoy code likely does not need quaternion functions, because it rarely sums more than 3 rotations,where matrix is faster and more precise.\nbut if you do add more than 3 rotations, the quaternion code below is likely faster:\n\/\/of course it is also bulkier in source code than just multiplying matrices.\n----------------------------------\n\/\/quaternion functions are untested and could contains typos:\n\n\/\/return quaternion of normalized(!) axisAngle: a.xyz=axis a.w=angle\nvec4 aaToQuat(vec4 a){return vec4(a.xyz*sin(a.w*.5),cos(a.w*.5));}\n  \n\/\/return quaternion of axisAngle (after normalizing Axis): a.xyz=axis a.w=angle\nvec4 aaToQuatN(vec4 a){return aaToQuat(vec3(a.xyz\/length(a.xyz),a.w));}\n \n\/\/quaternion normalize\nvec4 quatNorm(vec4 q){return q\/length(q);}\n\/\/quaternion multiplications tend to lose accuracy, you chose how often you normalize them.\n\/\/normalizing of course adds rounding errors.\n\n\/\/get conjugate quaternion\nvec4 conjugate(Quat4d q){vec4 r=q; r.xyz=-q.xyz;return r;}\n\n\/\/transform|rotate point p by quaternion q, \"like\" an axis angle rotation with axis trough (0,0)\nvec3 QuatTrans(vec3 p,vec4 q){float x=q.x;float y=q.y; float z=q.z; float w=q.w;\/\/shortcuts\n \/\/return vec3(\n \/\/   w*w*p.x+2.*y*w*p.z-2*z*w*p.y+   x*x*p.x+2.*y*x*p.y+2.*z*x*p.z-   z*z*p.x-y*y*p.x,\n \/\/2.*x*y*p.x+   y*y*p.y+2*z*y*p.z+2.*w*z*p.x-   z*z*p.y+   w*w*p.y-2.*x*w*p.z-x*x*p.y,\n \/\/2.*x*z*p.x+2.*y*z*p.y+  z*z*p.z-2.*w*y*p.x-   y*y*p.z+2.*w*x*p.y-   x*x*p.z+w*w*p.z);\n \/\/above function likely performs slower on GPUs than below function:\n return p1*QuatToMat3(q);}\n\n\/\/a (likely faster on gpu) method is to transform the quaternion to its matrix form:\n\n\/\/return mat3 transformation matrix of quaternion q, \"like\" an axis angle rotation with axis trough (0,0)\nmat3 QuatToMat3(vec4 q){return mat3(vec3 s=q.xyz*w.xyz*2.;\n vec3 x=2.*vec3(q.x*q.y,q.x*q.z,q.x*q.w);vec3 w=2.*vec3(q.y*q.z,q.y*q.w,q.z*q.w);\n \/\/i am not too sure if buffering all these values in 2 vec3 makes it faster.\n return mat3(1.-s.y-s.z,   x.x-w.z,x.y+w.y,\n                x.x+w.z,1.-s.x-s.z,w.x-x.z,\n                x.y-w.y,   w.x+x,z,1.-s.x-s.y);}\n\/\/there are different approaches to this identity:\n\/\/see http:\/\/www.euclideanspace.com\/maths\/geometry\/rotations\/conversions\/quaternionToMatrix\/index.htm\n\nfloat maf(float a,float b, float c){return fmad(a,b,c);\/\/less percision, more speed\n\/\/return mad(a,b,c);\/\/explicit mad(), because we do not trust the compiler to be smart!\nreturn a*b+c;}\/\/let it be implicit, but with explicit order!\n\/\/explicit \"mad()\" or fmad()\n\n\/\/quaternion multiplication is not commutative\nquatMul(vec4 q1,vec4 q2){return vec4(\n maf(q1.x,q2.w,(q1.y*q2.z))-maf(q1.z,q2.y,(q1.w*q2.x)),\n maf(q1.y,q2.w,(q1.z*q2.x))-maf(q1.x,q2.z,(q1.w*q2.y)),\n maf(q1.x,q2.y,(q1.z*q2.w))-maf(q1.y,q2.x,(q1.w*q2.z)),\n -q1.x*q2.x-q1.y*q2.y      -maf(q1.z,q2.z,(q1.w*q2.w)));\n \/\/above should be identical to code below:\n \/\/ q1.x*q2.w+q1.y*q2.z-q1.z*q2.y+q1.w*q2.x,\n \/\/-q1.x*q2.z+q1.y*q2.w+q1.z*q2.x+q1.w*q2.y,\n \/\/ q1.x*q2.y-q1.y*q2.x+q1.z*q2.w+q1.w*q2.z,\n \/\/-q1.x*q2.x-q1.y*q2.y-q1.z*q2.z+q1.w*q2.w)\n ;}\/\/product of 2 quaternion rotations is identical of 2 rotations being executed one after another.\n\/\/this often accumulates rounding errors to a point were you need to normalize the quaternion a lot!\n---\nexerpt:\n\"second life\" uses quaternions for anything. it doesn't have a vec4 type, it just has vec3 and \"quaternion\", force feeding you quaternion rotation and converting Euler- to quaternion-rotation.\n\"second life\" wikis and open-source scripts have some interesting solutions for quaternion questions\nsuch as \"why the hell does this plane rotate completely randomly\"",
    "Hey Shane, thanks for the comment. If you're replacing the fractal, don't forget you have to do it in 'Buf B' AND 'Image.'",
    "Great atmospheric scene. Love the brooding sky.\n\nThe \"Scene\" equation seems to do a better job on this particular scene than other setups. I tried a few different algorithms, combinations, tricks, etc, and they all fell short.",
    "That's pretty great - I love the feeling of flying through an endless apcololyptic wasteland",
    "Wow :)",
    "The define at the top will enable anti-aliasing. It doesn't slow it down too much, because of the first pass (Buf B) already marching forward 2x2 pixels into the scene. ",
    "PERFECT!!",
    "Awesome!",
    "Super :love: fractal and lightening are wonderfull",
    "Thanks - yes, I enjoy flying too! :)",
    "Great fun to fly around these Dave!"
  ],
  "date": [
    "1616187108",
    "1614620972",
    "1581934589",
    "1581731824",
    "1581319528",
    "1581144672",
    "1581055003",
    "1561372839",
    "1540517425",
    "1538126259",
    "1538126236",
    "1538126211",
    "1538126181",
    "1538123545",
    "1526229594",
    "1522431918",
    "1522428224",
    "1480836669",
    "1479265226",
    "1471795635",
    "1471728740",
    "1471728581",
    "1471727837",
    "1456337928",
    "1454381760",
    "1454361622",
    "1454330644",
    "1454260950",
    "1454254139",
    "1454253991",
    "1454248324",
    "1454192106",
    "1454189854"
  ],
  "username": [
    "dot23",
    "ttoinou",
    "Armaciek",
    "jarble",
    "Nina9",
    "Logos",
    "cyperus",
    "aiekick",
    "Plento",
    "ollj",
    "ollj",
    "ollj",
    "ollj",
    "ollj",
    "akhgary",
    "Dave_Hoskins",
    "davidjonsson",
    "KylBlz",
    "zackpudil",
    "Dave_Hoskins",
    "ollj",
    "ollj",
    "ollj",
    "Dave_Hoskins",
    "Shane",
    "trapzz",
    "jt",
    "Dave_Hoskins",
    "GregRostami",
    "XT95",
    "iapafoto",
    "Dave_Hoskins",
    "eiffie"
  ],
  "userpicture": [
    "\/img\/profile.jpg",
    "\/media\/users\/ttoinou\/profile.jpeg",
    "\/media\/users\/Armaciek\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/Nina9\/profile.png",
    "\/media\/users\/Logos\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/aiekick\/profile.jpeg",
    "\/media\/users\/Plento\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/media\/users\/KylBlz\/profile.jpeg",
    "\/media\/users\/zackpudil\/profile.jpeg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/ollj\/profile.jpeg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/img\/profile.jpg",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/media\/users\/GregRostami\/profile.jpeg",
    "\/media\/users\/XT95\/profile.png",
    "\/media\/users\/iapafoto\/profile.png",
    "\/media\/users\/Dave_Hoskins\/profile.jpeg",
    "\/media\/users\/eiffie\/profile.jpeg"
  ],
  "id": [
    "tdlSR7",
    "3sBGDt",
    "ldyyzG",
    "lsyyDm",
    "lsGyW1",
    "XdVcDR",
    "XsycWz",
    "Xt2cWt",
    "ldsBDX",
    "lsXfRj",
    "MdXfRj",
    "ldXfRj",
    "MsfBRj",
    "MdXBRj",
    "Ms2czh",
    "MsscRB",
    "ldscRB",
    "lsyGWV",
    "Xdy3z3",
    "Msd3Rj",
    "Xdd3R2",
    "4st3R2",
    "XsdGR2",
    "4lfXW8",
    "Ml2GWK",
    "4t2GDV",
    "4t2GDK",
    "llBGWK",
    "llSGWK",
    "MtSGWK",
    "4lB3DV",
    "4tBGDK",
    "4lSGDK"
  ],
  "hidden": [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ]
}
