{
    "ver": "0.1",
    "info": {
        "id": "7tfBzs",
        "date": "1651434718",
        "viewed": 4187,
        "name": "Color processing",
        "username": "sinvec",
        "description": "I really don't know what it is...",
        "likes": 63,
        "published": 1,
        "flags": 0,
        "usePreview": 0,
        "tags": [
            "sdf",
            "glow"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "float vmax(vec2 v) {return max(v.x, v.y);}\nfloat fBox2(vec2 p, vec2 b) {return vmax(abs(p)-b);}\n\nmat2 rot(float a) {float s=sin(a), c=cos(a); return mat2(c,s,-s,c);}\nfloat wf1(vec2 p){return sin(p.x) + cos(p.y);}\n\nfloat cappedCylinder(vec3 p, float h, float r){\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r, h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec3 gl = vec3(0.);\nfloat gl1 = 0.;\nvec3 gl2 = vec3(0.);\n\nvec3 map(vec3 p) {\n    vec3 r = vec3(0.);\n    vec3 d = vec3(0.);\n    p.xz *= rot(iTime * .5);\n    vec3 m = p;\n    p.xz *= rot(sin(-p.y * .5) * 1.1);\n    p.xz = abs(p.zx)-vec2(.8);\n    float i = sin(p.y * 3. + iTime * 10.) * .5 + .5;\n    float b = cappedCylinder(p,  5.5 , ((i - .5) * 2. * .3) * cos(p.y * .2));\n    gl += (.0004\/(.01+b*b)) * mix(vec3(1.,0.,1.), vec3(1.,1.,0.), p.y);\n    r.x = max(cappedCylinder(p, 2., .3 + .2 * i), -cappedCylinder(p, 3., .2 + .25 * i));\n    p.xz *= rot(p.y * 3. + iTime * 2.);\n    vec3 q = p;\n    q.xz *= rot(3.14\/2.);\n    if (fBox2(p.xy, vec2(.2, 10.)) < 0.) r.yz = vec2(3.,0.); \n    else if (fBox2(q.xy, vec2(.2, 10.)) < 0.) r.yz = vec2(4., 0.);\n    else r.yz = vec2(1.);\n    gl1 += (.000001\/(.000001+pow(r.x+.003, 2.)));\n    d.x = min(r.x, cappedCylinder(p, 8.5 , (.25 + (i - .5) * 2. * .15) * cos(p.y * .2)));\n    d.y = 2.;\n    if (r.x > d.x) r = d;\n    p = m;\n    d.x = length(p) - .45 - .1 * (sin(iTime * 10.) * .5 + .5);\n    gl2 += (.0006\/(.01+d.x*d.x)) * mix(vec3(1.,0.,1.), vec3(1.,1.,0.), m.y);\n    if (r.x > d.x) r = d;\n    p = m;\n    if (p.y > 0.) p.xz *= rot(.3);\n    p = abs(p);\n    p.zx *= rot(-3.14\/4.);\n    p.xy *= rot(-3.14\/4.);\n    p.y -= 1.;\n    q = p;\n    p.yx *= rot( sin(p.y * 3.14) * .3 );\n    d.x =  cappedCylinder(p, 1. , (.06 + (i - .5) * 2. * .04));\n    p = q; p.y -= 1.;\n    d.x = min(d.x, length(p) - .15 - .05 * (sin(iTime * 10. + 1.5) * .5 + .5));\n    gl2 += (.0003\/(.01+d.x*d.x)) * mix(vec3(1.,0.,1.), vec3(1.,1.,0.), -m.y);\n    d.y = 2.;\n    if (r.x > d.x) r = d;\n    return r;\n}\n\nconst vec2 e = vec2(.00035, -.00035);\nvec3 norm(vec3 po) {\n        return normalize(e.yyx*map(po+e.yyx).x + e.yxy*map(po+e.yxy).x +\n                         e.xyy*map(po+e.xyy).x + e.xxx*map(po+e.xxx).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) \/ iResolution.y;\n    vec3 ro = vec3(0.,3.,-6.),\n         rd = normalize(vec3(uv,1.)),\n         p, h;\n    rd.yz *= rot(-.4);\n    float t = 0.;\n    for(int i = 0; i < 120; i++) {\n         p = ro + rd * t;\n         h = map(p);\n         if (h.x<.0001||t>40.) {\n             if (h.z == 1.) h.x = abs(h.x) + .0001;\n             else break;\n         };\n         t += h.x * .7;\n    }\n    vec3 ld = vec3(0., 1.,0.);\n    vec3 ld1 = vec3(3., 3., 0.);\n    ld1.xz *= rot(iTime * .3); \n    vec3 col = vec3(.1);\n    if (h.x<.0001) {\n        if (h.y == 1.) col = vec3(.1, .3, .2);\n        if (h.y == 2.) col = vec3(.7,.7,.3);\n        if (h.y == 3.) col = vec3(.5, .9, .5);\n        if (h.y == 4.) col = vec3(.5, .5, .9);\n    }\n    col = mix(col, vec3(.1, .3, .2), clamp(gl1,0.,1.));\n    col += gl;\n    col += gl2;\n    fragColor = vec4(col,1.0);\n}",
            "name": "Image",
            "description": "",
            "type": "image"
        }
    ]
}