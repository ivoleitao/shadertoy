  {
    "ver": "0.1",
    "info": {
      "id": "WlXXDH",
      "date": "1562686833",
      "viewed": 3052,
      "name": "Undulating Columns",
      "username": "fizzer",
      "description": "Some columns formed by stacked toruses with alternating additive \/ subtractive CSG.",
      "likes": 59,
      "published": 1,
      "flags": 0,
      "usePreview": 0,
      "tags": [
        "torus",
        "columns"
      ],
      "hasliked": 0
    },
    "renderpass": [
      {
        "inputs": [
          {
            "id": "XsX3zn",
            "filepath": "\/media\/a\/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png",
            "previewfilepath": "\/media\/ap\/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png",
            "type": "cubemap",
            "channel": 0,
            "sampler": {
              "filter": "mipmap",
              "wrap": "clamp",
              "vflip": "false",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          },
          {
            "id": "XsBSR3",
            "filepath": "\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png",
            "previewfilepath": "\/media\/ap\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png",
            "type": "texture",
            "channel": 1,
            "sampler": {
              "filter": "mipmap",
              "wrap": "repeat",
              "vflip": "true",
              "srgb": "false",
              "internal": "byte"
            },
            "published": 1
          }
        ],
        "outputs": [
          {
            "id": "4dfGRr",
            "channel": 0
          }
        ],
        "code": "#define AA 1\n\nconst float pi = 3.14159265358979323;\n\nfloat pieceDist(vec3 p, float th, int n, float r, float rs)\n{\n    vec2 delta = vec2(sin(th), cos(th));\n    float y = 0.;\n    float d = dot(vec2(delta.y, -delta.x), vec2(length(p.xz) - r, p.y - y));\n    float r0 = 0.;\n    float l = length(p.xz);\n    for(int i = 0; i < n; ++i)\n    {\n        r0 = (.07 + cos(float(i + n) + iTime \/ 2.) * .04) * rs;\n        y += delta.y * r0;\n        r += delta.x * r0;\n        float td = length(vec2(l - r, p.y - y)) - r0;\n        if((i & 1) == 0)\n        \td = min(d, td);\n        else\n            d = max(d, -td);\n        y += delta.y * r0;\n        r += delta.x * r0;\n    }\n    return max(d, p.y - y);\n}\n\nvec4 piece(vec3 p, vec2 org, float th, int n, float r, float rs)\n{\n    return vec4(org.x, org.y, pieceDist(p - vec3(org.x, 0, org.y), th, n, r, rs), r);\n}\n\nvec4 u(vec4 a, vec4 b)\n{\n    return a.z < b.z ? a : b;\n}\n\nvec4 scene(vec3 p)\n{\n    vec4 res = vec4(0, 0, 1e4, 0);\n    res = u(res, piece(p, vec2(0), -.2, 13, .5, 1.));\n    res = u(res, piece(p, vec2(1.5, 0), -.0,9, .2, 1.));\n    res = u(res, piece(p, vec2(-.7, -.9), -.0, 8, .3, 1.3));\n    res = u(res, piece(p, vec2(-1.5, .1), -.5, 5, .8, 2.));\n    res = u(res, piece(p, vec2(.5, .7), -.05, 12, .2, 1.));\n    res.z = min(res.z, p.y);\n    return res;\n}\n\nfloat map(vec3 p)\n{\n    return scene(p).z;\n}\n\n\/\/ Soft shadow for SDF, from IQ and Sebastian Aaltonen:\n\/\/ https:\/\/www.shadertoy.com\/view\/lsKcDD\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, int technique, float s )\n{\n    float res = 1.0;\n    float t = mint;\n    float ph = 1e10; \/\/ big, such that y = 0 on the first iteration\n\n    for( int i=0; i<55; i++ )\n    {\n        float h = map( ro + rd*t );\n\n        \/\/ traditional technique\n        if( technique==0 )\n        {\n            res = min( res, s*h\/t );\n        }\n        \/\/ improved technique\n        else\n        {\n            \/\/ use this if you are getting artifact on the first iteration, or unroll the\n            \/\/ first iteration out of the loop\n            \/\/float y = (i==0) ? 0.0 : h*h\/(2.0*ph); \n\n            float y = h*h\/(2.0*ph);\n            float d = sqrt(h*h-y*y);\n            res = min( res, s*d\/max(0.0,t-y) );\n            ph = h;\n        }\n\n        t += h;\n\n        if( res<0.0001 || t>tmax ) break;\n\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\/\/ Forward-difference SDF gradients.\nvec3 distG(vec3 p)\n{\n    vec2 e = vec2(1e-4, 0);\n    return vec3(map(p + e.xyy), map(p + e.yxy), map(p + e.yyx)) -\n        vec3(map(p - e.xyy), map(p - e.yxy), map(p - e.yyx));\n}\n\nvoid render( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord \/ iResolution.xy * 2. - 1.;\n\tuv.x *= iResolution.x \/ iResolution.y;\n    \n\tvec3 ro = vec3(-.3, .8, 4.2), rd = normalize(vec3(uv, -3.));\n    \n    float t = 2.5;\n    for(int i = 0; i < 110; ++i)\n    {\n        float d = map(ro + rd * t);\n        if(abs(d) < 1e-4)\n            break;\n        if(t > 10.)\n            break;\n        t += d;\n    }\n    \n    vec3 rp = ro + rd * t;\n    \n    vec3 n = normalize(distG(ro + rd * t));\n    vec3 r = reflect(rd, n);\n    vec3 ld = normalize(vec3(-1, 1, 1));\n    float sh = calcSoftshadow(ro + rd * t, ld, 1e-2, 1e3, 0, 2.);\n    float sh2 = calcSoftshadow(ro + rd * t, r, 1e-2, 1e3, 0, 10.);\n    \n    vec3 diff = .5 + .5 * cos(rp.y * vec3(3, 2, 5) * .5 + vec3(.6, 0, .6));\n    \n    vec4 sp = scene(rp);\n    diff = mix(vec3(1), diff, smoothstep(.1, .12,abs(fract(.1 + atan(rp.z - sp.y, rp.x - sp.x) \/ pi * 5.) - .5)));\n    \n    if(abs(rp.y) < 1e-2 || t > 9.)\n        diff = vec3(.5, .75, 1.) * smoothstep(-.1, .15, distance(rp.xz, sp.xy) - sp.a);\n    \n    fragColor.rgb = diff;\n    \n    fragColor.rgb *= mix(.5, 1., sh) * vec3(max(0., .6 + .4 * dot(n, ld)));\n    \n    float fr = pow(clamp(1. - dot(n, -rd), 0., 1.), 2.);\n    \n    fragColor.rgb += textureLod(iChannel0, r, 5.).rrr * fr * sh2;\n    fragColor.rgb += smoothstep(.4, .5, dot(ld, r)) * fr * sh2 * 1.6;\n    \n    fragColor.rgb *= .85;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor.a = 1.;\n    fragColor.rgb = vec3(0);\n    \n    \/\/ Anti-aliasing loop\n    for(int y = 0; y < AA; ++y)\n        for(int x = 0; x < AA; ++x)\n        {\n            vec4 rc;\n            render(rc, fragCoord + vec2(x, y) \/ float(AA));\n            fragColor.rgb += clamp(rc.rgb, 0., 1.);\n        }\n    \n    fragColor.rgb \/= float(AA * AA);\n    fragColor.rgb \/= (fragColor.rgb + 1.5)*.43;\n    fragColor.rgb = pow(clamp(fragColor.rgb, 0., 1.), vec3(1. \/ 2.2)) +\n        \t\t\t\ttexelFetch(iChannel1, ivec2(fragCoord) & 1023, 0).rgb \/ 200.;\n}",
        "name": "Image",
        "description": "",
        "type": "image"
      }
    ]
  }
