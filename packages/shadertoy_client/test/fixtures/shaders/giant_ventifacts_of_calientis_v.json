{
    "ver": "0.1",
    "info": {
        "id": "7dGfWW",
        "date": "1658172941",
        "viewed": 3333,
        "name": "Giant Ventifacts Of Calientis V",
        "username": "msm01",
        "description": "Science Fiction rules. Read more.\n\nThank you for coming to my TED talk.",
        "likes": 95,
        "published": 1,
        "flags": 64,
        "usePreview": 0,
        "tags": [
            "2d",
            "space",
            "planet",
            "stars",
            "rocks",
            "art",
            "spaceship",
            "ventifacts"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [
                {
                    "id": "XsXGRn",
                    "filepath": "\/media\/a\/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg",
                    "previewfilepath": "\/media\/ap\/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg",
                    "type": "texture",
                    "channel": 1,
                    "sampler": {
                        "filter": "mipmap",
                        "wrap": "repeat",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                },
                {
                    "id": "4sXGRn",
                    "filepath": "\/media\/a\/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg",
                    "previewfilepath": "\/media\/ap\/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg",
                    "type": "texture",
                    "channel": 2,
                    "sampler": {
                        "filter": "mipmap",
                        "wrap": "repeat",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                },
                {
                    "id": "XsX3Rn",
                    "filepath": "\/media\/a\/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg",
                    "previewfilepath": "\/media\/ap\/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg",
                    "type": "texture",
                    "channel": 0,
                    "sampler": {
                        "filter": "mipmap",
                        "wrap": "repeat",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                },
                {
                    "id": "lt2XRD",
                    "filepath": "https:\/\/soundcloud.com\/skaven252\/a-defender-rises",
                    "previewfilepath": "https:\/\/soundcloud.com\/skaven252\/a-defender-rises",
                    "type": "musicstream",
                    "channel": 3,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 0
                }
            ],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "\/\/ It's time for another episode of your favorite show :\n\/\/ -----------------------------------------------------\n\/\/ E P I C         S P A C E         A D V E N T U R E S\n\/\/         ...with Rangiroa and the Commander !\n\/\/\n\/\/ EPISODE 457 :  \"Giant Ventifacts Of Calientis V\"\n\/\/\n\/\/ -----------------------------------------------------\n\/\/\n\/\/ In the last episode, the Commander has finally found the\n\/\/ Lost City Of Sandara ! But the place is dead. It's\n\/\/ been abandonned for centuries. Crushed by the discovery,\n\/\/ with no hope left, our hero repairs a rocket-powered\n\/\/ ground-effect vehicle to cross the Great Desert of\n\/\/ Calientis V : 5000 miles of scorching hot sand mixed with\n\/\/ salts and sulfur. Meanwhile, our favorite robot girl\n\/\/ has been captured by the Consortium ! Rangiroa, Queen\n\/\/ of the Space Pirates, Lunar Lady of Tycho, is being\n\/\/ brought before the evil Dr Zen for interrogation...\n\/\/\n\/\/ Will our hero save her ? Time is running out. And\n\/\/ the Great Desert is a very old place, full of weird\n\/\/ ruins, unspeakable madness, floating temples, giant\n\/\/ ventifacts, fractal mandeltraps, ghosts, and\n\/\/ blood-thirsty horrors from a billion years ago...\n\/\/\n\/\/ [Opening] starts !\n\n\/\/ Technical notes :\n\/\/\n\/\/ Wanted to make \"mesas\". Ended up doing strange looking\n\/\/ ventifacts. Then added space art items. It all started\n\/\/ coming together.\n\/\/ \"I like it when no plan comes together...\"\n\/\/ I honestly don't now what to say except that this is\n\/\/ more \"painting\" than real actual \"coding\", and that I\n\/\/ enjoy this process tremendously.\n\/\/ The more time goes, the more I understand why Iq opened\n\/\/ that can of worms a long time ago. So thank you for that.\n\/\/\n\/\/ Read the real adventures of Rangiroa and the Commander\n\/\/ here :\n\n\/\/ https:\/\/baselunaire.fr\/?page_id=554\n\n\/\/ 18 episodes already. The concept : a fake lunar radio show\n\/\/ around 2035 that presents and promotes real Demoscene musics.\n\/\/ Why ? Well because the Scene is great, and Scene musicians\n\/\/ are the best, and we should talk about it more often,\n\/\/ THAT'S WHY !\n\n\/\/ The music for this shader is \"A Defender Rises\" by Skaven252.\n\/\/ You can download or listen to it on Soundcloud here :\n\/\/ https:\/\/soundcloud.com\/skaven252\/a-defender-rises\n\/\/ This guy rules. Seriously.\n\n\/\/ Feel free to use this shader to illustrate your latest scifi story\n\/\/ online, make a video for a music you just composed, or anything.\n\/\/ Just give proper credit, and provide a link to this page.\n\/\/ Creative Commons 3.0, etc...\n\nmat2 r2d( float a ){ float c = cos(a), s = sin(a); return mat2( c, s, -s, c ); }\nfloat noise(vec2 st) { return fract( sin( dot( st.xy, vec2(12.9898,78.9)))*43758.5453123 ); }\n\n#define TimeVar 1.5f*iTime \/\/ Let you easily tweak the global speed\n\n\/\/ Basic Geometry Functions.\n\nfloat sdCircle(in vec2 p, float radius, vec2 pos, float prec)\n{\n      return smoothstep(0.0,prec,radius - length(pos-p));\n}\n\n\/\/ This belongs to Iq...\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n      vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n      vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n      vec2 pq0 = v0 - e0*clamp( dot(v0,e0)\/dot(e0,e0), 0.0, 1.0 );\n      vec2 pq1 = v1 - e1*clamp( dot(v1,e1)\/dot(e1,e1), 0.0, 1.0 );\n      vec2 pq2 = v2 - e2*clamp( dot(v2,e2)\/dot(e2,e2), 0.0, 1.0 );\n      float s = sign( e0.x*e2.y - e0.y*e2.x );\n      vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                       vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                       vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n      return -sqrt(d.x)*sign(d.y);\n}\n\n\/\/ This belongs to a nice shadertoy coder whose name I lost.\n\/\/ Please tell me if you read this !\nfloat metaDiamond(vec2 p, vec2 pixel, float r, float s)\n{\n      vec2 d = abs(r2d(s*TimeVar)*(p-pixel));\n      return r \/ (d.x + d.y);\n}\n\n\/\/ That's it guys, everything else is mine, as you can\n\/\/ see by the sudden drop in quality. :D\n\nvec4 drawAtmoGradient(in vec2 v_p)\n{\n      return mix( vec4(0.0,0.3,0.7,1.0), vec4(1.0,0.8,0.7,1.0), 1.0-v_p.y + 0.7);\n}\n\n\/\/ Ultra-super-simplified 1D noise with smooth please ?\n\/\/ We don't need more, really !\nfloat fbm(in vec2 v_p)\n{\n      float VarX1 = 0.0;\n      float VarX2 = 0.0;\n      float VarD0 = 0.0;\n      float VarS1 = 0.0;\n      float Amplitude = 1.0\/2.0;\n      float Periode   = 2.0;\n      VarX1 = Amplitude*floor( Periode*v_p.x);\n      VarX2 = Amplitude*floor( Periode*v_p.x + 1.0);\n      VarD0 = fract( Periode*v_p.x);\n      VarS1 += mix( noise(vec2(VarX1)), noise(vec2(VarX2)), smoothstep( 0.0, 1.0, VarD0));\n      return VarS1;\n}\n\nfloat GetMesaMaxHeight(in vec2 v_p)\n{\n      float MH = 0.98\n               + 0.06*fbm(vec2(5.0*v_p.x + 0.25*TimeVar))\n               + 0.02*fbm(vec2(40.0*v_p.x + 2.0*TimeVar));\n      float Offset = 0.0;\n      if( fbm(vec2(10.0*v_p.x + 0.5*TimeVar)) > 0.30 )\n          Offset = -0.75*(fbm(vec2(10.0*v_p.x + 0.5*TimeVar)) - 0.30);\n      MH += Offset;\n      return MH;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 p = vec2( (iResolution.x\/iResolution.y)*(fragCoord.x - iResolution.x\/2.0) \/ iResolution.x,\n                    fragCoord.y \/ iResolution.y);\n\n     \/\/ Making the mouse interactive for absolutely no reason\n     float TiltX = -0.001*(iMouse.x - iResolution.x\/2.0);\n     float AltiY =  0.005*(iMouse.y - iResolution.y\/2.0);\n\n     \/\/ Propagating user-induced chaos...\n     p = p * (1.2 - 0.1*AltiY);\n     p *= r2d(TiltX);\n\n     \/\/ This, gentlemen, is our World : a single vector.\n     \/\/ Don't tell Elon, he's gonna freak out.\n     vec4 col = vec4(0.0,0.0,0.0,1.0);\n\n     \/\/ Here's an atmosphere so you can choke...\n     col = drawAtmoGradient(p + vec2(0.0,0.75));\n\n     \/\/ For 25 TimeVars, make the screen ondulate\n     \/\/ Like it's hot in the desert or something...\n     \/\/ Use iTime instead of TimeVar because whatever\n     \/\/ the speed of the desert, heat distorsion should stay realtime.\n     if( mod(TimeVar,50.0) < 25.0 ) p += vec2((0.0005 + 0.0005*fbm(vec2(0.2*iTime)))*sin(50.0*p.y - 25.0*iTime),0.0);\n\n     \/\/ Classic French cuisine : how to make croissants.\n     float FD1 = sdCircle(p,0.50,vec2(-0.70,1.0),0.01);\n     float DS1 = sdCircle(p,0.57,vec2(-0.75,1.0),0.07);\n     float Croissant1 = FD1 - DS1;\n     col += clamp(Croissant1,0.0,1.0);\n\n     \/\/ I'm a friendly guy : I offer you another croissant !\n     float FD2 = sdCircle(p,0.20,vec2(-0.75,0.75),0.01);\n     float DS2 = sdCircle(p,0.27,vec2(-0.79,0.74),0.07);\n     float Croissant2 = FD2 - DS2;\n     col += 0.3*FD2*texture(iChannel2,2.0*r2d(3.5)*p + vec2(0.003*TimeVar,0.0));\n     col += clamp(2.0*Croissant2,0.0,1.0);\n\n     \/\/ Okay you get a third one.\n     float FD3 = sdCircle(p,0.10,vec2( 0.80, 0.77),0.01);\n     float DS3 = sdCircle(p,0.16,vec2( 0.83, 0.76),0.07);\n     float Croissant3 = FD3 - DS3;\n     col += 0.3*FD3*texture(iChannel1,1.5*r2d(3.5)*p + vec2(0.001*TimeVar,0.0));\n     col += clamp(2.0*Croissant3,0.0,1.0);\n\n     \/\/ Trinary Star System + Some Modulation\n     float BV1 = 0.7 + 0.3*fbm(vec2(0.3*TimeVar         ));\n     float BV2 = 0.7 + 0.3*fbm(vec2(0.3*TimeVar + 250.0 ));\n     float BV3 = 0.5 + 0.5*fbm(vec2(0.3*TimeVar + 350.0 ));\n\n     \/\/ Star Cross (with gimbal-assist)\n     p += vec2(-0.5,-0.9);\n     p *= r2d(-TiltX);\n     col += metaDiamond( p, vec2( 0.0, 0.0), BV1*0.020, 0.0);\n     col += 0.5*smoothstep(0.08,0.0,abs(p.y))*smoothstep(0.0015,0.0,abs(p.x));\n     col += 0.5*smoothstep(0.08,0.0,abs(p.x))*smoothstep(0.0015,0.0,abs(p.y));\n     p *= r2d(3.14159\/4.0);\n     col += 0.5*smoothstep(0.05,0.0,abs(p.y))*smoothstep(0.0015,0.0,abs(p.x));\n     col += 0.5*smoothstep(0.05,0.0,abs(p.x))*smoothstep(0.0015,0.0,abs(p.y));\n     p *= r2d(-3.14159\/4.0);\n     p *= r2d( TiltX);\n     p -= vec2(-0.5,-0.9);\n\n     \/\/ Medium Star\n     p += vec2(-0.30,-1.05);\n     p *= r2d(-TiltX);\n     col += metaDiamond( p, vec2( 0.0, 0.0), BV2*0.005, 0.0);\n     p *= r2d( TiltX);\n     p -= vec2(-0.30,-1.05);\n\n     \/\/ Small Star\n     p += vec2(-0.25,-1.08);\n     p *= r2d(-TiltX);\n     col += metaDiamond( p, vec2( 0.0, 0.0), BV3*0.002, 0.0);\n     p *= r2d( TiltX);\n     p -= vec2(-0.25,-1.08);\n\n     if( p.y < 0.5 )\n     {\n         \/\/ Beneath 0.5 : The Salt Flats\n         col  = vec4(0.7,0.7,0.6,1.0);\n         col += 0.5*vec4(texture(iChannel2,vec2( 0.50*(p.x)\/((0.50-p.y)) + 4.0*TimeVar, log(0.50-p.y))));\n     }else{\n         \/\/ Above 0.5 : The mountains of \"New New Mexico\" (aka \"Calientis V\")\n         col = mix(col,\n                   vec4(0.74,0.74,0.9,1.0)*(0.5+0.2*texture(iChannel0,2.0*(p + vec2(0.02*TimeVar,0.0)))),\n                   smoothstep(0.005,0.0,p.y + 0.05*fbm(vec2(2.5*p.x + 0.05*TimeVar)) - 0.57));\n     };\n\n     \/\/ Moebius-like floating temple right in the middle of the desert.\n     \/\/ Because existential horror can strike anytime, anywhere. :p\n     \/\/ Dedicated to Arzak fans...\n     \/\/ Alternative title : \"Easy fake lame DIY 3D in your 2D scene : an introduction\"\n\n     vec4 Color1 = vec4(0.9,0.9,1.0,1.0) - 0.15*texture(iChannel0,vec2(0.01*p.x,p.y - 0.01*sin(0.4*TimeVar))).xxxx;\n     vec4 Color2 = vec4(0.7,0.7,1.0,1.0) - 0.15*texture(iChannel0,vec2(0.01*p.x,p.y - 0.01*sin(0.4*TimeVar))).xxxx;\n     vec4 Face1;\n     vec4 Face2;\n\n     \/\/ BOOM ! You didn't see anything... ... Oh shut up, Gandalf !\n     if( mod(0.005*TimeVar,0.08) < 0.04)\n     {\n         Face1 = Color1;\n         Face2 = Color2;\n     }else{\n         Face1 = Color2;\n         Face2 = Color1;\n     };\n\n     \/\/ The Moebius Rock floats. And sings.\n     \/\/ I can hear it. My dog can hear it.\n     \/\/ Why can't you ?!\n     float AltitudeMoebius = 0.550 + 0.01*sin(0.4*TimeVar);\n\n     p += vec2(mod(0.03*TimeVar,4.0) - 2.0,0.0);\n\n     \/\/ Top Pylon\n     col = mix(Face1,col,smoothstep(0.0,0.002,\n     sdTriangle(p,\n     vec2(-0.0200, AltitudeMoebius + 0.04),\n     vec2( 0.0200, AltitudeMoebius + 0.04),\n     vec2( 0.0000, AltitudeMoebius + 0.48) )));\n     col = mix(Face2,col,smoothstep(0.0,0.002,\n     sdTriangle(p,\n     vec2(-0.0200                          , AltitudeMoebius + 0.04),\n     vec2( 0.0200 - mod(0.005*TimeVar,0.04), AltitudeMoebius + 0.04),\n     vec2( 0.0000                          , AltitudeMoebius + 0.48) )));\n\n     \/\/ Bottom Tetrahedron\n     col = mix(0.9*Face1,col,smoothstep(0.0,0.002,\n     sdTriangle(p,\n     vec2(-0.0200, AltitudeMoebius + 0.03),\n     vec2( 0.0200, AltitudeMoebius + 0.03),\n     vec2( 0.0000, AltitudeMoebius - 0.02) )));\n     col = mix(0.9*Face2,col,smoothstep(0.0,0.002,\n     sdTriangle(p,\n     vec2(-0.0200                          , AltitudeMoebius + 0.03),\n     vec2( 0.0200 - mod(0.005*TimeVar,0.04), AltitudeMoebius + 0.03),\n     vec2( 0.0000                          , AltitudeMoebius - 0.02) )));\n\n     \/\/ Ghostly Beacons\n     col += metaDiamond( p, vec2( 0.0,AltitudeMoebius + 0.50), 0.001, 0.0);\n     col += vec4(1.0,0.0,0.0,1.0)*metaDiamond( p, vec2( 0.0,AltitudeMoebius + 0.52), 0.001, 0.0);\n\n     p -= vec2(mod(0.03*TimeVar,4.0) - 2.0,0.0);\n\n     if( p.y > 0.5 )\n     {\n         \/\/ Very strange method to make 2D \"mesas\". Not sure it actually makes sense.\n         \/\/ The final shapes are a bit pointy, which is fine for an extraterrestrial\n         \/\/ desert, I suppose. Less so for martian mesas... Ah, well. Next time, in\n         \/\/ another shader (incidentally I just figured out how to do it properly).\n         \/\/ Anyway, let's pretend these are \"giant ventifacts\".\n         float Inc = 1.0*p.x + 0.05*TimeVar; \/\/ Unit speed of Ventifacts relative to p.x (20:1 ratio)\n         float MesaMaxHeight = GetMesaMaxHeight(p);\n         float MesaLine = clamp( fbm(vec2(2.0*Inc + 0.005*fbm(vec2(80.0*p.y)))), 0.0, MesaMaxHeight);\n\n         \/\/ Make the Sand follow a curve that is (more or less) realistic\n         \/\/ Adding octaves, usual fbm impro stuff, you know the drill...\n         float SandLine = 0.480 + 0.100*fbm(vec2( 2.0*Inc))\n                                + 0.008*fbm(vec2(20.0*Inc))\n                                + 0.002*fbm(vec2(60.0*Inc));\n\n         \/\/ Basic Color + Vertically-stretched Texture + Horizontally-stretched Texture\n         vec4 MesaColors = vec4(1.0,0.8,0.7,1.0);\n         MesaColors += 0.5*texture(iChannel1,vec2(     Inc, 0.2*p.y));\n         MesaColors += 0.5*texture(iChannel1,vec2( 0.1*Inc,     p.y));\n\n         \/\/ Basic random shadows + slanted highlights...\n         MesaColors -= 0.35*smoothstep( 0.0, 1.0, fbm(vec2(40.0*Inc)) + fbm(vec2(15.0*p.y - 30.0*Inc)));\n\n         \/\/ More Shadows !\n         MesaColors = MesaColors*( 0.2 + 0.8*smoothstep( 0.0, 0.4, (MesaLine - SandLine)));\n\n         \/\/ Additional shadows at mesa's base.\n         float VerticalWeathering = 1.0;\n         VerticalWeathering *= (0.8+0.2*smoothstep(0.0,0.02,(p.y - 0.6 + 0.25*fbm(vec2(80.0*Inc)))));\n         MesaColors *= VerticalWeathering;\n\n         \/\/ Outputing mesas like big giant rotten teeth on a dead dragon's jaw...\n         col = mix( col, MesaColors, smoothstep(0.007,0.0,p.y - MesaLine));\n\n         \/\/ Adding highlights, because \"secondary reflections\", \"ambient occlusion\", etc\n         \/\/ (haha, yeah right)\n         col *= clamp(smoothstep(-0.15,0.0,p.y - MesaLine + 0.01*fbm(vec2(10.0*Inc))),0.5,1.0);\n\n         \/\/ Mesas shadows on the sand...\n         float SandShadows = 0.0;\n         \/\/ If we're in the shadow of a mesa, SandLine altitude should decrease (...feeling of volume)\n         if( SandLine < MesaLine ) SandLine = SandLine - 0.2*(MesaLine - SandLine);\n         \/\/ Defining SandColors. Adding some y-stretched texture to simulate local sandslides.\n         vec4 SandColors = 0.80*vec4(0.3,0.2,0.2,1.0)\n                         + 0.20*texture(iChannel0,vec2(2.0*Inc,0.1*p.y + 0.0));\n\n         \/\/ If we are in the shadow of a mesa\n         if( SandLine < MesaLine)\n         {\n             \/\/ on-the-fly logic, probably false, but\n             \/\/ just right enough to be useful.\n             \/\/ \"Paint-coding\", guys...\n             if( p.y > SandLine - (MesaLine - SandLine) )\n             {\n                 SandShadows = 0.7;\n             }else{\n                 SandShadows = 1.0;\n             };\n         }else{\n             SandShadows = 1.0;\n         };\n\n         \/\/ Outputing shaded sand dune, \"MY DUNE !\" haha\n         col = mix(col,SandShadows*SandColors,smoothstep(0.0025,0.0,p.y - SandLine));\n    };\n\n     vec2  ConsortiumShipPos = vec2( 2.0-mod(0.01*TimeVar + 1.0,4.0), -1.2);\n     float ConsortiumShipPrec = 0.0035;\n     vec4  HullColorFix = vec4(0.5,0.8,1.0,1.0);\n     vec4  HullColorTop;\n     vec4  HullColorBottom;\n\n\n     \/\/ Move ship to position !\n     p += ConsortiumShipPos;\n     \/\/ Zoom Zoom Zoom !\n     p *= 0.75;\n\n     \/\/ Tweaking Ship Colors to make them just right (i.e. blend into the sky).\n     HullColorTop    = HullColorFix*vec4(0.6,0.6,1.0,1.0) + 0.2*texture(iChannel0,vec2(2.0*p.x,0.1*p.y)).xxxx;\n     HullColorTop *= 1.2;\n     \/\/ Tweaking Ship Colors.\n     HullColorBottom = HullColorFix*vec4(0.8,0.8,1.0,1.0) + 0.4*texture(iChannel0,vec2(0.5*p.x,0.1*p.y)).xxxx;\n     HullColorBottom *= 0.6;\n\n     \/\/ Fusion-Drive Tail visible due to reaction mass impurities (grey water from comets).\n     if(p.x < 0.0) col += smoothstep(0.12,0.0,abs(0.2*p.x))*smoothstep(0.01,0.0,abs(p.y));\n\n     \/\/ How to draw a spaceship in six triangles : a tutorial.\n\n     \/\/ Forward part\n     col = mix(HullColorTop,col,smoothstep(0.0,ConsortiumShipPrec,\n     sdTriangle(p,\n     vec2( 0.145, 0.00),\n     vec2( 0.200, 0.01),\n     vec2( 0.355, 0.00) )));\n     col = mix(HullColorBottom,col,smoothstep(0.0,ConsortiumShipPrec,\n     sdTriangle(p,\n     vec2( 0.145, 0.00),\n     vec2( 0.200,-0.015),\n     vec2( 0.355, 0.00) )));\n\n     \/\/ Middle Part\n     col = mix(HullColorTop,col,smoothstep(0.0,ConsortiumShipPrec,\n     sdTriangle(p,\n     vec2( 0.000, 0.00),\n     vec2( 0.005, 0.01),\n     vec2( 0.150, 0.00) )));\n     col = mix(HullColorBottom,col,smoothstep(0.0,ConsortiumShipPrec,\n     sdTriangle(p,\n     vec2( 0.000, 0.00),\n     vec2( 0.005,-0.01),\n     vec2( 0.150, 0.00) )));\n\n     \/\/ Back Part\n     col = mix(HullColorTop,col,smoothstep(0.0,ConsortiumShipPrec,\n     sdTriangle(p,\n     vec2(-0.005, 0.00),\n     vec2( 0.010, 0.02),\n     vec2( 0.070, 0.00) )));\n     col = mix(HullColorBottom,col,smoothstep(0.0,ConsortiumShipPrec,\n     sdTriangle(p,\n     vec2(-0.005, 0.00),\n     vec2( 0.010,-0.02),\n     vec2( 0.070, 0.00) )));\n\n     \/\/ End tutorial. You're welcome. :D\n\n     \/\/ Fusion-Drive Glow (...keep this end at a distance)\n     p += vec2( 0.005,-0.002);\n     p *= r2d(-TiltX);\n     col += metaDiamond(p,vec2(0.0,0.0), 0.010, 0.0);\n     p *= r2d( TiltX);\n     p -= vec2( 0.005,-0.002);\n     \/\/ De-Zoom\n     p *= 1.0\/0.75;\n     \/\/ Back to normal p.\n     p -= ConsortiumShipPos;\n\n     \/\/ Le Hovercraft\n\n     vec2  HovercraftPos   = vec2(0.05  - 0.3*fbm(vec2(0.1*TimeVar)),-0.35);\n     float HovercraftTrail = 0.335;\n     float HovercraftBoost = 0.0;\n\n     \/\/ Shadow\n     col = mix(vec4(0.5),col,smoothstep(0.0,0.001,\n     sdTriangle(p + HovercraftPos + vec2( 0.0, 0.01 ),\n     vec2(-0.01+ 0.001*sin(2.0*TimeVar), 0.0050),\n     vec2(-0.01+ 0.001*sin(2.0*TimeVar),-0.0050),\n     vec2( 0.04- 0.001*sin(2.0*TimeVar), 0.000) )));\n\n     \/\/ Lifting Body\n     col = mix(vec4(0.5),col,smoothstep(0.0,0.001,\n     sdTriangle(p + HovercraftPos + vec2( 0.0,- 0.001*sin(2.0*TimeVar) ),\n     vec2(-0.01, 0.0050),\n     vec2(-0.01,-0.0050),\n     vec2( 0.04, 0.000) )));\n\n     \/\/ Vertical Tail\n     col = mix(vec4(0.4),col,smoothstep(0.0,0.001,\n     sdTriangle(p + HovercraftPos + vec2( 0.0,- 0.001*sin(2.0*TimeVar) ),\n     vec2(-0.010, 0.0050),\n     vec2(-0.015, 0.015),\n     vec2( 0.000, 0.0050) )));\n\n     \/\/ Cockpit Canopy\n     col = mix(vec4(0.2),col,smoothstep(0.0,0.001,\n     sdTriangle(p + HovercraftPos + vec2( 0.0,- 0.001*sin(2.0*TimeVar) ),\n     vec2( 0.000, 0.0050),\n     vec2( 0.005, 0.0000),\n     vec2( 0.025, 0.0010) )));\n\n     \/\/ Dust Trail\n     if( p.x < -0.05  + 0.3*fbm(vec2(0.1*TimeVar)) - 0.01 )\n         col += 0.1*smoothstep(0.0,0.01,p.y - HovercraftTrail)\n                   *smoothstep(0.035,0.0, p.y -0.015*abs(5.0*(p.x + HovercraftPos.x))\n                                                    *fbm(vec2(10.0*(p.x + HovercraftPos.x) + 10.0*TimeVar)) - 0.98*HovercraftTrail);\n     \/\/ Very lame yet mostly accurate thruster simulation.\n     \/\/ This shader is a disgrace to mathematics, exhibit 41 :\n     if( fbm(vec2(0.1*(TimeVar + 0.1))) - fbm(vec2(0.1*(TimeVar))) > 0.005)\n     {\n        \/\/ Haha rocket goes BRRRRRR !\n        HovercraftBoost = 0.005;\n     }else{\n        \/\/ Puff Puff Puff Puff Puff\n        HovercraftBoost = abs(0.003*sin(20.0*TimeVar));\n     };\n\n     \/\/ Rocket Blast\n     col += vec4(1.0,0.5,0.5,1.0)*metaDiamond(p + HovercraftPos + vec2(  0.015,- 0.0015*sin(2.0*TimeVar)),vec2( 0.0,0.0), HovercraftBoost, 10.0);\n\n     \/\/ A bit of dust in the air...\n     if( p.y > 0.5) col += 0.25*smoothstep(0.25,0.0,p.y - 0.1*fbm(vec2(2.0*p.x + 1.0*TimeVar)) - 0.5);\n\n     \/\/ Make a haze just above the ground in the distance.\n     col += 0.2*smoothstep(0.01,0.0,abs(p.y-0.5));\n\n     \/\/ For the last 25 TimeVars of a 50 TimeVars cycle...\n     if( mod(TimeVar,50.0) > 25.0 )\n     {\n         \/\/ Draw some Nasa camera crosses to look cool and realistic (hahahahaha)\n         if(mod(fragCoord.y + 200.0,400.0) > 399.0) if(mod(fragCoord.x + 50.0 + 200.0,400.0) < 100.0) col = vec4(0.2,0.2,0.2,1.0);\n         if(mod(fragCoord.x + 200.0,400.0) > 399.0) if(mod(fragCoord.y + 50.0 + 200.0,400.0) < 100.0) col = vec4(0.2,0.2,0.2,1.0);\n     };\n\n     \/\/ Lensflares ! Lensflares everywhere !\n     \n     \/\/ Big Star\n     \/\/ Let's compute Mesa's height at the Big Star's x-coordinate.\n     float NewMesaLine = clamp( fbm(vec2(2.0*(0.5 + 0.05*TimeVar)) + 0.005*fbm(vec2(80.0*0.9))),0.0,GetMesaMaxHeight(vec2(0.5,0.0)));\n\n     p += vec2(-0.5,-0.9);\n     p *= r2d(-TiltX);\n     col += 0.2\n               \/\/ If the mesa's top is above the Big Star, remove lensflare.\n               *smoothstep(0.0,0.01,0.9-NewMesaLine)\n               \/\/ If the Moebius Rock clips the Big Star, remove lensflare.\n               *smoothstep(0.0,0.01,abs(mod(0.03*TimeVar,4.0) - 2.0 + 0.5))\n               \/\/ Basic Hand-Made Linear 2D Lensflare\n               \/\/ the best kind, like granma used to...\n               *smoothstep(0.03,0.0,abs(p.y))\n               *smoothstep(2.00,0.0,abs(p.x));\n     \/\/ Circle around the Big Star. Not exactly JWST-worthy, I know.\n     \/\/ Look, I'm just doing my best, okay ?! :D\n     col += 0.1*smoothstep(0.0125,0.0,abs(sdCircle(p,0.05,vec2(0.0),0.07) - 0.0125))\n               *smoothstep(0.0,0.01,0.9-NewMesaLine)\n               *smoothstep(0.0,0.01,abs(mod(0.03*TimeVar,4.0) - 2.0 + 0.5));\n     p *= r2d( TiltX);\n     p -= vec2(-0.5,-0.9);\n\n     \/\/ Medium Star\n     p += vec2(-0.30,-1.05);\n     p *= r2d(-TiltX);\n     col += 0.1*smoothstep(0.01,0.0,abs(p.y))\n               *smoothstep(0.50,0.0,abs(p.x));\n     p *= r2d( TiltX);\n     p -= vec2(-0.30,-1.05);\n\n     \/\/ Small Star\n     p += vec2(-0.25,-1.08);\n     p *= r2d(-TiltX);\n     col += 0.1*smoothstep(0.01,0.0,abs(p.y))\n               *smoothstep(0.25,0.0,abs(p.x));\n     p *= r2d( TiltX);\n     p -= vec2(-0.25,-1.08);\n\n     \/\/ Every 25 TimeVars, pretend like you're watching through an Active SunShade\n     \/\/ that cancels heat distorsion through some kind of adaptative optics magic.\n     \/\/ Hey, it's the future after all.\n     if(mod(TimeVar,50.0) > 25.0) col *= vec4(1.0,0.8,0.7,1.0);\n\n     \/\/ HO MY GOD !\n     fragColor = col;\n}",
            "name": "Image",
            "description": "",
            "type": "image"
        }
    ]
}