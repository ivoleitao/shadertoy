{
    "ver": "0.1",
    "info": {
        "id": "WdBcRh",
        "date": "1586026686",
        "viewed": 3390,
        "name": "Pig Squad 9 Year Anniversary",
        "username": "bpfarrell",
        "description": "A Shader to celebrate the Portland Indie Game Squad's 9th Anniversary. Happy developing everyone!",
        "likes": 52,
        "published": 1,
        "flags": 0,
        "usePreview": 0,
        "tags": [
            "raymarch",
            "sdf",
            "pig",
            "portland",
            "indiegames"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "#define AUTO  \/\/Comment this line to gain mouse controll.\n\n#define MAX_STEPS 300\n#define SURF_DIST 1e-3\n#define MAX_DIST 100.\n#define float2 vec2\n#define float3 vec3\n#define float4 vec4\n#define lerp mix\n#define frac fract\n#define saturate(v) clamp(v,.0,.1)\n#define fmod mod\nfloat hash21(float2 p) {\n    p = frac(p * float2(233.34, 851.74));\n    p += dot(p, p + 23.45);\n    return frac(p.x * p.y);\n}\nfloat2 hash22(float2 p) {\n    float k = hash21(p);\n    return float2(k, hash21(p + k));\n}\nfloat sdSphere(float3 p, float s)\n{\n    return length(p) - s;\n}\n\nmat3x3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat3x3(\n        float3(c, 0, s),\n        float3(0, 1, 0),\n        float3(-s, 0, c)\n    );\n}\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) \/ k, 0.0, 1.0);\n    return lerp(d2, d1, h) - k * h * (1.0 - h);\n}\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 + d1) \/ k, 0.0, 1.0);\n    return lerp(d2, -d1, h) + k * h * (1.0 - h);\n}\nfloat sdPlane(float3 p, float4 n)\n{\n    return dot(p, n.xyz) + n.w;\n}\nfloat sdRoundBox(float3 p, float3 b, float r)\n{\n    float3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;\n}\n\nfloat sdPig(float3 p,float jump) {\n    p*= 1.0 + vec3(-0.2,0.2,-0.2)*(0.5+0.5*sin(iTime*10.0+3.5));\n    float3 j = float3(.0, -jump, .0);\n    p.x = abs(p.x);\n    float g = opSmoothUnion(sdRoundBox(p+j, float3(1.), 0.1), sdSphere(p + j, 1.2), 1.); \/\/Main Body\n    g = min(g,\n            opSmoothUnion(\n                sdRoundBox(p - float3(0, -0.25, 0.9) + j, float3(0.4, 0.3, 0.5), 0.1),\n                sdSphere(p - float3(0, -0.25, 0.9) + j, .5), .5) \/\/nose\n           );\n    float s = sdRoundBox(p - float3(.2, -0.25, 1.5) + j, float3(0.03, 0.13, 0.2), 0.05); \/\/nostrile\n    s = min(s, sdRoundBox(p - float3(.4, 0.5, 1.3) + j, float3(0.05, 0.2, 0.05), 0.05)); \/\/eye\n    return opSmoothSubtraction(s, g, 0.02);\n}\n\nfloat sdBridge(float3 p, float t) {\n    float gap = 2.4;\n    float tread = min(fmod(t, 3.141529 * 2.) \/ 3.141529, 1.) * gap;\n    float backScale = smoothstep(3.141529 * 2., 3.141529, fmod(t, 3.141529 * 2.));\n    float frontScale = smoothstep(0., 3.141529, fmod(t, 3.141529 * 2.));\n    float g = min(\n        sdRoundBox(p - float3(0., -2.3 - ((1. - backScale) * 3.), gap * -1. - tread), float3(backScale), 0.1),\n        sdRoundBox(p - float3(0., -2.3, 0. - tread), float3(1.), 0.1)\n    );\n    g = min(g, sdRoundBox(p - float3(0., -2.3, gap - tread), float3(1.), 0.1));\n    float alternate = fmod(floor(t \/ (3.141529 * 2.)), 2.);\n    p = (rotateY(alternate > 0.5 ? (frontScale - 1.) : (1. - frontScale))* p);\n    return min(g, sdRoundBox(p - float3(0., -2.3, gap * 2. - tread), float3(frontScale), 0.1));\n\t\t\t}\nfloat GetDist(float3 p) {\n    \n    float t = iTime * 10.;\n    \/\/float2 id = floor(p.xz * 0.2);\n    \/\/p.xz = frac(p.xz * 0.2) *5. - 2.5;\n    \/\/float2 h = hash22(id);\n    float g = sdPig(p, max(sin(iTime * 10. \/*+ h.x * 3.141529 * 2.*\/), .0));\n    \/\/g = min(g, sdPlane(p-float3(0,-1.3,0), float4(0, 1, 0, 0)));\n    g = min(g, sdBridge(p, t));\n    \n    return g;\n}\nfloat CalculateAO(float3 p, float3 n) {\n    float d = 0.6;\n    return smoothstep(0.,d,GetDist(p + n*d));\n}\nfloat Raymarch(float3 ro, float3 rd) {\n    float dO = 0.;\n    float dS;\n    for (int i = 0; i < MAX_STEPS; i+=1) {\n        float3 p = ro + rd * dO;\n        dS = GetDist(p);\n        dO += dS;\n        if (dS<SURF_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nfloat3 GetNormal(float3 p) {\n    float2 e = float2(1e-2, 0.);\n\n    float3 n = GetDist(p) - float3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n\n    return normalize(n);\n}\n\nfloat4 scene (float3 ro,float3 rd)\n{\n\n    float4 col = float4(0);\n\n    float d = Raymarch(ro, rd);\n    float3 light1Dir = normalize(float3(.8, 1, .2));\n    float3 light1Color = float3(1, 0.9, 0.9);\n\n    if (d < MAX_DIST) {\n        float3 p = ro + d * rd;\n        float3 n = GetNormal(p);\n        float ground = smoothstep(-1.18, -1.19, p.y);\n        col.rgb = lerp(float3(1, .7, .8), float3(0.5, 0.6, 0.9), ground);\n        col.rgb += pow(saturate(dot(reflect(rd, n), light1Dir)), .6) * light1Color * 0.3;\n        col.rgb += n * 0.15;\n        col.rgb *= CalculateAO(p, n) * 0.4 + 0.6;\n    }\n    else\n    {\n        float3 bg = lerp(float3(1, .7, .8), float3(0.5, 0.6, 0.9), rd.x);\n        bg = lerp(bg, float3(.8, .5, .8), rd.y);\n        col.rgb = bg;\n    }\n    return col;\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n\tvec2 m = iMouse.xy\/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 5, -5);\n    if(iMouse.w<0.5){\n    \tro.yz *= Rot(-0.4);\n    \tro.xz *= Rot(iTime*0.5+2.);\n    }else{\n        ro.yz *= Rot(-m.y*3.14+1.);\n    \tro.xz *= Rot(-m.x*6.2831);\n    }\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    \n    fragColor = scene(ro,rd);\n}",
            "name": "Image",
            "description": "",
            "type": "image"
        }
    ]
}