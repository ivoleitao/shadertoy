{
    "ver": "0.1",
    "info": {
        "id": "4tByz3",
        "date": "1511132429",
        "viewed": 41898,
        "name": "Ladybug",
        "username": "iq",
        "description": "A ladybug on a mushroom. It renders really slowly. Sorry for that, this is not meant to be rendered with raymarching really, but well, here we are. I'll get a pass later",
        "likes": 188,
        "published": 3,
        "flags": 32,
        "tags": [
            "procedural",
            "3d",
            "raymarching",
            "distancefield"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [
                {
                    "id": "4dXGR8",
                    "filepath": "\/media\/previz\/buffer00.png",
                    "previewfilepath": "\/media\/previz\/buffer00.png",
                    "type": "buffer",
                    "channel": 0,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                }
            ],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "\/\/ Created by inigo quilez - iq\/2017\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\/\/ You can buy a metal print of this shader here:\n\/\/ https:\/\/www.redbubble.com\/i\/metal-print\/Ladybug-by-InigoQuilez\/39845563.0JXQP\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord \/ iResolution.xy;\n    \n    \n    \/\/ dof\n    const float focus = 2.35;\n\n    vec4 acc = vec4(0.0);\n    const int N = 12;\n\tfor( int j=-N; j<=N; j++ )\n    for( int i=-N; i<=N; i++ )\n    {\n        vec2 off = vec2(float(i),float(j));\n        \n        vec4 tmp = texture( iChannel0, q + off\/vec2(800.0,450.0) ); \n        \n        float depth = tmp.w;\n        \n        vec3  color = tmp.xyz;\n        \n        float coc = 0.05 + 12.0*abs(depth-focus)\/depth;\n        \n        if( dot(off,off) < (coc*coc) )\n        {\n            float w = 1.0\/(coc*coc); \n            acc += vec4(color*w,w);\n        }\n    }\n    \n    vec3 col = acc.xyz \/ acc.w;\n\n    \n    \/\/ gamma\n    col = pow( col, vec3(0.4545) );\n    \n    \/\/ color correct - it seems my laptop has a fucked up contrast\/gamma seeting, so I need\n    \/\/                 to do this for the picture to look okey in all computers but mine...\n    col = col*1.1 - 0.06;\n    \n    \/\/ vignetting\n    col *= 0.8 + 0.3*sqrt( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y) );\n\n    fragColor = vec4(col,1.0);\n}",
            "name": "Image",
            "description": "",
            "type": "image"
        },
        {
            "inputs": [
                {
                    "id": "XsX3Rn",
                    "filepath": "\/media\/a\/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg",
                    "previewfilepath": "\/media\/ap\/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg",
                    "type": "texture",
                    "channel": 1,
                    "sampler": {
                        "filter": "mipmap",
                        "wrap": "repeat",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                }
            ],
            "outputs": [
                {
                    "id": "4dXGR8",
                    "channel": 0
                }
            ],
            "code": "\/\/ Created by inigo quilez - iq\/2017\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n#define MAT_MUSH_HEAD 1.0\n#define MAT_MUSH_NECK 2.0\n#define MAT_LADY_BODY 3.0\n#define MAT_LADY_HEAD 4.0\n#define MAT_LADY_LEGS 5.0\n#define MAT_GRASS     6.0\n#define MAT_GROUND    7.0\n#define MAT_MOSS      8.0\n#define MAT_CITA      9.0\n\nvec2 hash2( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(338.5453123,278.1459123,191.1234)); }\n\nfloat sdEllipsoid( in vec3 pos, in vec3 cen, in vec3 rad )\n{\n#if 1\n    vec3 p = pos - cen;\n    float d = length(p\/rad) - 1.0;   \n    return d * min(min(rad.x,rad.y),rad.z);\n#else\n    vec3 p = pos - cen;\n    float k0 = length(p\/rad);\n    float k1 = length(p\/(rad*rad));\n    return k0*(k0-1.0)\/k1;\n#endif    \n}\n    \nvec2 sdLine( in vec3 pos, in vec3 a, in vec3 b )\n{\n    vec3 pa = pos - a;\n    vec3 ba = b - a;\n   \n    float h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n    \n    return vec2( length(pa-h*ba), h );\n}\n\nvec2 sdLineOri( in vec3 p, in vec3 b )\n{\n    float h = clamp( dot(p,b)\/dot(b,b), 0.0, 1.0 );\n    \n    return vec2( length(p-h*b), h );\n}\nvec2 sdLineOriY( in vec3 p, in float b )\n{\n    float h = clamp( p.y\/b, 0.0, 1.0 );\n    \n    return vec2( length(vec3(p.x,p.y-b*h,p.z)), h );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25\/k;\n}\n\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25\/k;\n}\n\nfloat length2(in vec2 p ) { return dot(p,p); }\nfloat length2(in vec3 p ) { return dot(p,p); }\n\nvec3 rotateY( in vec3 p, float t )\n{\n    float co = cos(t);\n    float si = sin(t);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n    return p;\n}\n\nvec3 rotateX( in vec3 p, float t )\n{\n    float co = cos(t);\n    float si = sin(t);\n    p.yz = mat2(co,-si,si,co)*p.yz;\n    return p;\n}\nvec3 rotateZ( in vec3 p, float t )\n{\n    float co = cos(t);\n    float si = sin(t);\n    p.xy = mat2(co,-si,si,co)*p.xy;\n    return p;\n}\n\n\n\/\/==================================================\n\n#define ZERO (min(iFrame,0))\n\n\/\/==================================================\n\nvec3 mapLadyBug( vec3 p, float curmin )\n{\n    \n    float db = length(p-vec3(0.0,-0.35,0.05))-1.3;\n    if( db>curmin ) return vec3(10000.0,0.0,0.0);\n    \n    float dBody = sdEllipsoid( p, vec3(0.0), vec3(0.8, 0.75, 1.0) );\n    dBody = smax( dBody, -sdEllipsoid( p, vec3(0.0,-0.1,0.0), vec3(0.75, 0.7, 0.95) ), 0.05 );\n    dBody = smax( dBody, -sdEllipsoid( p, vec3(0.0,0.0,0.8), vec3(0.35, 0.35, 0.5) ), 0.05 );\n  \tdBody = smax( dBody, sdEllipsoid( p, vec3(0.0,1.7,-0.1), vec3(2.0, 2.0, 2.0) ), 0.05 );\n  \tdBody = smax( dBody, -abs(p.x)+0.005, 0.02 + 0.1*clamp(p.z*p.z*p.z*p.z,0.0,1.0) );\n\n    vec3 res = vec3( dBody, MAT_LADY_BODY, 0.0 );\n\n    \/\/ --------\n    vec3 hc = vec3(0.0,0.1,0.8);\n    vec3 ph = rotateX(p-hc,0.5);\n    float dHead = sdEllipsoid( ph, vec3(0.0,0.0,0.0), vec3(0.35, 0.25, 0.3) );\n    dHead = smax( dHead, -sdEllipsoid( ph, vec3(0.0,-0.95,0.0), vec3(1.0) ), 0.03 );\n    dHead = min( dHead, sdEllipsoid( ph, vec3(0.0,0.1,0.3), vec3(0.15,0.08,0.15) ) );\n\n    if( dHead < res.x ) res = vec3( dHead, MAT_LADY_HEAD, 0.0 );\n    \n    res.x += 0.0007*sin(150.0*p.x)*sin(150.0*p.z)*sin(150.0*p.y); \/\/ iqiq\n\n    \/\/ -------------\n    \n    vec3 k1 = vec3(0.42,-0.05,0.92);\n    vec3 k2 = vec3(0.49,-0.2,1.05);\n    float dLegs = 10.0;\n\n    float sx = sign(p.x);\n    p.x = abs(p.x);\n    for( int k=0; k<3; k++ )\n    {   \n        vec3 q = p;\n        q.y -= min(sx,0.0)*0.1;\n        if( k==0) q += vec3( 0.0,0.11,0.0);\n        if( k==1) q += vec3(-0.3,0.1,0.2);\n        if( k==2) q += vec3(-0.3,0.1,0.6);\n        \n        vec2 se = sdLine( q, vec3(0.3,0.1,0.8), k1 );\n        se.x -= 0.015 + 0.15*se.y*se.y*(1.0-se.y);\n        dLegs = min(dLegs,se.x);\n\n        se = sdLine( q, k1, k2 );\n        se.x -= 0.01 + 0.01*se.y;\n        dLegs = min(dLegs,se.x);\n\n        se = sdLine( q, k2, k2 + vec3(0.1,0.0,0.1) );\n        se.x -= 0.02 - 0.01*se.y;\n        dLegs = min(dLegs,se.x);\n    }\n    \n    if( dLegs<res.x ) res = vec3(dLegs,MAT_LADY_LEGS, 0.0);\n\n\n    return res;\n}\n\n\nvec3 worldToMushrom( in vec3 pos )\n{\n    vec3 qos = pos;\n    qos.xy = (mat2(60,11,-11,60)\/61.0) * qos.xy;\n    qos.y += 0.03*sin(3.0*qos.z - 2.0*sin(3.0*qos.x));\n    qos.y -= 0.4;\n    return qos;\n}\n\nvec3 mapMushroom( in vec3 pos, in vec3 cur )\n{\n    vec3 res = cur;\n\n    vec3 qos = worldToMushrom(pos);\n    float db = length(qos-vec3(0.0,1.2,0.0)) - 1.3;\n    if( db<cur.x )\n    {\n\n        {\n\n            float d1 = sdEllipsoid( qos, vec3(0.0, 1.4,0.0), vec3(0.8,1.0,0.8) );\n\n            d1 -= 0.025*textureLod( iChannel1, 0.05*qos.xz, 0.0 ).x - 0.02;\n\n            float d2 = sdEllipsoid( qos, vec3(0.0, 0.5,0.0), vec3(1.3,1.2,1.3) );\n            float d = smax( d1, -d2, 0.1 );\n            d *= 0.8;\n            if( d<res.x )\n            {\n                res = vec3( d, MAT_MUSH_HEAD, 0.0 );\n            }\n        }\n\n\n        {\n            pos.x += 0.3*sin(pos.y) - 0.65;\n            float pa = sin( 20.0*atan(pos.z,pos.x) );\n            vec2 se = sdLine( pos, vec3(0.0,2.0,0.0), vec3(0.0,0.0,0.0) );\n\n            float tt = 0.25 - 0.1*4.0*se.y*(1.0-se.y);\n\n            float d3 = se.x - tt;\n\n            d3 = smin( d3, sdEllipsoid( pos, vec3(0.0, 1.7 - 2.0*length2(pos.xz),0.0), vec3(0.3,0.05,0.3) ), 0.05);\n            d3 += 0.003*pa;\n            d3 *= 0.7;\n            \n            if( d3<res.x )\n                res = vec3( d3, MAT_MUSH_NECK, 0.0 );\n        }\n    \n    }\n    return res;\n}\n\n\n\nvec3 mapGrass( in vec3 pos, float h, in vec3 cur )\n{\n    vec3 res = cur;\n    \n    float db = pos.y-2.6;\n    \n    if( db<cur.x && pos.z>-1.65 )\n    {\n        const float gf = 4.0;\n\n        vec3 qos = pos * gf;\n\n        vec2 n = floor( qos.xz );\n        vec2 f = fract( qos.xz );\n        for( int j=-2; j<=2; j++ )\n        for( int i=-2; i<=2; i++ )\n        {\n            vec2  g = vec2( float(i), float(j) );\n\n            vec2 ra2 = hash2( n + g + vec2(31.0,57.0) );\n\n            if( ra2.x<0.73 ) continue;\n\n            vec2  o = hash2( n + g );\n            vec2  r = g - f + o;\n            vec2 ra = hash2( n + g + vec2(11.0,37.0) );\n\n            float gh = 2.0*(0.3+0.7*ra.x);\n\n            float rosy = qos.y - h*gf;\n\n            r.xy = reflect( r.xy, normalize(-1.0+2.0*ra) );\n            r.x -= 0.03*rosy*rosy;\n\n            r.x *= 4.0;\n\n            float mo = 0.1*sin( 2.0*iTime + 20.0*ra.y )*(0.2+0.8*ra.x);\n            vec2 se = sdLineOri( vec3(r.x,rosy,r.y), vec3(4.0 + mo,gh*gf,mo) );\n\n            float gr = 0.3*sqrt(1.0-0.99*se.y);\n            float d = se.x - gr;\n            d \/= 4.0;\n\n            d \/= gf;\n            if( d<res.x )\n            {\n                res.x = d;\n                res.y = MAT_GRASS;\n                res.z = r.y;\n            }\n        }\n    }\n    \n    return res;\n}\n\n\nvec3 mapCrapInTheAir( in vec3 pos, in vec3 cur)\n{\n    vec3 res = cur;\n    \n    ivec2 id = ivec2(floor((pos.xz+2.0)\/4.0));\n    pos.xz = mod(pos.xz+2.0,4.0)-2.0;\n    float dm = 1e10;\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 o = vec3(0.0,3.2,0.0);\n        o += vec3(1.7,1.50,1.7)*(-1.0 + 2.0*hash3(float(i)));\n        o += vec3(0.3,0.15,0.3)*sin(0.3*iTime + vec3(float(i+id.y),float(i+3+id.x),float(i*2+1+2*id.x)));\n        float d = length2(pos - o);\n        dm = min(d,dm);\n    }\n    dm = sqrt(dm)-0.02;\n    \n    if( dm<res.x )\n        res = vec3( dm,MAT_CITA,0);\n    \n    return res;\n}\n\nvec3 mapMoss( in vec3 pos, float h, vec3 cur)\n{\n    vec3 res = cur;\n\n    float db = pos.y-2.2;\n    if( db<res.x )\n    {\n    const float gf = 2.0;\n    \n    vec3 qos = pos * gf;\n    vec2 n = floor( qos.xz );\n    vec2 f = fract( qos.xz );\n\n    for( int k=ZERO; k<2; k++ )\n    {\n        for( int j=-1; j<=1; j++ )\n        for( int i=-1; i<=1; i++ )\n        {\n            vec2  g = vec2( float(i), float(j) );\n            vec2  o = hash2( n + g + vec2(float(k),float(k*5)));\n            vec2  r = g - f + o;\n\n            vec2 ra  = hash2( n + g + vec2(11.0, 37.0) + float(2*k) );\n            vec2 ra2 = hash2( n + g + vec2(41.0,137.0) + float(3*k) );\n\n            float mh = 0.5 + 1.0*ra2.y;\n            vec3 ros = qos - vec3(0.0,h*gf,0.0);\n\n            vec3 rr = vec3(r.x,ros.y,r.y);\n\n            rr.xz = reflect( rr.xz, normalize(-1.0+2.0*ra) );\n\n            rr.xz += 0.5*(-1.0+2.0*ra2);\n            vec2 se  = sdLineOriY( rr, gf*mh );\n            float sey = se.y;\n            float d = se.x - 0.05*(2.0-smoothstep(0.0,0.1,abs(se.y-0.9)));\n\n            vec3 pp = vec3(rr.x,mod(rr.y+0.2*0.0,0.4)-0.2*0.0,rr.z);\n\n            float an = mod( 21.0*floor( (rr.y+0.2*0.0)\/0.4 ), 1.57 );\n            float cc = cos(an);\n            float ss = sin(an);\n            pp.xz = mat2(cc,ss,-ss,cc)*pp.xz;\n\n            pp.xz = abs(pp.xz);\n            vec3 ppp = (pp.z>pp.x) ? pp.zyx : pp; \n            vec2 se2 = sdLineOri( ppp, vec3( 0.4,0.3,0.0) );\n            vec2 se3 = sdLineOri( pp,  vec3( 0.2,0.3,0.2) ); if( se3.x<se2.x ) se2 = se3;\n            float d2 = se2.x - (0.02 + 0.03*se2.y);\n\n            d2 = max( d2, (rr.y-0.83*gf*mh) );\n            d = smin( d, d2, 0.05 );\n\n            d \/= gf;\n            d *= 0.9;\n            if( d<res.x )\n            {\n                res.x = d;\n                res.y = MAT_MOSS;\n                res.z = clamp(length(rr.xz)*4.0+rr.y*0.2,0.0,1.0);\n                float e = clamp((pos.y - h)\/1.0,0.0,1.0);\n                res.z *= 0.02 + 0.98*e*e;\n                \n                if( ra.y>0.85 && abs(se.y-0.95)<0.1 ) res.z = -res.z;\n            }\n        }\n    }\n\n    }\n    \n    return res;\n}\n\n\nvec3 worldToLadyBug( in vec3 p )\n{\n    \/\/ TODO: combine all of the above in a single 4x4 matrix\n    p = 4.0*(p - vec3(-0.0,3.2-0.6,-0.57));\n    p = rotateY( rotateZ( rotateX( p, -0.92 ), 0.49), 3.5 );\n    p.y += 0.2;\n    return p;\n}\n\n\nconst vec3 mushroomPos1 = vec3( 0.0,0.1,0.0);\nconst vec3 mushroomPos2 = vec3(-3.0,0.0,3.0);\n\nfloat terrain( in vec2 pos )\n{\n    return 0.3 - 0.3*sin(pos.x*0.5 - sin(pos.y*0.5));\n}\n\nvec3 mapShadow( in vec3 pos )\n{\n    float h = terrain( pos.xz );\n    float d = pos.y - h;\n    vec3 res = vec3( d, MAT_GROUND, 0.0 );\n    \n    res = mapGrass(pos,h,res);\n    res = mapMoss(pos,h,res);\n\n    vec3 m1 =  pos - mushroomPos1;\n    vec3 m2 = (pos - mushroomPos2).zyx;\n    if( length2(m2.xz) < length2(m1.xz) ) m1 = m2;\n\tres = mapMushroom(m1, res);\n\n\n    vec3 q = worldToLadyBug(pos);\n    vec3 d3 = mapLadyBug(q, res.x*4.0); d3.x\/=4.0;\n    if( d3.x<res.x ) res = d3;\n\n    return res;\n}\n\n\nvec3 map( in vec3 pos )\n{\n    vec3 res = mapShadow(pos);\n        \n    res = mapCrapInTheAir(pos, res);\n\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n#if 0    \n    vec2 e = vec2(0.002,0.0); \n    return normalize( vec3( map(pos+e.xyy).x - map(pos-e.xyy).x,\n                            map(pos+e.yxy).x - map(pos-e.yxy).x,\n                            map(pos+e.yyx).x - map(pos-e.yyx).x ) );\n#else\n    \/\/ inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+e*0.002).x;\n    }\n    return normalize(n);\n#endif    \n}\n    \nfloat calcShadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.01;\n    for( int i=ZERO; i<100; i++ )\n    {\n        vec3 pos = ro + rd*t;\n        float h = mapShadow( pos ).x;\n        res = min( res, 16.0*max(h,0.0)\/t );\n        if( h<0.0001 || pos.y>3.0 ) break;\n        \n        t += clamp(h,0.01,0.2);\n    }\n    \n    return clamp(res,0.0,1.0);\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    const float tmax = 12.0;\n    \n\tvec3 res = vec3(1.0,-1.0, 0.0);\n\n    for( int i=ZERO; i<256; i++ )\n    {\n        vec3 h = map( ro + rd*res.x );\n        if( h.x<(0.00015*res.x) || res.x>tmax )\n            break;\n        res.x += h.x;\n        res.y = h.y;\n        res.z = h.z;\n    }\n    \n    if( res.x>=tmax ) res.y = -1.0;\n    \n    return res;\n}\n\nvoid materials( in float matID, in float matID2, in vec3 pos, in vec3 nor,\n                out vec3 matColor, out float matRough,\n                out vec3 matNor, out float matOcc, out float matSSS, out float matRefOcc, out vec3 matGamma )\n{\n    matNor = nor;\n    matOcc = 1.0;\n    matSSS = 0.0;\n    matRough = 1.0;\n    matRefOcc = 1.0;\n    matGamma = vec3(1.0);\n    \n    if( matID<MAT_MUSH_HEAD+0.5 )\n    {\n        vec3 m1 =  pos - mushroomPos1;\n    \tvec3 m2 = (pos - mushroomPos2).zyx;\n    \tif( length2(m2.xz) < length2(m1.xz) ) m1 = m2;\n\n        vec3 qos = worldToMushrom( m1 );\n\n        matColor = vec3(0.26,0.21,0.15);\n        matColor -= 0.2*smoothstep(0.4,0.9,texture( iChannel1, 0.8*qos.xz ).x);\n        matColor = mix( vec3(0.35,0.35,0.35 ), matColor, smoothstep(1.5,2.4,qos.y) );\n        matColor = mix( vec3(0.05,0.02,0.01 ), matColor, smoothstep(1.5,1.65,qos.y) );\n        matColor -= 0.2*texture( iChannel1, 0.1*qos.xz ).zyx;\n        matColor *= 0.4*0.45;\n        matColor = max( matColor, 0.0 );\n        \n        matColor += matColor*vec3(0.3,0.6,0.0)*(1.0-smoothstep( 0.8, 1.4, length(m1-vec3(0.5,1.1,-0.3)) ));\n        \n        matRough = 0.6;\n        matSSS = 1.0;\n        matOcc = smoothstep( 0.4,1.5,length(worldToLadyBug( pos ).xz) );\n        matRefOcc = matOcc;\n        matGamma = vec3(0.75,0.87,1.0);\n    }\n    else if( matID<MAT_MUSH_NECK+0.5 )\n    {\n        vec2 uv = vec2( pos.y*0.5, atan(pos.x,pos.z)*(3.0\/3.14159) );\n\n        matColor = vec3(0.42,0.35,0.15);\n        \n        float pa = smoothstep(0.3,0.8,pos.y);\n\n        matColor -= pa*0.2*texture( iChannel1, 0.5*uv ).xxx;\n        matColor = max(vec3(0.0),matColor);\n        \n        matColor *= 0.22;\n        matColor = clamp( matColor, 0.0, 1.0 );\n        \n        matRough = 0.7;\n        matSSS = 1.0;\n        \n        matOcc = clamp( (pos.y-0.5)\/1.3,0.0,1.0);\n        matOcc = matOcc*matOcc;\n        matOcc *= clamp( 1.0-(pos.y-1.2)\/1.2,0.0,1.0);\n        matOcc = matOcc*0.5 + 0.5*matOcc*matOcc;\n        matRefOcc = matOcc;\n        matGamma = vec3(0.75,0.95,1.0);\n\n    }\n    else if( matID<MAT_LADY_BODY+.5 )\n    {\n        vec3 qos = worldToLadyBug( pos );\n            \n        \/\/ red\n        matColor = vec3(0.16,0.008,0.0);\n\n        float f = texture( iChannel1, 0.1*qos.xz ).x;\n        matColor = mix( matColor, vec3(0.15,0.07,0.0), f*f );\n        \n        qos.x = abs(qos.x);\n        vec2 uv = vec2( atan(qos.x,qos.y), 1.57*qos.z )*0.1;\n\n        \/\/ white\n        float p = length( (qos.xz-vec2(0.0,0.9))*vec2(0.5,1.0));\n        matColor = mix( matColor, vec3(1.0,0.8,0.6)*0.6, 1.0-smoothstep(0.09,0.14,p) );\n\n        \/\/ black\n        p = cos(uv.x*40.0)*cos(uv.y*40.0+1.57);\n        matColor *= 1.0-smoothstep( 0.35, 0.45, p );\n        \n        \n        f = texture( iChannel1, qos.xz*vec2(0.8,0.1) ).x;\n        matColor *= 1.0 - 0.5*f;\n        f = texture( iChannel1, 4.0*qos.xz ).x;\n        matColor *= 1.0 - 0.99*f*f;\n        \n        \n        matColor *= 1.3;\n        matRough = 0.15;\n        matOcc = 0.6 + 0.4*smoothstep( 0.0,0.3,qos.y );\n        matRefOcc = 0.2 + 0.8*smoothstep( 0.0,0.35,qos.y );\n    }\n    else if( matID<MAT_LADY_HEAD+.5 )\n    {\n        vec3 qos = worldToLadyBug( pos );\n\n        matColor = vec3(0.001);\n\n        qos.z += -0.22;\n        qos.y += -0.7;\n        float p = cos(12.0*qos.z)*cos(5.0*qos.y);\n        p += .1*cos(48.0*qos.z)*cos(20.0*qos.y);\n        matColor = mix( matColor, vec3(1.0,0.9,0.8)*0.8, smoothstep(0.8,1.0,p) );\n        matRough = 0.2;\n        matRefOcc = matOcc;\n    }\n    else if( matID<MAT_LADY_LEGS+.5 )\n    {\n        matColor = vec3(0.0,0.0,0.0);\n        matRough = 0.8;\n        matRefOcc = matOcc;\n    }\n    else if( matID<MAT_GRASS+0.5 )\n    {\n    \tmatColor = vec3(0.1,0.15,0.03);\n        \n        float h = terrain( pos.xz );\n        float e = clamp(pos.y-h,0.0,1.0);\n        matOcc = 0.01 + 0.99*e*e;\n        \n        matColor *= 1.0 - 0.3*cos(matID2*23.0);\n        matColor += 0.04*sin(matID2*41.0);\n        \n        matSSS = 0.2;\n        matColor *= 0.75;\n        matRough = 0.5;\n        matOcc *= 0.1+0.9*smoothstep( 0.0, 2.0, length(pos.xz-mushroomPos1.xz-vec2(0.3,0.3)) );\n        \/\/matOcc *= 0.1+0.9*smoothstep( 0.0, 2.0, length(pos.xz-mushroomPos2.xz-vec2(0.0,0.0)) );\n        matRefOcc = matOcc;\n        matGamma = vec3(0.9,0.9,1.0);\n    }\n    else if( matID<MAT_GROUND+0.5 )\n    {\n        matColor = vec3(0.2,0.2,0.0);\n        matRough = 1.0;\n        matOcc = 0.02;\n        matRefOcc = matOcc;\n    }\n    else if( matID<MAT_MOSS+0.5 )\n    {\n        matColor = (matID2>0.0) ? vec3(0.18,0.15,0.02) : vec3(0.1,0.05,0.005);\n        \n        float f = texture( iChannel1, pos.xy*8.0 ).x;\n        matColor *= 0.55 + f;\n            \n        matOcc = abs(matID2);\n        matOcc *= 0.2+0.8*smoothstep( 0.0, 1.5, length(pos.xz-mushroomPos1.xz-vec2(0.3,0.3)) );\n        matOcc *= 0.2+0.8*smoothstep( 0.0, 1.5, length(pos.xz-mushroomPos2.xz-vec2(0.0,0.0)) );\n        matRough = 0.25;\n        matSSS = 0.5;\n        matRefOcc = matOcc;\n        matGamma = vec3(0.7,0.7,1.0);\n        \n        if( matID2<0.0 ) { matGamma = vec3(0.7,0.9,1.0); matRough = 0.75;}\n    }\n    else \/\/if( matID<MAT_CITA+0.5 )\n    {\n        matColor = vec3(1.0);\n        matSSS = 1.0;\n        matRough = 1.0;\n        matGamma = vec3(0.5);\n    }\n}\n\n\nvec3 lighting( in float dis, in vec3 rd, in vec3 pos, in vec3 nor,\n               in float occ,\n               in vec3 matColor, in float matRough, in float matSSS, in float matRefOcc,\n               in vec3 matGamma )\n{\n    vec3 col = vec3(0.0);\n\n    float fre = clamp( 1.0+dot(nor,rd), 0.0, 1.0 );\n    \n    float sfre = 0.04 + 0.96*pow( fre, 5.0 );\n    \n    float pn = exp2( 10.0*(1.0-matRough) );\n    \n\n    \/\/ sun light\n    {\n        vec3 sunColor = vec3(7.0,4.0,3.0)*1.4;\n        vec3 sun = normalize(vec3(-0.8,0.35,-0.3));\n        float dif = clamp( dot(sun,nor), 0.0, 1.0 );\n        float sha = 0.0; if( dif>0.0 ) sha = calcShadow( pos, sun );\n        vec3 hal = normalize( sun - rd );\n        float spe = pow( clamp(dot(hal,nor), 0.0, 1.0 ), pn );\n        col += matColor * sunColor * dif * vec3(sha,0.5*sha*(1.0+sha),sha*sha);\n        col += (1.0-matRough)*sunColor * spe * pn * dif * sha * sfre \/ 4.0;\n    }\n\n    \/\/ sky light\n    {\n        vec3 skyColor = vec3(0.3,0.4,0.7)*1.0;\n        float dif = 0.5 + 0.5*nor.y;\n        col += matColor * skyColor * dif * occ;\n        col += skyColor * (1.0-matRough) * smoothstep( 0.0,0.2,reflect(rd,nor).y ) * sfre * 2.5 * matRefOcc;\n    }\n\n    \/\/ bounce light\n    {\n        vec3 bouColor = vec3(0.2,0.4,0.0)*1.2;\n        float dif = clamp(0.5 - 0.5*nor.y,0.0,1.0);\n        col += matColor * bouColor * dif * occ;\n    }\n\n    col += fre*matColor*occ*matSSS;\n    col = pow( max(col,0.0), matGamma );\n\n    return col;\n}\n\nvec3 background(in vec3 d)\n{\n    \/\/ cheap cubemap\n    vec3 n = abs(d);\n    vec2 uv = (n.x>n.y && n.x>n.z) ? d.yz\/d.x: \n              (n.y>n.x && n.y>n.z) ? d.zx\/d.y:\n                                     d.xy\/d.z;\n    \n    return vec3(0.02,0.01,0.00) + vec3(2.5)*pow(texture( iChannel1, 0.1*uv, 1.0 ).yxz,vec3(2.6,4.0,4.2));\n}\n\nmat3 calcCamera( in vec3 ro, in vec3 ta )\n{\n    vec3 w = normalize( ro-ta );\n    vec3 u = normalize( cross( vec3(0.0,1.0,0.0), w ) );\n    vec3 v =          ( cross( w, u ) );\n    \n    return mat3( u, v, w );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy+2.0*fragCoord) \/ iResolution.y;\n    \n    \/\/ camera\n    vec3 ro = vec3(0.0,2.7,-3.0);\n    vec3 ta = vec3(0.0,1.9,0.0);\n    ro.x += 0.3*sin(0.03*iTime);    \n    mat3 camRot = calcCamera( ro, ta );\n    \n    \/\/ ray\n    vec3 rd = normalize( camRot * vec3(p,-2.0) );\n    \n    \/\/ background\n    vec3 col = background(rd);\n \n    \/\/ scene\n    vec3 tm = intersect(ro,rd);\n    float t = tm.x;\n    float matID = tm.y;\n    if( matID>0.5 )\n    {\n        vec3 pos = ro + t*rd;\n    \tvec3 nor = calcNormal( pos ); \n        \n        vec3 matNormal, matColor, matGamma;\n        float matRough, matOcc, matSSS, matRefOcc;\n        \n        materials( matID, tm.z, pos, nor, matColor, matRough, matNormal, matOcc, matSSS, matRefOcc, matGamma );\n        col = lighting( t, rd, pos, matNormal, matOcc, matColor, matRough, matSSS, matRefOcc, matGamma );\n    }\n    else\n    {\n        t = 30.0;\n    }\n    \n\tfragColor = vec4( col, t*dot(rd,normalize(ta-ro)) );\n}",
            "name": "Buffer A",
            "description": "",
            "type": "buffer"
        }
    ]
}