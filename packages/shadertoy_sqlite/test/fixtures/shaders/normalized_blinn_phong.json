{
    "ver": "0.1",
    "info": {
        "id": "3l3cR2",
        "date": "1609446276",
        "viewed": 122,
        "name": "Normalized Blinn Phong",
        "username": "iY0Yi",
        "description": "unnormalized Phong version:\nhttps:\/\/www.shadertoy.com\/view\/3ddBDn\n\nref:\nhttps:\/\/hanecci.hatenadiary.org\/entry\/20130505\/p2\nhttp:\/\/www.project-asura.com\/program\/d3d11\/d3d11_006.html",
        "likes": 12,
        "published": 3,
        "flags": 32,
        "usePreview": 0,
        "tags": [
            "blinnphong",
            "normalized"
        ],
        "hasliked": 0
    },
    "renderpass": [
        {
            "inputs": [
                {
                    "id": "XsXGR8",
                    "filepath": "\/media\/previz\/buffer01.png",
                    "previewfilepath": "\/media\/previz\/buffer01.png",
                    "type": "buffer",
                    "channel": 0,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                }
            ],
            "outputs": [
                {
                    "id": "4dfGRr",
                    "channel": 0
                }
            ],
            "code": "\nvec3 ACESFilm(vec3 x){\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))\/(x*(c*x+d)+e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    col = pow(col, vec3(.9));\n    col = ACESFilm(col);\n    fragColor = vec4(col, 1);\n}\n",
            "name": "Image",
            "description": "",
            "type": "image"
        },
        {
            "inputs": [],
            "outputs": [],
            "code": "\/\/ General\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#define iFrameRate 24.\n#define ZERO min(0,iFrame)\n#define PI 3.14159265\n#define HALF_PI 1.5707963267948966\n#define PI2 (2.0*PI)\n#define PHI (sqrt(5.0)*0.5 + 0.5)\n#define saturate(x) clamp(x, 0.0, 1.0)\n\n#define s2u(x) (x*.5+.5)\n#define u2s(x) ((x*2.)-1.)\n\n\/\/ Random & Noise\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\/\/ Hash \/ Noise by Anonymous:\n\/\/ I forgot where I found this...\nfloat hash( float n )\n{\n    return fract(sin(n)*158.5453);\n}\nfloat noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix( hash(p+0.0), hash(p+1.0),f);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 n){\n    float sum = 0.0;\n    float amp= 1.0;\n    for (int i = 0; i <5; i++){\n        sum += noise(n) * amp;\n        n += n*4.0;\n        amp *= 0.25;\n    }\n    return sum;\n}\n\nfloat fbm(vec2 n, int rep){\n    float sum = 0.0;\n    float amp= 1.0;\n    for (int i = 0; i <rep; i++){\n        sum += noise(n) * amp;\n        n += n*4.0;\n        amp *= 0.25;\n    }\n    return sum;\n}\n\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n\n    float n = p.x + p.y * 157.0 + 113.0 * p.z;\n    return mix(\n            mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n                    mix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),\n            mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                    mix(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);\n}\nfloat fbm(vec3 p) {\n    float f = 0.0;\n    f = 0.5000 * noise(p);\n    p *= 2.01;\n    f += 0.2500 * noise(p);\n    p *= 2.02;\n    f += 0.1250 * noise(p);\n\n    return f;\n}\n\n\/\/ Raymarching\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#define MIN_DIST 0.01\n#define MAX_DIST 1000.\n#define ITERATION 200\n#define MAT_VOID vec3(-1)\n\n#define AMB_COL vec3(1., 0.7717, 0.6500)\n#define AMB_STRENGTH 0.9100\n#define FOG_COL vec3(1., 0.7717, 0.6500)\n#define FOG_START 0.5740\n\n\n\/\/ Cheap Rotation by las:\n\/\/ http:\/\/www.pouet.net\/topic.php?which=7931&page=1\n#define R(p, a) p=cos(a)*p+sin(a)*vec2(p.y,-p.x)\nvec3 rot(vec3 p,vec3 r){\n    R(p.xz, r.y);\n    R(p.yx, r.z);\n    R(p.zy, r.x);\n    return p;\n}\n\n\/\/ \"Hash without Sine\" by Dave_Hoskins:\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\/\/ Hash without Sine\n\/\/ MIT License...\n\/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*\/\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  2 out, 1 in...\nvec2 hash21(float p)\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/\/  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/\/  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/\/  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/\/  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ 4 out, 1 in...\nvec4 hash41(float p)\n{\n    vec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n    vec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n    vec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/ 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n    p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
            "name": "Common",
            "description": "",
            "type": "common"
        },
        {
            "inputs": [],
            "outputs": [
                {
                    "id": "4dXGR8",
                    "channel": 0
                }
            ],
            "code": "\/\/ \"init\": initialize camera and lights.\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvec3  Camera_pos;\nvec4  Camera_quat;\nfloat Camera_fov;\nvec3  sdLight001_dir;\nvec3  sdLight001_col;\nfloat sdLight001_clip_start;\nfloat sdLight001_clip_end;\nfloat sdLight001_softness;\n#define L0_dir sdLight001_dir\n#define L0_col sdLight001_col\n#define L0_str sdLight001_clip_start\n#define L0_end sdLight001_clip_end\n#define L0_sft sdLight001_softness\nvec3  sdLight002_dir;\nvec3  sdLight002_col;\nfloat sdLight002_clip_start;\nfloat sdLight002_clip_end;\nfloat sdLight002_softness;\n#define L1_dir sdLight002_dir\n#define L1_col sdLight002_col\n#define L1_str sdLight002_clip_start\n#define L1_end sdLight002_clip_end\n#define L1_sft sdLight002_softness\n\nvoid init()\n{\n\tCamera_pos = vec3(-0.0913, 38.7396, 4.6344);\n\tCamera_quat = vec4(0.0205, 0.7140, 0.6996, 0.0200);\n\tCamera_fov = 0.1974;\n\tsdLight001_dir = normalize(vec3(-0.0538, 0.6674, 0.7427));\n\tsdLight001_col = vec3(1., 0.9681, 0.8761);\n\tsdLight001_clip_start = 0.0050;\n\tsdLight001_clip_end = 50.;\n\tsdLight001_softness = 2.2260;\n\tsdLight002_dir = normalize(vec3(0.0538, -0.6674, -0.7427));\n\tsdLight002_col = vec3(0.1523, 0.1523, 0.1523);\n\tsdLight002_clip_start = 0.0500;\n\tsdLight002_clip_end = 30.;\n\tsdLight002_softness = 50.;\n\n}\n\nvec3 ro = vec3(0), rd = vec3(0);\nvec3 col = vec3(0);\n\n\/\/ \"camera\": create camera vectors.\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvec3 quat_rotate(vec4 quat, vec3 dir)\n{\n    return dir + 2.0 * cross(quat.xyz, cross(quat.xyz, dir) + quat.w * dir);\n}\n\nvoid camera(vec2 uv)\n{\n    vec3 dir = quat_rotate(Camera_quat, vec3(0,0,-1)).xzy;\n    vec3 up = quat_rotate(Camera_quat, vec3(0,1,0)).xzy;\n    vec3 pos = Camera_pos.xzy;\n    float fov = Camera_fov;\n    vec3 target = pos-dir;\n\n    vec3 cw = normalize(target - pos);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n\n    mat3 camMat = mat3(cu, cv, cw);\n    rd = normalize(camMat * normalize(vec3(sin(fov) * uv.x, sin(fov) * uv.y, -cos(fov))));\n    ro = pos;\n}\n\n\/\/ SDF functions\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfloat vmax(vec3 v){\n    return max(max(v.x, v.y), v.z);\n}\n\nfloat sdPlane(in vec3 p){\n    return p.y;\n}\n\nfloat sdSphere(in vec3 p,in float r)\n{\n    return length(p)-r;\n}\n\nfloat sdEllipsoid(in vec3 p, in vec3 r)\n{\n    return (length(p\/r)-1.0)*min(min(r.x,r.y),r.z);\n}\n\nfloat sdCapsule(vec3 p, float r, float c)\n{\n    return mix(length(p.xz) - r, length(vec3(p.x, abs(p.y) - c, p.z)) - r, step(c, abs(p.y)));\n}\n\nfloat sdCappedTorus(vec3 p, vec2 r, float per)\n{\n    p.x = abs(p.x);\n    vec2 sc = vec2(sin(per),cos(per));\n    float k = (sc.y*p.x>sc.x*p.z) ? dot(p.xz,sc) : length(p.xz);\n    return sqrt( dot(p,p) + r.x*r.x - 2.0*r.x*k ) - r.y;\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)\/dot(k2,k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot(ca,ca),dot(cb,cb)) );\n}\n\nfloat sdBox(vec3 p,vec3 b)\n{\n    vec3 d=abs(p)-b;\n    return length(max(d,vec3(0)))+vmax(min(d,vec3(0.0)));\n}\n\nfloat fOpUnion(in float a,in float b)\n{\n    return a<b?a:b;\n}\n\n\nvec4 v4OpUnion(in vec4 a,in vec4 b)\n{\n    return a.x<b.x?a:b;\n}\n\nfloat fOpUnionSmooth(float a,float b,float r)\n{\n    vec2 u = max(vec2(r - a,r - b), vec2(0));\n    return max(r, min (a, b)) - length(u);\n}\n\nvec4 v4OpUnionSmooth(vec4 a,vec4 b,float r)\n{\n    float h=clamp(0.5+0.5*(b.x-a.x)\/r,0.0,1.0);\n    float res = mix(b.x,a.x,h)-r*h*(1.0-h);\n    return vec4(res, mix(b.yzw,a.yzw,h));\n}\n\n\/\/ scene: Shapes.\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#define MAT_001 vec3(0.6415, 0.6584, 0.7382)\n#define MAT_002 vec3(0.9627, 0.8670, 0.7296)\n#define MAT_003 vec3(0.5510, 0.9288, 0.9146)\n#define MAT_004 vec3(0.8725, 0.6954, 0.7670)\n#define MAT_005 vec3(0.9622, 0.9396, 0.2231)\n#define MAT_006 vec3(0.9991, 1.0000, 0.8002)\n#define MAT_007 vec3(0.5713, 0.8689, 0.6389)\n\nvec4 sdScene(vec3 p)\n{\n    float d = MAX_DIST;\n    vec4 res = vec4(MAX_DIST, MAT_VOID);\n\n\td = sdBox(p+vec3(1.5245, -9.0242, 0.6086), vec3(1., 1., 1.))-0.0100;\n\tres = v4OpUnion(vec4(d, MAT_004), res);\n\n\td = sdCappedTorus(rot(p+vec3(3.9270, -5.4430, -1.0193), vec3(1.5708, 0., 0.)), vec2(5.3682, 0.0245), 3.1413);\n\tres = v4OpUnion(vec4(d, MAT_007), res);\n\n\td = sdCapsule(p+vec3(-1.5767, -6.2993, -0.6990), 2.0201, 0.);\n\td = fOpUnionSmooth(sdCapsule(rot(p+vec3(-0.5540, -4.9952, -2.5487), vec3(-0.0330, 0.0176, 0.6502)), 0.0125, 6.1996), d, 0.2800);\n\tres = v4OpUnionSmooth(vec4(d, MAT_006), res, 0.4000);\n\n\td = sdConeSection(p+vec3(5.0217, -5.8192, -0.8244), 1.1768, 1.5291, 0.)-0.0100;\n\tres = v4OpUnion(vec4(d, MAT_003), res);\n\n\td = sdEllipsoid(p+vec3(7.7937, -3.2336, 1.0291), vec3(1.1783, 1.1783, 1.1783));\n\tres = v4OpUnionSmooth(vec4(d, MAT_002), res, 0.0100);\n\n\td = sdPlane(p);\n\tres = v4OpUnionSmooth(vec4(d, MAT_001), res, 0.0100);\n\n\td = sdSphere(p+vec3(-3.8602, -3.7245, 0.8280), 1.);\n\tres = v4OpUnionSmooth(vec4(d, MAT_004), res, 0.0100);\n\n\td = sdEllipsoid(rot(p+vec3(-1.6491, -3.7357, -0.7067), vec3(0., 3.1416, 0.)), vec3(0.3514, 0.3514, 0.3514));\n\tres = v4OpUnionSmooth(vec4(d, MAT_005), res, 0.8072);\n\n\td = sdEllipsoid(p+vec3(4.1916, -3.8762, -2.3231), vec3(0.0480, 0.0480, 0.0480));\n\td = fOpUnionSmooth(sdEllipsoid(p+vec3(4.1916, -4.3946, -2.3231), vec3(0.0480, 0.0480, 0.0480)), d, 0.5279);\n\td = fOpUnionSmooth(sdEllipsoid(p+vec3(-0.0216, -4.2403, 0.2753), vec3(0.5796, 0.5796, 0.5796)), d, 1.8479);\n\tres = v4OpUnionSmooth(vec4(d, MAT_003), res, 0.5279);\n\n\td = sdEllipsoid(rot(p+vec3(1.3863, -4.7328, -1.8904), vec3(-0.3705, 0.4450, -2.3236)), vec3(0.7026, 0.7026, 0.7026));\n\tres = v4OpUnionSmooth(vec4(d, MAT_004), res, 2.0786);\n\n\td = sdEllipsoid(rot(p+vec3(-2.8616, -2.8558, -0.9923), vec3(-0.3705, 0.4450, -2.3236)), vec3(0.5893, 0.5893, 0.5893));\n\tres = v4OpUnionSmooth(vec4(d, MAT_003), res, 1.5842);\n\n\td = sdEllipsoid(rot(p+vec3(0.7289, -2.3445, -2.7742), vec3(-0.3705, 0.4450, -2.3236)), vec3(0.2146, 0.2146, 0.2146));\n\tres = v4OpUnionSmooth(vec4(d, MAT_004), res, 1.2901);\n\n    return res;\n}\n\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvec4 intersect()\n{\n    float d = 1.;\n    vec3  m = MAT_VOID;\n\n    int i = 0;\n    for (int i = ZERO; i < ITERATION; i++)\n    {\n        vec3 p = ro + d * rd;\n        vec4 res = sdScene(p);\n        m = res.yzw;\n        res.x *= .5;\n        if (abs(res.x) < MIN_DIST || res.x >= MAX_DIST) break;\n        d += res.x;\n        if (d >= MAX_DIST) break;\n    }\n\n    return vec4(d,m);\n}\n\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvec3 normal(vec3 p)\n{\n    \/\/ Copy from iq shader.\n    \/\/ inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*sdScene(p+0.0005*e).x;\n    }\n    return normalize(n);\n}\n\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfloat shadow(vec3 o, vec3 n)\n{\n    float mint=L0_str;\n    float maxt=L0_end;\n    float k = L0_sft;\n    float res = 1.;\n    float t=mint;\n    for( int i=0; i < ITERATION; i++)\n    {\n        float h = sdScene(o + L0_dir*t).x;\n        res = min( res, k*h\/t);\n        t += h;\n        if( res<0.0001 || t>maxt ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 randomSphereDir(vec2 rnd)\n{\n    float s = rnd.x*PI*2.;\n    float t = rnd.y*2.-1.;\n    return vec3(sin(s), cos(s), t) \/ sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n    vec3 v = randomSphereDir( vec2(hash11(i+1.), hash11(i+2.)) );\n    return v * sign(dot(v, dir));\n}\n\n\/\/ \"Hemispherical SDF AO\" by XT95:\n\/\/ https:\/\/www.shadertoy.com\/view\/4sdGWN\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n    const int nbIte = 12;\n    const float nbIteInv = 1.\/float(nbIte);\n    const float rad = 1.-1.*nbIteInv;\n\n    float ao = 0.0;\n\n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash11(float(i))*maxDist;\n        vec3 aord = normalize(n+randomHemisphereDir(n, l )*rad)*l;\n\n        ao += (l - max(sdScene( p + aord ).x,0.)) \/ maxDist * falloff;\n    }\n\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\/\/ Phong specular\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nfloat specular(vec3 p, vec3 n, vec3 ld)\n{\n    float power = 50.;\n    vec3 to_eye = normalize(p - ro);\n    vec3 reflect_light = normalize(reflect(ld, n));\n    return pow(max(dot(to_eye, reflect_light), 0.), power);\n}\nfloat ref(vec3 p, vec3 n, vec3 ld)\n{\n    float power = 1.;\n    vec3 to_eye = normalize(p - ro);\n    vec3 reflect_light = normalize(reflect(ld, n));\n    return pow(max(dot(to_eye, reflect_light), 0.), power);\n}\n\n\/\/ https:\/\/hanecci.hatenadiary.org\/entry\/20130505\/p2\n\/\/ http:\/\/www.project-asura.com\/program\/d3d11\/d3d11_006.html\nfloat normalizedBlinnPhong(vec3 p, vec3 n, vec3 vd, vec3 ld){\n    float m = 300.;\n    float norm_factor = (m+1.) \/ (2.*PI);\n    vec3 h  = normalize(vd+ld);\n    return pow(max(0., dot(h, n)), m) * norm_factor;\n}\nfloat normalizedRef(vec3 p, vec3 n, vec3 vd, vec3 ld){\n    float m = 6.;\n    float norm_factor = (m+1.) \/ (2.*PI);\n    vec3 h  = normalize(vd+ld);\n    return pow(max(0., dot(h, n)), m) * norm_factor;\n}\n\n\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvoid render()\n{\n    vec4 hit = intersect();\n    vec3 p = ro + hit.x * rd;\n    vec3 base_col = hit.yzw;\n\n    if (hit.x>=MAX_DIST)\n    {\n        col=AMB_COL;\n    }\n    else\n    {\n        vec3 n = normal(p);\n        vec3 offset = n * .00001;\n        float light1 = saturate(dot(n, L0_dir)) * (1.\/PI)*3.5;\n        float light2 = saturate(dot(n, L1_dir)) * (1.\/PI);\n        float shadow = shadow(p+offset, n);\n\n        float ao=0.;\n        ao = ambientOcclusion(p, n, .1, .5);\n        ao += ambientOcclusion(p, n, .5, .5);\n        ao += ambientOcclusion(p, n, 2., 2.);\n        ao += ambientOcclusion(p, n, 4., 2.);\n        ao = smoothstep(0., 4., ao);\n\n        float shade = 0.;\n        shade = light1;\n\n        vec3 shadeLight1 = vec3(L0_col*light1);\n        vec3 shadeLight2 = vec3(L1_col*light2);\n\n        col = shadeLight1;\n        col *= shadow;\n        col+= shadeLight2*ao;\n        col+= AMB_COL*ao*AMB_STRENGTH*(1.-normalizedRef(p, n, -rd, L0_dir)*.45);\n        col*= base_col;\n        \/\/col = mix(col, col+L0_col, specular(p, n, L0_dir)*shadow*1.);\n        col = mix(col, col+L0_col, normalizedBlinnPhong(p, n, -rd, L0_dir)*shadow*.025);\n        col = mix(col, FOG_COL, saturate(pow(distance(ro,p)\/MAX_DIST+FOG_START, 3.5)));\n    }\n}\n\n\/\/~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec2 offset = u2s(hash22(fragCoord+iTime))\/iResolution.xy*.5; \/\/ AA: Offset coord for each frame.\n    uv += offset; \/\/\n    \n    uv = (uv*2.-1.)*iResolution.y\/iResolution.x;\n    uv.x *= iResolution.x \/ iResolution.y;\n\n    init();\n    camera(uv);\n    render();\n\n    fragColor = vec4(col, 1.);\n}\n",
            "name": "Buffer A",
            "description": "",
            "type": "buffer"
        },
        {
            "inputs": [
                {
                    "id": "4dXGR8",
                    "filepath": "\/media\/previz\/buffer00.png",
                    "previewfilepath": "\/media\/previz\/buffer00.png",
                    "type": "buffer",
                    "channel": 0,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                },
                {
                    "id": "XsXGR8",
                    "filepath": "\/media\/previz\/buffer01.png",
                    "previewfilepath": "\/media\/previz\/buffer01.png",
                    "type": "buffer",
                    "channel": 1,
                    "sampler": {
                        "filter": "linear",
                        "wrap": "clamp",
                        "vflip": "true",
                        "srgb": "false",
                        "internal": "byte"
                    },
                    "published": 1
                }
            ],
            "outputs": [
                {
                    "id": "XsXGR8",
                    "channel": 0
                }
            ],
            "code": "\/\/ AA: Mix a new color with the average color.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 new = texture(iChannel0, uv);\n    \n    if(iFrame==0){\n        fragColor = new;\n        return;\n    }\n    \n    vec4 ave = texture(iChannel1, uv);\n    fragColor = mix(new, ave, .99);\n}",
            "name": "Buffer B",
            "description": "",
            "type": "buffer"
        }
    ]
}